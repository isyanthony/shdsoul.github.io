<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker(三):Dockerfile</title>
    <url>/2021/07/27/Docker%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Dockerfile介绍"><a href="#Dockerfile介绍" class="headerlink" title="Dockerfile介绍"></a>Dockerfile介绍</h1><p>Dockerfile可以认为是<strong>Docker镜像的描述文件，是由一系列命令和参数构成的脚本</strong>。主要作用是<strong>用来构建docker镜像的构建文件</strong>。</p>
<img src="/2021/07/27/Docker%EF%BC%88%E4%B8%89%EF%BC%89/1.png" class>

<ul>
<li><strong>通过架构图可以看出通过DockerFile可以直接构建镜像</strong></li>
</ul>
<h2 id="Dockerfile解析过程"><a href="#Dockerfile解析过程" class="headerlink" title="Dockerfile解析过程"></a>Dockerfile解析过程</h2><img src="/2021/07/27/Docker%EF%BC%88%E4%B8%89%EF%BC%89/2.png" class>

<h2 id="Dockerfile的保留命令"><a href="#Dockerfile的保留命令" class="headerlink" title="Dockerfile的保留命令"></a>Dockerfile的保留命令</h2><p>官方说明:<a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p>
<table>
<thead>
<tr>
<th>保留字</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><strong>FROM</strong></td>
<td><strong>当前镜像是基于哪个镜像的</strong> <code>第一个指令必须是FROM</code></td>
</tr>
<tr>
<td>MAINTAINER</td>
<td>镜像维护者的姓名和邮箱地址</td>
</tr>
<tr>
<td><strong>RUN</strong></td>
<td><strong>构建镜像时需要运行的指令</strong></td>
</tr>
<tr>
<td><strong>EXPOSE</strong></td>
<td><strong>当前容器对外暴露出的端口号</strong></td>
</tr>
<tr>
<td><strong>WORKDIR</strong></td>
<td><strong>指定在创建容器后，终端默认登录进来的工作目录，一个落脚点</strong></td>
</tr>
<tr>
<td><strong>ENV</strong></td>
<td><strong>用来在构建镜像过程中设置环境变量</strong></td>
</tr>
<tr>
<td><strong>ADD</strong></td>
<td><strong>将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar包</strong></td>
</tr>
<tr>
<td><strong>COPY</strong></td>
<td><strong>类似于ADD，拷贝文件和目录到镜像中<br>将从构建上下文目录中&lt;原路径&gt;的文件/目录复制到新的一层的镜像内的&lt;目标路径&gt;位置</strong></td>
</tr>
<tr>
<td><strong>VOLUME</strong></td>
<td><strong>容器数据卷，用于数据保存和持久化工作</strong></td>
</tr>
<tr>
<td><strong>CMD</strong></td>
<td><strong>指定一个容器启动时要运行的命令<br>Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换</strong></td>
</tr>
<tr>
<td><strong>ENTRYPOINT</strong></td>
<td><strong>指定一个容器启动时要运行的命令<br>ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及其参数</strong></td>
</tr>
</tbody></table>
<h3 id="FROM-命令"><a href="#FROM-命令" class="headerlink" title="FROM 命令"></a>FROM 命令</h3><ul>
<li><p>基于那个镜像进行构建新的镜像,在构建时会自动从docker hub拉取base镜像 必须作为Dockerfile的第一个指令出现</p>
</li>
<li><p>语法:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span>  &lt;image&gt;</span><br><span class="line"><span class="keyword">FROM</span>  &lt;image&gt;[:&lt;tag&gt;]     使用版本不写为latest</span><br><span class="line"><span class="keyword">FROM</span>  &lt;image&gt;[@&lt;digest&gt;]  使用摘要</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="MAINTAINER-命令"><a href="#MAINTAINER-命令" class="headerlink" title="MAINTAINER  命令"></a>MAINTAINER  命令</h3><ul>
<li><p>镜像维护者的姓名和邮箱地址[废弃]</p>
</li>
<li><p>语法:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MAINTAINER</span> &lt;name&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="RUN-命令"><a href="#RUN-命令" class="headerlink" title="RUN 命令"></a>RUN 命令</h3><ul>
<li><p>RUN指令将在当前映像之上的新层中执行任何命令并提交结果。生成的提交映像将用于Dockerfile中的下一步</p>
</li>
<li><p>语法:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> &lt;<span class="built_in">command</span>&gt; (shell form, the <span class="built_in">command</span> is run <span class="keyword">in</span> a shell, <span class="built_in">which</span> by default is /bin/sh -c on Linux or cmd /S /C on Windows)</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>] (<span class="built_in">exec</span> form)</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo hello&quot;</span>]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="EXPOSE-命令"><a href="#EXPOSE-命令" class="headerlink" title="EXPOSE 命令"></a>EXPOSE 命令</h3><ul>
<li><p>用来指定构建的镜像在运行为容器时对外暴露的端口</p>
</li>
<li><p>语法:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span>/tcp  如果没有显示指定则默认暴露都是tcp</span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span>/udp</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="CMD-命令"><a href="#CMD-命令" class="headerlink" title="CMD 命令"></a>CMD 命令</h3><ul>
<li><p>用来为启动的容器指定执行的命令,在Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</p>
</li>
<li><p>注意: <strong>Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</strong></p>
</li>
<li><p>语法:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;executable&quot;</span>,<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>] (<span class="built_in">exec</span> form, this is the preferred form)</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>] (as default parameters to ENTRYPOINT)</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">command</span> param1 param2 (shell form)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="WORKDIR-命令"><a href="#WORKDIR-命令" class="headerlink" title="WORKDIR 命令"></a>WORKDIR 命令</h3><ul>
<li><p>用来为Dockerfile中的任何RUN、CMD、ENTRYPOINT、COPY和ADD指令设置工作目录。如果WORKDIR不存在，即使它没有在任何后续Dockerfile指令中使用，它也将被创建。</p>
</li>
<li><p>语法:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /path/to/workdir</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /a</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> b</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> c</span></span><br><span class="line">`注意:<span class="keyword">WORKDIR</span><span class="bash">指令可以在Dockerfile中多次使用。如果提供了相对路径，则该路径将与先前WORKDIR指令的路径相对`</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="ENV-命令"><a href="#ENV-命令" class="headerlink" title="ENV 命令"></a>ENV 命令</h3><ul>
<li><p>用来为构建镜像设置环境变量。这个值将出现在构建阶段中所有后续指令的环境中。</p>
</li>
<li><p>语法：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="keyword">ENV</span> &lt;key&gt;=&lt;value&gt; ...</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="ADD-命令"><a href="#ADD-命令" class="headerlink" title="ADD 命令"></a>ADD 命令</h3><ul>
<li><p>用来从context上下文复制新文件、目录或远程文件url，并将它们添加到位于指定路径的映像文件系统中。</p>
</li>
<li><p>语法:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> hom* /mydir/       通配符添加多个文件</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> hom?.txt /mydir/   通配符添加</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> test.txt relativeDir/  可以指定相对路径</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> test.txt /absoluteDir/ 也可以指定绝对路径</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> url </span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="COPY-命令"><a href="#COPY-命令" class="headerlink" title="COPY 命令"></a>COPY 命令</h3><ul>
<li><p>用来将context目录中指定文件复制到镜像的指定目录中</p>
</li>
<li><p>语法:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> src dest</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> [<span class="string">&quot;&lt;src&gt;&quot;</span>,... <span class="string">&quot;&lt;dest&gt;&quot;</span>]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="VOLUME-命令"><a href="#VOLUME-命令" class="headerlink" title="VOLUME 命令"></a>VOLUME 命令</h3><ul>
<li><p>用来定义容器运行时可以挂在到宿主机的目录</p>
</li>
<li><p>语法:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;/data&quot;</span>]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="ENTRYPOINT命令"><a href="#ENTRYPOINT命令" class="headerlink" title="ENTRYPOINT命令"></a>ENTRYPOINT命令</h3><ul>
<li><p>用来指定容器启动时执行命令和CMD类似</p>
</li>
<li><p>语法:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">  [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> <span class="built_in">command</span> param1 param2</span></span><br></pre></td></tr></table></figure>

<p>ENTRYPOINT指令，往往用于设置容器启动后的<strong>第一个命令</strong>，这对一个容器来说往往是固定的。<br>CMD指令，往往用于设置容器启动的第一个命令的<strong>默认参数</strong>，这对一个容器来说可以是变化的。</p>
</li>
</ul>
<h1 id="构建Springboot项目"><a href="#构建Springboot项目" class="headerlink" title="构建Springboot项目"></a>构建Springboot项目</h1><ul>
<li>编写<code>Dockerfile</code></li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#基于jdk 8 进行构建</span></span><br><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="comment">#添加项目jar包，jar包与dockerfile在同一级目录下</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> Docker-0.0.1-SNAPSHOT.jar app.jar</span></span><br><span class="line"><span class="comment">#暴露项目运行的端口号便于服务器映射</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8888</span></span><br><span class="line"><span class="comment">#默认执行的命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>配置远程连接</li>
</ul>
<p><font color="skyblue">注意：此处选择<code>tcp socket </code>连接 , 这里会用到2375端口号，需要配置服务器开放2375端口号进行(一个是在宝塔页面设置开放，一个是在服务器安全组设置开放) ，还需要进行其它相关设置请继续往下阅读, 马赛克的位置是服务器ip地址</font></p>
<img src="/2021/07/27/Docker%EF%BC%88%E4%B8%89%EF%BC%89/3.png" class>

<p><font color="red">重要配置:</font></p>
<p>还需要在这个文件中:</p>
<p><code>/lib/systemd/system/docker.service</code></p>
<img src="/2021/07/27/Docker%EF%BC%88%E4%B8%89%EF%BC%89/7.png" class>

<p>进入文件后按 <code>i </code>进入 <code>insert </code>模式，然后改为上面的红色语句</p>
<p>即 <code>ExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375</code></p>
<p>如果你的服务器是<code>centos7 </code>及以上，就改为：</p>
<p><code>ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock</code><br>然后保存退出.</p>
<p>随后再进行如下操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通知docker服务做出的修改</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启docker</span></span><br><span class="line">service docker restart</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>配置镜像相关信息</li>
</ul>
<img src="/2021/07/27/Docker%EF%BC%88%E4%B8%89%EF%BC%89/4.png" class>

<img src="/2021/07/27/Docker%EF%BC%88%E4%B8%89%EF%BC%89/5.png" class>



<ul>
<li>发布项目</li>
</ul>
<img src="/2021/07/27/Docker%EF%BC%88%E4%B8%89%EF%BC%89/6.png" class>

]]></content>
      <categories>
        <category>虚拟化容器</category>
      </categories>
      <tags>
        <tag>虚拟化容器</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker(一):虚拟化容器技术</title>
    <url>/2021/07/24/Docker%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>前言：曾经尝试过使用Vmware来学习Linux，尝试当做服务器，之后便开始搭环境，一套整下来，确实麻烦，而且还吃自己电脑的资源，电脑不出所料的发生了一些微小的变化hhhh，直到后来我的Vmware出了点小问题，怎么调都调不好，调好了又得重新配环境，心态崩了，遂放弃，转头就在腾讯云买了一台服务器玩.当然了，也部署过一些服务，emmm，版本问题我始终调不好，要下载一堆东西，后来才发现了docker这个好东西</p>
</blockquote>
<ul>
<li>官方文档地址:<a href="https://www.docker.com/get-started">https://www.docker.com/get-started</a></li>
<li>中文参考手册:<a href="https://docker_practice.gitee.io/zh-cn/">https://docker_practice.gitee.io/zh-cn/</a></li>
</ul>
<hr>
<h1 id="😏什么是Dcoker"><a href="#😏什么是Dcoker" class="headerlink" title="😏什么是Dcoker"></a>😏什么是Dcoker</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.官方介绍</span></span><br><span class="line"><span class="bullet">-</span> We have a complete container solution for you - no matter who you are and where you are on your containerization journey.</span><br><span class="line"><span class="bullet">-</span> 翻译: 我们为你提供了一个完整的容器解决方案,不管你是谁,不管你在哪,你都可以开始容器的的旅程。</span><br><span class="line"><span class="bullet">-</span> 官方定义: docker是一个容器技术。</span><br></pre></td></tr></table></figure>

<h2 id="😮Docker的起源"><a href="#😮Docker的起源" class="headerlink" title="😮Docker的起源"></a>😮Docker的起源</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Docker 最初是 dotCloud 公司创始人 Solomon Hykes 在法国期间发起的一个公司内部项目，它是基于 dotCloud 公司多年云服务技术的一次革新，并于 2013 年 3 月以 Apache 2.0 授权协议开源，主要项目代码在 GitHub 上进行维护。Docker 项目后来还加入了 Linux 基金会，并成立推动 开放容器联盟（OCI）。</span><br><span class="line"></span><br><span class="line">Docker 自开源后受到广泛的关注和讨论，至今其 GitHub 项目 已经超过 5 万 7 千个星标和一万多个 fork。甚至由于 Docker 项目的火爆，在 2013 年底，dotCloud 公司决定改名为 Docker。Docker 最初是在 Ubuntu 12.04 上开发实现的；Red Hat 则从 RHEL 6.5 开始对 Docker 进行支持；Google 也在其 PaaS 产品中广泛应用 Docker。</span><br><span class="line"></span><br><span class="line">Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 OverlayFS 类的 Union FS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</span><br></pre></td></tr></table></figure>

<h2 id="😲为什么是Docker"><a href="#😲为什么是Docker" class="headerlink" title="😲为什么是Docker"></a>😲为什么是Docker</h2><ul>
<li><p><code>在开发的时候，在本机测试环境可以跑，生产环境跑不起来</code></p>
<p>这里我们拿java Web应用程序举例，我们一个java Web应用程序涉及很多东西，比如jdk、tomcat、mysql等软件环境。当这些其中某一项版本不一致的时候，可能就会导致应用程序跑不起来这种情况。Docker则将程序以及使用软件环境直接打包在一起，无论在那个机器上保证了环境一致。</p>
<p><strong>优势1:  一致的运行环境,更轻松的迁移</strong></p>
</li>
<li><p><code>服务器自己的程序挂了，结果发现是别人程序出了问题把内存吃完了，自己程序因为内存不够就挂了</code></p>
<p>这种也是一种比较常见的情况，如果你的程序重要性不是特别高的话，公司基本上不可能让你的程序独享一台服务器的，这时候你的服务器就会跟公司其他人的程序共享一台服务器，所以不可避免地就会受到其他程序的干扰，导致自己的程序出现问题。Docker就很好解决了环境隔离的问题，别人程序不会影响到自己的程序。</p>
<p><strong>优势2：对进程进行封装隔离,容器与容器之间互不影响,更高效的利用系统资源</strong></p>
</li>
<li><p><code>公司要弄一个活动，可能会有大量的流量进来，公司需要再多部署几十台服务器</code></p>
<p>在没有Docker的情况下，要在几天内部署几十台服务器，这对运维来说是一件非常折磨人的事，而且每台服务器的环境还不一定一样，就会出现各种问题，最后部署地头皮发麻。用Docker的话，我只需要将程序打包到镜像，你要多少台服务，我就给力跑多少容器，极大地提高了部署效率。</p>
<p><strong>优势3: 通过镜像复制N多个环境一致容器</strong></p>
</li>
</ul>
<hr>
<h1 id="😉Docker和虚拟机区别"><a href="#😉Docker和虚拟机区别" class="headerlink" title="😉Docker和虚拟机区别"></a>😉Docker和虚拟机区别</h1><blockquote>
<p>关于Docker与虚拟机的区别，我在网上找到的一张图，非常直观形象地展示出来，话不多说，直接上图。</p>
</blockquote>
<img src="/2021/07/24/Docker%EF%BC%88%E4%B8%80%EF%BC%89/1.png" class>

<p><code>比较上面两张图，我们发现虚拟机是携带操作系统，本身很小的应用程序却因为携带了操作系统而变得非常大，很笨重</code>。Docker是不携带操作系统的，所以Docker的应用就非常的轻巧。另外在调用宿主机的CPU、磁盘等等这些资源的时候，拿内存举例，虚拟机是利用Hypervisor去虚拟化内存，整个调用过程是虚拟内存-&gt;虚拟物理内存-&gt;真正物理内存，但是Docker是利用Docker Engine去调用宿主的的资源，这时候过程是虚拟内存-&gt;真正物理内存。</p>
<table>
<thead>
<tr>
<th></th>
<th>传统虚拟机</th>
<th>Docker容器</th>
</tr>
</thead>
<tbody><tr>
<td>磁盘占用</td>
<td>几个GB到几十个GB左右</td>
<td>几十MB到几百MB左右</td>
</tr>
<tr>
<td>CPU内存占用</td>
<td>虚拟操作系统非常占用CPU和内存</td>
<td>Docker引擎占用极低</td>
</tr>
<tr>
<td>启动速度</td>
<td>（从开机到运行项目）几分钟</td>
<td>（从开启容器到运行项目）几秒</td>
</tr>
<tr>
<td>安装管理</td>
<td>需要专门的运维技术</td>
<td>安装、管理方便</td>
</tr>
<tr>
<td>应用部署</td>
<td>每次部署都费时费力</td>
<td>从第二次部署开始轻松简捷</td>
</tr>
<tr>
<td>耦合性</td>
<td>多个应用服务安装到一起，容易互相影响</td>
<td>每个应用服务一个容器，达成隔离</td>
</tr>
<tr>
<td>系统依赖</td>
<td>无</td>
<td>需求相同或相似的内核，目前推荐是Linux</td>
</tr>
</tbody></table>
<h1 id="😁Docker安装-Linux"><a href="#😁Docker安装-Linux" class="headerlink" title="😁Docker安装(Linux)"></a>😁Docker安装(Linux)</h1><ul>
<li><p>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，CentOS 系统上可以使用这套脚本安装，另外可以通过 <code>--mirror</code> 选项使用国内源进行安装：执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker 的稳定(stable)版本安装在系统中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure></li>
<li><p>启动docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">$ sudo systemctl start docker</span><br></pre></td></tr></table></figure></li>
<li><p>创建docker用户组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br></pre></td></tr></table></figure></li>
<li><p>将当前用户加入docker组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line"><span class="comment">#重启docker</span></span><br><span class="line">$ systemctl restart docker</span><br></pre></td></tr></table></figure></li>
<li><p>测试docker安装是否正确</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run hello-world</span><br></pre></td></tr></table></figure></li>
<li><p>出现如下内容，即成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker run hello-world</span></span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>虚拟化容器</category>
      </categories>
      <tags>
        <tag>虚拟化容器</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker(二):常用命令以及高级配置</title>
    <url>/2021/07/25/Docker%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Docker阿里云加速服务"><a href="#Docker阿里云加速服务" class="headerlink" title="Docker阿里云加速服务"></a>Docker阿里云加速服务</h1><ul>
<li><p>注册阿里云开发者账号</p>
</li>
<li><p>在控制台中搜索容器镜像服务</p>
</li>
<li><p>镜像工具—&gt;镜像加速器 —&gt; 选择对应系统 </p>
</li>
<li><p>执行命名即可</p>
</li>
<li><p><code>docker info</code> 查看是否设置镜像成功</p>
</li>
</ul>
<h1 id="常用镜像命令"><a href="#常用镜像命令" class="headerlink" title="常用镜像命令"></a>常用镜像命令</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 下载</span></span><br><span class="line"><span class="bullet">1.</span> docker pull 镜像名</span><br><span class="line"><span class="bullet">2.</span> docker pull 镜像名:tag</span><br><span class="line"><span class="bullet">3.</span> docker pull 镜像名:@DIGEST</span><br><span class="line"></span><br><span class="line"><span class="section"># 搜索</span></span><br><span class="line"><span class="bullet">1.</span> docker search 镜像名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section"># 删除</span></span><br><span class="line"><span class="bullet">1.</span> docker image rm 镜像名:tag</span><br><span class="line"><span class="bullet">2.</span> docker rmi 镜像名:tag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="常用容器命令"><a href="#常用容器命令" class="headerlink" title="常用容器命令"></a>常用容器命令</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.运行容器</span></span><br><span class="line"><span class="code">	docker run 镜像名	--------------------------	镜像名新建并启动容器</span></span><br><span class="line"><span class="code">    --name 					别名为容器起一个名字</span></span><br><span class="line"><span class="code">    -d							启动守护式容器（在后台启动容器）</span></span><br><span class="line"><span class="code">    -p 							映射端口号：原始端口号		 指定端口号启动</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">	例：docker run -it --name myTomcat -p 8888:8080 tomcat</span></span><br><span class="line"><span class="code">   	 docker run -d --name myTomcat -P tomcat</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 2.查看运行的容器</span></span><br><span class="line"><span class="code">	docker ps					--------------------------	列出所有正在运行的容器</span></span><br><span class="line"><span class="code">	-a			正在运行的和历史运行过的容器</span></span><br><span class="line"><span class="code">	-q			静默模式，只显示容器编号</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 3.停止|关闭|重启容器</span></span><br><span class="line"><span class="code">	docker start   容器名字或者容器id  --------------- 开启容器</span></span><br><span class="line"><span class="code">	docker restart 容器名或者容器id    --------------- 重启容器</span></span><br><span class="line"><span class="code">	docker stop  容器名或者容器id 	    ------------------ 正常停止容器运行</span></span><br><span class="line"><span class="code">	docker kill  容器名或者容器id      ------------------ 立即停止容器运行</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 4.删除容器</span></span><br><span class="line"><span class="code">	docker rm -f 容器id和容器名     </span></span><br><span class="line"><span class="code">	docker rm -f $(docker ps -aq)		--------------------------	删除所有容器</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 5.查看容器内进程</span></span><br><span class="line"><span class="code">	docker top 容器id或者容器名 ------------------ 查看容器内的进程</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 6.查看查看容器内部细节</span></span><br><span class="line"><span class="code">	docker inspect 容器id 		------------------ 查看容器内部细节</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 7.查看容器的运行日志</span></span><br><span class="line"><span class="code">	docker logs [OPTIONS] 容器id或容器名	------------------ 查看容器日志</span></span><br><span class="line"><span class="code">    -t			 加入时间戳</span></span><br><span class="line"><span class="code">    -f			 跟随最新的日志打印</span></span><br><span class="line"><span class="code">    --tail 	 数字	显示最后多少条</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 8.进入容器内部</span></span><br><span class="line"><span class="code">	docker exec [options] 容器id 容器内命令 ------------------ 进入容器执行命令</span></span><br><span class="line"><span class="code">		-i		以交互模式运行容器，通常与-t一起使用</span></span><br><span class="line"><span class="code">    	-t		分配一个伪终端    shell窗口   bash </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 9.容器和宿主机之间复制文件</span></span><br><span class="line"><span class="code">	docker cp 文件|目录 容器id:容器路径           -----------------   将宿主机复制到容器内部</span></span><br><span class="line"><span class="code">	docker cp 容器id:容器内资源路径 宿主机目录路径  -----------------   将容器内资源拷贝到主机上</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 10.数据卷(volum)实现与宿主机共享目录</span></span><br><span class="line"><span class="code">	docker run -v 宿主机的路径|任意别名:/容器内的路径 镜像名</span></span><br><span class="line"><span class="code">		注意: </span></span><br><span class="line"><span class="code">				1.如果是宿主机路径必须是绝对路径,宿主机目录会覆盖容器内目录内容</span></span><br><span class="line"><span class="code">				2.如果是别名则会在docker运行容器时自动在宿主机中创建一个目录,并将容器目录文件复制到宿主机中</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 11.打包镜像</span></span><br><span class="line"><span class="code">		docker save 镜像名 -o  名称.tar</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 12.载入镜像</span></span><br><span class="line"><span class="code">		docker load -i   名称.tar</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 13.容器打包成新的镜像</span></span><br><span class="line"><span class="code">	  docker commit -m &quot;描述信息&quot; -a &quot;作者信息&quot;   （容器id或者名称）打包的镜像名称:标签</span></span><br></pre></td></tr></table></figure>

<h1 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h1><img src="/2021/07/25/Docker%EF%BC%88%E4%BA%8C%EF%BC%89/1.png" class>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>当 Docker 启动时，会自动在主机上创建一个 <code>docker0</code> 虚拟网桥，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。</p>
<p>同时，Docker 随机分配一个本地未占用的私有网段（在 <a href="https://tools.ietf.org/html/rfc1918">RFC1918</a> 中定义）中的一个地址给 <code>docker0</code> 接口。比如典型的 <code>172.17.42.1</code>，掩码为 <code>255.255.0.0</code>。此后启动的容器内的网口也会自动分配一个同一网段（<code>172.17.0.0/16</code>）的地址。</p>
<p>当创建一个 Docker 容器的时候，同时会创建了一对 <code>veth pair</code> 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即 <code>eth0</code>；另一端在本地并被挂载到 <code>docker0</code> 网桥，名称以 <code>veth</code> 开头（例如 <code>vethAQI2QT</code>）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。</p>
<img src="/2021/07/25/Docker%EF%BC%88%E4%BA%8C%EF%BC%89/2.png" class>

<h2 id="查看网络信息"><a href="#查看网络信息" class="headerlink" title="查看网络信息"></a>查看网络信息</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># docker network ls</span></span><br></pre></td></tr></table></figure>

<h2 id="创建一个网桥"><a href="#创建一个网桥" class="headerlink" title="创建一个网桥"></a>创建一个网桥</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># docker network create -d bridge 网桥名称</span></span><br></pre></td></tr></table></figure>

<h2 id="删除一个网桥"><a href="#删除一个网桥" class="headerlink" title="删除一个网桥"></a>删除一个网桥</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># docker network rm 网桥名称</span></span><br></pre></td></tr></table></figure>

<h2 id="容器之前使用网络通信"><a href="#容器之前使用网络通信" class="headerlink" title="容器之前使用网络通信"></a>容器之前使用网络通信</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.查询当前网络配置</span></span><br><span class="line"><span class="bullet">-</span> docker network ls</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">8e424e5936b7        bridge              bridge              local</span><br><span class="line">17d974db02da        docker_gwbridge     bridge              local</span><br><span class="line">d6c326e433f7        host                host                local</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.创建桥接网络</span></span><br><span class="line"><span class="bullet">-</span> docker network create -d bridge info</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos ~]# docker network create -d bridge info</span><br><span class="line">6e4aaebff79b1df43a064e0e8fdab08f52d64ce34db78dd5184ce7aaaf550a2f</span><br><span class="line">[root@centos ~]# docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">8e424e5936b7        bridge              bridge              local</span><br><span class="line">17d974db02da        docker_gwbridge     bridge              local</span><br><span class="line">d6c326e433f7        host                host                local</span><br><span class="line">6e4aaebff79b        info                bridge              local</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.启动容器指定使用网桥</span></span><br><span class="line"><span class="bullet">-</span> docker run -d -p 8890:80 --name nginx001 --network info nginx </span><br><span class="line"><span class="bullet">-</span> docker run -d -p 8891:80 --name nginx002 --network info nginx </span><br><span class="line"><span class="code">	`注意:一旦指定网桥后--name指定名字就是主机名,多个容器指定在同一个网桥时,可以在任意一个容器中使用主机名与容器进行互通`</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos ~]# docker run -d -p 8890:80 --name nginx001 --network info nginx </span><br><span class="line">c315bcc94e9ddaa36eb6c6f16ca51592b1ac8bf1ecfe9d8f01d892f3f10825fe</span><br><span class="line">[root@centos ~]# docker run -d -p 8891:80 --name nginx002 --network info nginx</span><br><span class="line">f8682db35dd7fb4395f90edb38df7cad71bbfaba71b6a4c6e2a3a525cb73c2a5</span><br><span class="line">[root@centos ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">f8682db35dd7        nginx               &quot;/docker-entrypoint.…&quot;   3 seconds ago       Up 2 seconds        0.0.0.0:8891-&gt;80/tcp   nginx002</span><br><span class="line">c315bcc94e9d        nginx               &quot;/docker-entrypoint.…&quot;   7 minutes ago       Up 7 minutes        0.0.0.0:8890-&gt;80/tcp   nginx001</span><br><span class="line">b63169d43792        mysql:5.7.19        &quot;docker-entrypoint.s…&quot;   7 minutes ago       Up 7 minutes        3306/tcp               mysql_mysql.1.s75qe5kkpwwttyf0wrjvd2cda</span><br><span class="line">[root@centos ~]# docker exec -it f8682db35dd7 /bin/bash</span><br><span class="line">root@f8682db35dd7:/# curl http://nginx001</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>

<h1 id="高级数据卷配置"><a href="#高级数据卷配置" class="headerlink" title="高级数据卷配置"></a>高级数据卷配置</h1><h2 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h2><p><code>数据卷</code> 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p>
<ul>
<li><code>数据卷</code> 可以在容器之间共享和重用</li>
<li>对 <code>数据卷</code> 的修改会立马生效</li>
<li>对 <code>数据卷</code> 的更新，不会影响镜像</li>
<li><code>数据卷</code> 默认会一直存在，即使容器被删除</li>
</ul>
<blockquote>
<p>注意：<code>数据卷</code> 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）。</p>
</blockquote>
<h2 id="创建数据卷"><a href="#创建数据卷" class="headerlink" title="创建数据卷"></a>创建数据卷</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos ~]# docker volume create my-vol</span><br><span class="line">my-vol</span><br></pre></td></tr></table></figure>

<h2 id="查看数据卷"><a href="#查看数据卷" class="headerlink" title="查看数据卷"></a>查看数据卷</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos ~]# docker volume inspect my-vol       </span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2020-11-25T11:43:56+08:00&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/my-vol/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;my-vol&quot;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="挂载数据卷"><a href="#挂载数据卷" class="headerlink" title="挂载数据卷"></a>挂载数据卷</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@centos ~]# docker run -d -P --name web  -v my-vol:/usr/share/nginx/html  nginx</span><br><span class="line">[root@centos ~]# docker inspect web</span><br><span class="line">				&quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;my-vol&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/my-vol/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;/usr/share/nginx/html&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;z&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br></pre></td></tr></table></figure>

<h2 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker volume rm my-vol</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>虚拟化容器</category>
      </categories>
      <tags>
        <tag>虚拟化容器</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker(四):Docker-compose的使用</title>
    <url>/2021/07/28/Docker%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Compose</code> 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。从功能上看，跟 <code>OpenStack</code> 中的 <code>Heat</code> 十分类似。</p>
<p>其代码目前在 <a href="https://github.com/docker/compose">https://github.com/docker/compose</a> 上开源。</p>
<p><code>Compose</code> 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）」，其前身是开源项目 Fig。</p>
<p>通过前面的介绍，我们知道使用一个 <code>Dockerfile</code> 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。</p>
<p><code>Compose</code> 恰好满足了这样的需求。它允许用户通过一个单独的 <code>docker-compose.yml</code> 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p>
<p><code>Compose</code> 中有两个重要的概念：</p>
<ul>
<li>服务 (<code>service</code>)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li>
<li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元，在 <code>docker-compose.yml</code> 文件中定义。</li>
</ul>
<p><code>Compose</code> 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p>
<p><code>Compose</code> 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 <code>Compose</code> 来进行编排管理。</p>
<h2 id="安装与卸载"><a href="#安装与卸载" class="headerlink" title="安装与卸载"></a>安装与卸载</h2><h3 id="1-linux"><a href="#1-linux" class="headerlink" title="1.linux"></a>1.linux</h3><p>注意：<strong>下载需要过慢需要换下载地址，</strong></p>
<ul>
<li>在 Linux 上的也安装十分简单，从 官方 GitHub Release 处直接下载编译好的二进制文件即可。例如，在 Linux 64 位系统上直接下载对应的二进制包。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo curl -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用以下链接来下载，速度较快</span></span><br><span class="line">$ sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-macos、window"><a href="#2-macos、window" class="headerlink" title="2.macos、window"></a>2.macos、window</h3><ul>
<li>Compose 可以通过 Python 的包管理工具 pip 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行。<code>Docker Desktop for Mac/Windows 自带 docker-compose 二进制文件，安装 Docker 之后可以直接使用</code>。</li>
</ul>
<h3 id="3-bash命令补全"><a href="#3-bash命令补全" class="headerlink" title="3.bash命令补全"></a>3.bash命令补全</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl -L https://raw.githubusercontent.com/docker/compose/1.25.5/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span></span><br></pre></td></tr></table></figure>

<h3 id="4-卸载"><a href="#4-卸载" class="headerlink" title="4.卸载"></a>4.卸载</h3><ul>
<li>如果是二进制包方式安装的，删除二进制文件即可。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo rm /usr/<span class="built_in">local</span>/bin/docker-compose</span></span><br></pre></td></tr></table></figure>

<h3 id="5-测试安装成功"><a href="#5-测试安装成功" class="headerlink" title="5.测试安装成功"></a>5.测试安装成功</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker-compose --version</span></span><br><span class="line"> docker-compose version 1.25.5, build 4667896b</span><br></pre></td></tr></table></figure>

<h2 id="docker-compose使用"><a href="#docker-compose使用" class="headerlink" title="docker compose使用"></a>docker compose使用</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.相关概念</span></span><br></pre></td></tr></table></figure>

<p>首先介绍几个术语。</p>
<ul>
<li>服务 (<code>service</code>)：一个应用容器，实际上可以运行多个相同镜像的实例。</li>
<li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元。∂一个项目可以由多个服务（容器）关联而成，<code>Compose</code> 面向项目进行管理。</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.场景</span></span><br></pre></td></tr></table></figure>

<p>最常见的项目是 web 网站，该项目应该包含 web 应用和缓存。</p>
<ul>
<li>springboot应用</li>
<li>mysql服务</li>
<li>redis服务</li>
<li>elasticsearch服务</li>
<li>…….</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.docker-compose模板</span></span><br><span class="line"><span class="bullet">-</span> 参考文档:https://docker<span class="emphasis">_practice.gitee.io/zh-cn/compose/compose_</span>file.html</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.0&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysqldb:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7.19</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/mysql/conf:/etc/mysql/conf.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/mysql/logs:/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/mysql/data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ems</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:4.0.14</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ems</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/redis/data:/data</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">ems:</span></span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 4.通过docker-compose运行一组容器</span></span><br><span class="line"><span class="bullet">-</span> 参考文档:https://docker<span class="emphasis">_practice.gitee.io/zh-cn/compose/commands.html</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos ~]<span class="comment"># docker-compose up    							//前台启动一组服务</span></span><br><span class="line">[root@centos ~]<span class="comment"># docker-compose up -d 							//后台启动一组服务</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="docker-compose-模板文件"><a href="#docker-compose-模板文件" class="headerlink" title="docker-compose 模板文件"></a>docker-compose 模板文件</h2><p>模板文件是使用 <code>Compose</code> 的核心，涉及到的指令关键字也比较多。但大家不用担心，这里面大部分指令跟 <code>docker run</code> 相关参数的含义都是类似的。</p>
<p>默认的模板文件名称为 <code>docker-compose.yml</code>，格式为 YAML 格式。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">examples/web</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/data&quot;</span></span><br></pre></td></tr></table></figure>

<p>注意每个服务都必须通过 <code>image</code> 指令指定镜像或 <code>build</code> 指令（需要 Dockerfile）等来自动构建生成镜像。</p>
<p>如果使用 <code>build</code> 指令，在 <code>Dockerfile</code> 中设置的选项(例如：<code>CMD</code>, <code>EXPOSE</code>, <code>VOLUME</code>, <code>ENV</code> 等) 将会自动被获取，无需在 <code>docker-compose.yml</code> 中重复设置。</p>
<p>下面分别介绍各个指令的用法。</p>
<h3 id="build"><a href="#build" class="headerlink" title="build"></a><code>build</code></h3><p>指定 <code>Dockerfile</code> 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 <code>Compose</code> 将会利用它自动构建这个镜像，然后使用这个镜像。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./dir</span></span><br></pre></td></tr></table></figure>

<p>你也可以使用 <code>context</code> 指令指定 <code>Dockerfile</code> 所在文件夹的路径。</p>
<p>使用 <code>dockerfile</code> 指令指定 <code>Dockerfile</code> 文件名。</p>
<p>使用 <code>arg</code> 指令指定构建镜像时的变量。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./dir</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile-alternate</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">buildno:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="command"><a href="#command" class="headerlink" title="command"></a><code>command</code></h3><p>覆盖容器启动后默认执行的命令。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">command:</span> <span class="string">echo</span> <span class="string">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a><code>container_name</code></h3><p>指定容器名称。默认将会使用 <code>项目名称_服务名称_序号</code> 这样的格式。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">container_name:</span> <span class="string">docker-web-container</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意: 指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允许多个容器具有相同的名称。</p>
</blockquote>
<h3 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a><code>depends_on</code></h3><p>解决容器的依赖、启动先后的问题。以下例子中会先启动 <code>redis</code> <code>db</code> 再启动 <code>web</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<code>web</code> 服务不会等待 <code>redis</code> <code>db</code> 「完全启动」之后才启动。</p>
</blockquote>
<h3 id="env-file"><a href="#env-file" class="headerlink" title="env_file"></a><code>env_file</code></h3><p>从文件中获取环境变量，可以为单独的文件路径或列表。</p>
<p>如果通过 <code>docker-compose -f FILE</code> 方式来指定 Compose 模板文件，则 <code>env_file</code> 中变量的路径会基于模板文件路径。</p>
<p>如果有变量名称与 <code>environment</code> 指令冲突，则按照惯例，以后者为准。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">env_file: .env</span><br><span class="line"></span><br><span class="line">env_file:</span><br><span class="line">  - ./common.env</span><br><span class="line">  - ./apps/web.env</span><br><span class="line">  - /opt/secrets.env</span><br></pre></td></tr></table></figure>

<p>环境变量文件中每一行必须符合格式，支持 <code>#</code> 开头的注释行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># common.env: Set development environment</span></span><br><span class="line">PROG_ENV=development</span><br></pre></td></tr></table></figure>

<h3 id="environment"><a href="#environment" class="headerlink" title="environment"></a><code>environment</code></h3><p>设置环境变量。你可以使用数组或字典两种格式。</p>
<p>只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">RACK_ENV:</span> <span class="string">development</span></span><br><span class="line">  <span class="attr">SESSION_SECRET:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RACK_ENV=development</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SESSION_SECRET</span></span><br></pre></td></tr></table></figure>

<p>如果变量名称或者值中用到 <code>true|false，yes|no</code> 等表达 <a href="https://yaml.org/type/bool.html">布尔</a> 含义的词汇，最好放到引号里，避免 YAML 自动解析某些内容为对应的布尔语义。这些特定词汇，包括</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">y|Y|yes|Yes|YES|n|N|no|No|NO|<span class="literal">true</span>|True|TRUE|<span class="literal">false</span>|False|FALSE|on|On|ON|off|Off|OFF</span><br></pre></td></tr></table></figure>

<h3 id="healthcheck"><a href="#healthcheck" class="headerlink" title="healthcheck"></a><code>healthcheck</code></h3><p>通过命令检查容器是否健康运行。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">healthcheck:</span></span><br><span class="line">  <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost&quot;</span>]</span><br><span class="line">  <span class="attr">interval:</span> <span class="string">1m30s</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">retries:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="image"><a href="#image" class="headerlink" title="image"></a><code>image</code></h3><p>指定为镜像名称或镜像 ID。如果镜像在本地不存在，<code>Compose</code> 将会尝试拉取这个镜像。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">ubuntu</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">orchardup/postgresql</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">a4bc65fd</span></span><br></pre></td></tr></table></figure>

<h3 id="networks"><a href="#networks" class="headerlink" title="networks"></a><code>networks</code></h3><p>配置容器连接的网络。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">some-service:</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">some-network</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">other-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">some-network:</span></span><br><span class="line">  <span class="attr">other-network:</span></span><br></pre></td></tr></table></figure>

<h3 id="ports"><a href="#ports" class="headerlink" title="ports"></a><code>ports</code></h3><p>暴露端口信息。</p>
<p>使用宿主端口：容器端口 <code>(HOST:CONTAINER)</code> 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;49100:22&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:8001:8001&quot;</span></span><br></pre></td></tr></table></figure>

<p><em>注意：当使用 <code>HOST:CONTAINER</code> 格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为 <code>YAML</code> 会自动解析 <code>xx:yy</code> 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。</em></p>
<h3 id="sysctls"><a href="#sysctls" class="headerlink" title="sysctls"></a><code>sysctls</code></h3><p>配置容器内核参数。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sysctls:</span></span><br><span class="line">  <span class="attr">net.core.somaxconn:</span> <span class="number">1024</span></span><br><span class="line">  <span class="attr">net.ipv4.tcp_syncookies:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sysctls:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">net.core.somaxconn=1024</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">net.ipv4.tcp_syncookies=0</span></span><br></pre></td></tr></table></figure>

<h3 id="ulimits"><a href="#ulimits" class="headerlink" title="ulimits"></a><code>ulimits</code></h3><p>指定容器的 ulimits 限制值。</p>
<p>例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ulimits:</span></span><br><span class="line">  <span class="attr">nproc:</span> <span class="number">65535</span></span><br><span class="line">  <span class="attr">nofile:</span></span><br><span class="line">    <span class="attr">soft:</span> <span class="number">20000</span></span><br><span class="line">    <span class="attr">hard:</span> <span class="number">40000</span></span><br></pre></td></tr></table></figure>

<h3 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a><code>volumes</code></h3><p>数据卷所挂载路径设置。可以设置为宿主机路径(<code>HOST:CONTAINER</code>)或者数据卷名称(<code>VOLUME:CONTAINER</code>)，并且可以设置访问模式 （<code>HOST:CONTAINER:ro</code>）。</p>
<p>该指令中路径支持相对路径。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">/var/lib/mysql</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cache/:/tmp/cache</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">~/configs:/etc/configs/:ro</span></span><br></pre></td></tr></table></figure>

<p>如果路径为数据卷名称，必须在文件中配置数据卷。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">my_src:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_data:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mysql_data:</span></span><br></pre></td></tr></table></figure>

<h2 id="完整模板"><a href="#完整模板" class="headerlink" title="完整模板"></a>完整模板</h2><img src="/2021/07/28/Docker%EF%BC%88%E5%9B%9B%EF%BC%89/2.png" class>

<h2 id="docker-compose-常用命令"><a href="#docker-compose-常用命令" class="headerlink" title="docker-compose 常用命令"></a>docker-compose 常用命令</h2><h3 id="1-命令对象与格式"><a href="#1-命令对象与格式" class="headerlink" title="1. 命令对象与格式"></a>1. 命令对象与格式</h3><p>对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。</p>
<p>执行 <code>docker-compose [COMMAND] --help</code> 或者 <code>docker-compose help [COMMAND]</code> 可以查看具体某个命令的使用格式。</p>
<p><code>docker-compose</code> 命令的基本的使用格式是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose [-f=&lt;arg&gt;...] [options] [COMMAND] [ARGS...]</span><br></pre></td></tr></table></figure>

<h3 id="2-命令选项"><a href="#2-命令选项" class="headerlink" title="2. 命令选项"></a>2. 命令选项</h3><ul>
<li><code>-f, --file FILE</code> 指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定。</li>
<li><code>-p, --project-name NAME</code> 指定项目名称，默认将使用所在目录名称作为项目名。</li>
<li><code>--x-networking</code> 使用 Docker 的可拔插网络后端特性</li>
<li><code>--x-network-driver DRIVER</code> 指定网络后端的驱动，默认为 <code>bridge</code></li>
<li><code>--verbose</code> 输出更多调试信息。</li>
<li><code>-v, --version</code> 打印版本并退出。</li>
</ul>
<h3 id="3-命令使用说明"><a href="#3-命令使用说明" class="headerlink" title="3.命令使用说明"></a>3.命令使用说明</h3><h4 id="up"><a href="#up" class="headerlink" title="up"></a><code>up</code></h4><p>格式为 <code>docker-compose up [options] [SERVICE...]</code>。</p>
<ul>
<li><p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。</p>
</li>
<li><p>链接的服务都将会被自动启动，除非已经处于运行状态。</p>
</li>
<li><p>可以说，大部分时候都可以直接通过该命令来启动一个项目。</p>
</li>
<li><p>默认情况，<code>docker-compose up</code> 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。</p>
</li>
<li><p>当通过 <code>Ctrl-C</code> 停止命令时，所有容器将会停止。</p>
</li>
<li><p>如果使用 <code>docker-compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p>
</li>
<li><p>默认情况，如果服务容器已经存在，<code>docker-compose up</code> 将会尝试停止容器，然后重新创建（保持使用 <code>volumes-from</code> 挂载的卷），以保证新启动的服务匹配 <code>docker-compose.yml</code> 文件的最新内容</p>
</li>
</ul>
<hr>
<h4 id="down"><a href="#down" class="headerlink" title="down"></a><code>down</code></h4><ul>
<li>此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络</li>
</ul>
<hr>
<h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a><code>exec</code></h4><ul>
<li>进入指定的容器。</li>
</ul>
<hr>
<h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a><code>ps</code></h4><p>格式为 <code>docker-compose ps [options] [SERVICE...]</code>。</p>
<p>列出项目中目前的所有容器。</p>
<p>选项：</p>
<ul>
<li><code>-q</code> 只打印容器的 ID 信息。</li>
</ul>
<hr>
<h4 id="restart"><a href="#restart" class="headerlink" title="restart"></a><code>restart</code></h4><p>格式为 <code>docker-compose restart [options] [SERVICE...]</code>。</p>
<p>重启项目中的服务。</p>
<p>选项：</p>
<ul>
<li><code>-t, --timeout TIMEOUT</code> 指定重启前停止容器的超时（默认为 10 秒）。</li>
</ul>
<hr>
<h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h4><p>格式为 <code>docker-compose rm [options] [SERVICE...]</code>。</p>
<p>删除所有（停止状态的）服务容器。推荐先执行 <code>docker-compose stop</code> 命令来停止容器。</p>
<p>选项：</p>
<ul>
<li><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</li>
<li><code>-v</code> 删除容器所挂载的数据卷。</li>
</ul>
<hr>
<h4 id="start"><a href="#start" class="headerlink" title="start"></a><code>start</code></h4><p>格式为 <code>docker-compose start [SERVICE...]</code>。</p>
<p>启动已经存在的服务容器。</p>
<hr>
<h4 id="stop"><a href="#stop" class="headerlink" title="stop"></a><code>stop</code></h4><p>格式为 <code>docker-compose stop [options] [SERVICE...]</code>。</p>
<p>停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</p>
<p>选项：</p>
<ul>
<li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li>
</ul>
<hr>
<h4 id="top"><a href="#top" class="headerlink" title="top"></a><code>top</code></h4><p>查看各个服务容器内运行的进程。</p>
<hr>
<h4 id="unpause"><a href="#unpause" class="headerlink" title="unpause"></a><code>unpause</code></h4><p>格式为 <code>docker-compose unpause [SERVICE...]</code>。</p>
<p>恢复处于暂停状态中的服务。</p>
<h1 id="docker可视化工具"><a href="#docker可视化工具" class="headerlink" title="docker可视化工具"></a>docker可视化工具</h1><h2 id="安装Portainer"><a href="#安装Portainer" class="headerlink" title="安装Portainer"></a>安装Portainer</h2><p>官方安装说明：<a href="http://www.yunweipai.com/go?_=8fe4813824aHR0cHM6Ly93d3cucG9ydGFpbmVyLmlvL2luc3RhbGxhdGlvbi8=">https://www.portainer.io/installation/</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ubuntu1804 ~]#docker pull  portainer/portainer</span><br><span class="line"></span><br><span class="line">[root@ubuntu1804 ~]#docker volume create portainer_data</span><br><span class="line">portainer_data</span><br><span class="line">[root@ubuntu1804 ~]#docker run -d -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br><span class="line">20db26b67b791648c2ef6aee444a5226a9c897ebcf0160050e722dbf4a4906e3</span><br><span class="line">[root@ubuntu1804 ~]#docker ps </span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND             CREATED             STATUS              PORTS                                            NAMES</span><br><span class="line">20db26b67b79        portainer/portainer   &quot;/portainer&quot;        5 seconds ago       Up 4 seconds        0.0.0.0:8000-&gt;8000/tcp, 0.0.0.0:9000-&gt;9000/tcp   portainer</span><br></pre></td></tr></table></figure>

<h2 id="登录和使用Portainer"><a href="#登录和使用Portainer" class="headerlink" title="登录和使用Portainer"></a>登录和使用Portainer</h2><blockquote>
<p>用浏览器访问：<code>http://localhost:9000</code></p>
</blockquote>
<img src="/2021/07/28/Docker%EF%BC%88%E5%9B%9B%EF%BC%89/1.png" class>

]]></content>
      <categories>
        <category>虚拟化容器</category>
      </categories>
      <tags>
        <tag>虚拟化容器</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Dubbo(一):核心概念与基础配置</title>
    <url>/2021/07/22/Dubbo%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>注：内容大部分都参考于 <a href="https://dubbo.apache.org/zh/docs/">Dubbo官方中文文档</a></p>
<h1 id="🤯为何需要RPC"><a href="#🤯为何需要RPC" class="headerlink" title="🤯为何需要RPC"></a>🤯为何需要RPC</h1><img src="/2021/07/22/Dubbo%EF%BC%88%E4%B8%80%EF%BC%89/1.png" class>

<p>R P C  (Remote Procedure Call，中文意思就是远程过程调用)</p>
<p>如上图 ， 是 <code>web</code> 开发的发展历史，曾经的 <code>all in one </code> 应用开发，所有服务都放在一个应用中（包括前端），当服务量进一步增大时，应用的体积也会变得巨大，此时要想维护这个应用是十分费力的，并且这种开发模式导致整个应用导致多人开发极其不便，调试十分困难，于是出现了 <code>MVC 前后端分离</code>架构，对应用进行分层开发，来降低开发者工作量提升可维护性，前后端分离开发 ，前后端可以独自开发，可以在一定程度上提升开发进度，然而问题又随之而来，基于分离开发的模式，后端系统可能是有多个人一起开发的，如果应用A需要应用B的一些服务，必须自己重新实现一遍其逻辑，十分低效，这一点在大应用中尤为明显，各种数据依赖性较强，于是出现了 <code>rpc</code> 框架.其解决方案也很容易理解，就是将<strong>系统B</strong>提供的服务<strong>交由第三方进行管理</strong>，并且这个第三方还可以<strong>对外开放</strong>系统B所提供的服务，<strong>系统A</strong>则可以通过这个第三方来获取<strong>系统B</strong>的服务 ，其底层实际上是采用 <code>TCP</code>的方式进行连接的，同时，<code>rpc</code> 框架也可以实现跨语言提供服务，但是，<code>dubbo</code> 目前还不支持，只支持<code>java</code> ， 据我了解<code>thrift、motan</code> , <code>Dubbo</code>其架构如下图</p>
<img src="/2021/07/22/Dubbo%EF%BC%88%E4%B8%80%EF%BC%89/2.png" class>

<img src="/2021/07/22/Dubbo%EF%BC%88%E4%B8%80%EF%BC%89/3.png" class>



<p><strong>调用关系说明:</strong></p>
<ol>
<li><p>服务容器负责启动，加载，运⾏服务提供者。 </p>
</li>
<li><p>服务提供者在启动时，向注册中心注册自己提供的服务。 </p>
</li>
<li><p>服务消费者在启动时，向注册中⼼订阅自己所需的服务。 </p>
</li>
<li><p>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。 </p>
</li>
<li><p>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。 </p>
</li>
<li><p>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。 </p>
</li>
</ol>
<h1 id="😛Dubbo快速开始"><a href="#😛Dubbo快速开始" class="headerlink" title="😛Dubbo快速开始"></a>😛Dubbo快速开始</h1><p>这里演示基于 <code>Spring</code> 来使用 <code>Dubbo</code> ，<code>Dubbo</code> 可以 很好的接入 <code>Spring</code> 没有任何的 <code>API</code> 侵入</p>
<p>首先创建两个<code>module</code>  ，使用普通的<code>mavon</code>项目来构建，一个是 <code>dubbo_consumer</code> 服务消费者，一个是<code>dubbo_provider</code> 服务提供者</p>
<p>先导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p><font color="skyblue">首先先来写 提供者</font></p>
</blockquote>
<ul>
<li>定义服务接口及其实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">findByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findByUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">&quot;正在访问的用户为：&quot;</span>+ username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>配置<code>Dubbo</code>(在<code>Spring</code>的配置文件中进行配置) </li>
</ul>
<p><code>spring-dubbo.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--提供方应用信息 ， 用于计算依赖关系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;hello-world-app&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用multicast广播注册中心 暴露服务地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;multicast://224.5.6.7:1234&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用dubbo协议在20880端口暴露服务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20880&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明需要暴露的服务接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;com.anthony.service.UserService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userService&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--将实现类注入spring容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.anthony.service.impl.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>加载配置(本质上就是注册所暴露的或者说是提供的服务)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//读取配置</span></span><br><span class="line">        ClassPathXmlApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring-dubbo.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//进行注册</span></span><br><span class="line">        context.start();</span><br><span class="line">        System.in.read(); <span class="comment">//按任意键退出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><font color="skyblue">再来写 消费者</font></p>
</blockquote>
<ul>
<li>创建服务接口，但是不需要创建其实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">findByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>编写配置文件</li>
</ul>
<p><code>spring-dubbo.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://code.alibabatech.com/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;consumer-of-hello-world-app&quot;</span>  /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用multicast广播注册中心暴露发现服务地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;multicast://224.5.6.7:1234&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">interface</span>=<span class="string">&quot;com.anthony.service.UserService&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>开始测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//读取配置</span></span><br><span class="line">        ClassPathXmlApplicationContext Context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring-dubbo.xml&quot;</span>);</span><br><span class="line">       	<span class="comment">//订阅服务</span></span><br><span class="line">        Context.start();;</span><br><span class="line">        <span class="comment">//获取服务</span></span><br><span class="line">        UserService userService = Context.getBean(<span class="string">&quot;userService&quot;</span>,UserService.class);</span><br><span class="line">        <span class="comment">//服务调用</span></span><br><span class="line">        String hello_world = userService.findByUsername(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        System.out.println(hello_world);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="😎Dubbo配置"><a href="#😎Dubbo配置" class="headerlink" title="😎Dubbo配置"></a>😎Dubbo配置</h1><table>
<thead>
<tr>
<th>标签</th>
<th>用途</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;dubbo:service/&gt;</code></td>
<td>服务配置</td>
<td>用于暴露一个服务，定义服务的元信息，一个服务可以用多个协议暴露，一个服务也可以注册到多个注册中心</td>
</tr>
<tr>
<td><code>&lt;dubbo:reference/&gt;</code></td>
<td>引用配置</td>
<td>用于创建一个远程服务代理，一个引用可以指向多个注册中心</td>
</tr>
<tr>
<td><code>&lt;dubbo:protocol/&gt;</code></td>
<td>协议配置</td>
<td>用于配置提供服务的协议信息，协议由提供方指定，消费方被动接受</td>
</tr>
<tr>
<td><code>&lt;dubbo:application/&gt;</code></td>
<td>应用配置</td>
<td>用于配置当前应用信息，不管该应用是提供者还是消费者</td>
</tr>
<tr>
<td><code>&lt;dubbo:module/&gt;</code></td>
<td>模块配置</td>
<td>用于配置当前模块信息，可选</td>
</tr>
<tr>
<td><code>&lt;dubbo:registry/&gt;</code></td>
<td>注册中心配置</td>
<td>用于配置连接注册中心相关信息</td>
</tr>
<tr>
<td><code>&lt;dubbo:monitor/&gt;</code></td>
<td>监控中心配置</td>
<td>用于配置连接监控中心相关信息，可选</td>
</tr>
<tr>
<td><code>&lt;dubbo:provider/&gt;</code></td>
<td>提供方配置</td>
<td>当 ProtocolConfig 和 ServiceConfig 某属性没有配置时，采用此缺省值，可选</td>
</tr>
<tr>
<td><code>&lt;dubbo:consumer/&gt;</code></td>
<td>消费方配置</td>
<td>当 ReferenceConfig 某属性没有配置时，采用此缺省值，可选</td>
</tr>
<tr>
<td><code>&lt;dubbo:method/&gt;</code></td>
<td>方法配置</td>
<td>用于 ServiceConfig 和 ReferenceConfig 指定方法级的配置信息</td>
</tr>
<tr>
<td><code>&lt;dubbo:argument/&gt;</code></td>
<td>参数配置</td>
<td>用于指定方法参数配置</td>
</tr>
</tbody></table>
<h2 id="🤗不同粒度配置的覆盖关系"><a href="#🤗不同粒度配置的覆盖关系" class="headerlink" title="🤗不同粒度配置的覆盖关系"></a>🤗不同粒度配置的覆盖关系</h2><p>以 timeout 为例，下图显示了配置的查找顺序，其它 retries, loadbalance, actives 等类似：</p>
<ul>
<li>方法级优先，接口级次之，全局配置再次之。</li>
<li>如果级别一样，则消费方优先，提供方次之。</li>
</ul>
<p>其中，服务提供方配置，通过 URL 经由注册中心传递给消费方。</p>
<p><img src="https://dubbo.apache.org/imgs/user/dubbo-config-override.jpg" alt="dubbo-config-override"></p>
<p>（建议由服务提供方设置超时，因为一个方法需要执行多长时间，服务提供方更清楚，如果一个消费方同时引用多个服务，就不需要关心每个服务的超时设置）。</p>
<p>理论上 ReferenceConfig 中除了<code>interface</code>这一项，其他所有配置项都可以缺省不配置，框架会自动使用ConsumerConfig，ServiceConfig, ProviderConfig等提供的缺省配置。</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中配置Redis</title>
    <url>/2021/05/27/Linux%E4%B8%AD%E9%85%8D%E7%BD%AERedis/</url>
    <content><![CDATA[<h1 id="🎇Linux系统下安装Redis"><a href="#🎇Linux系统下安装Redis" class="headerlink" title="🎇Linux系统下安装Redis"></a>🎇Linux系统下安装Redis</h1><p>这里先给出所用到的版本：</p>
<blockquote>
<p>VMware 15.x+</p>
<p>CentOS 7 </p>
<p>Redis 4.0.10</p>
</blockquote>
<p>​        还要使用 <code>xshell</code> 以及 <code>xftp</code> 这两个工具，一个是用来远程连接服务器进行命令行操作服务器，一个是连接远程服务器进行文件传输以及对服务器中的文件进行一系列操作.</p>
<ul>
<li>利用<code>xftp</code> 将下载好的 <code>redis.tar</code> 上传到虚拟机中，通常情况下，是上传到根目录下的<code>opt</code>目录之中</li>
<li>利用 <code>xshell</code> 或者 <code>VMware</code> 终端将压缩包进行解压安装，解压缩之前需要把终端路径切换到<code>tar</code>包所在路径</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 对tar包进行解压</span></span><br><span class="line"><span class="bullet">-</span> tar -zxvf redis-4.0.10.tar.gz</span><br></pre></td></tr></table></figure>

<ul>
<li>安装<code>gcc</code>编译<code>redis</code> 源码 (<code>Redis</code>是<code>C</code>语言所编写的，所以需要<code>c</code>语言的编译器 <code>gcc</code>进行编译)</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 5.安装gcc  </span></span><br><span class="line"><span class="bullet">-</span> yum install -y gcc</span><br><span class="line"></span><br><span class="line"><span class="section"># 6.进入解压缩目录执行如下命令</span></span><br><span class="line"><span class="bullet">-</span> make MALLOC=libc</span><br><span class="line"></span><br><span class="line"><span class="section"># 7.编译完成后执行如下命令</span></span><br><span class="line"><span class="bullet">-</span> make install PREFIX=/usr/redis</span><br><span class="line"></span><br><span class="line"><span class="section"># 8.进入/usr/redis目录启动redis服务 </span></span><br><span class="line"><span class="bullet">-</span> ./redis-server</span><br></pre></td></tr></table></figure>

<img src="/2021/05/27/Linux%E4%B8%AD%E9%85%8D%E7%BD%AERedis/1.png" class title="配置成功提示">

<ul>
<li>复制一个会话，进行客户端连接</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 9.Redis服务端口默认是 6379</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 10.进入bin目录执行客户端连接操作</span></span><br><span class="line"><span class="bullet">-</span> ./redis-cli –p 6379</span><br></pre></td></tr></table></figure>

<p>出现如下提示即连接成功 !</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[root@localhost bin]# ./redis-cli -p 6379</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>



<h1 id="🎉配置Redis服务远程连接"><a href="#🎉配置Redis服务远程连接" class="headerlink" title="🎉配置Redis服务远程连接"></a>🎉配置Redis服务远程连接</h1><p>​        通常情况下，需要在自己的电脑上看<code>Redis</code>中的数据，使用<code>xshell</code>用命令来查询效率十分低下，于是我们可以利用<code>Redis</code>可视化工具在本地连接后，本地查看数据库中的内容.</p>
<ul>
<li><p>可以在本地先安装 <code>RedisDeskManager</code></p>
</li>
<li><p>Linux中安装防火墙服务</p>
</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 安装iptables-services</span></span><br><span class="line"><span class="bullet">-</span> yum install iptables-services</span><br><span class="line"></span><br><span class="line"><span class="section"># 启动服务</span></span><br><span class="line"><span class="bullet">-</span> systemctl enable iptables</span><br><span class="line"><span class="bullet">-</span> systemctl start iptables</span><br><span class="line"></span><br><span class="line"><span class="section"># 查看防火墙状态</span></span><br><span class="line"><span class="bullet">-</span> service iptables status</span><br><span class="line"></span><br><span class="line"><span class="section"># 关闭防火墙</span></span><br><span class="line"><span class="bullet">-</span> service iptables stop</span><br><span class="line"></span><br><span class="line"><span class="section"># 打开防火墙</span></span><br><span class="line"><span class="bullet">-</span> service iptables start </span><br><span class="line"></span><br><span class="line"><span class="section"># 重启防火墙</span></span><br><span class="line"><span class="bullet">-</span> service iptables restart </span><br></pre></td></tr></table></figure>



<ul>
<li><p>编辑<code>Linux</code>防火墙 </p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 增加防火墙规则</span></span><br><span class="line"><span class="bullet">-</span> vi /etc/sysconfig/iptables</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>加入防火墙规则：<code>-A INPUT -m state –state NEW -m tcp -p tcp –dport 6379 -j ACCEPT</code></p>
</li>
<li><p>将压缩包解压目录之中的<code>redis.conf</code> 移动到 <code>usr/redis</code> 下（主要是为了方便操作）</p>
<ul>
<li>注意：一定要用管理员身份进行编辑，不然文件为只读文件无法更改</li>
</ul>
</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 更改白名单</span></span><br><span class="line">bind 127.0.0.1 </span><br><span class="line"><span class="section"># 改为 （注释掉）</span></span><br><span class="line">= &gt; # bind 127.0.0.1 </span><br><span class="line"></span><br><span class="line"><span class="section"># 将yes改为no</span></span><br><span class="line">protected-mode yes</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Dubbo(二):集群搭建</title>
    <url>/2021/07/24/Dubbo%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="😮负载均衡"><a href="#😮负载均衡" class="headerlink" title="😮负载均衡"></a>😮负载均衡</h1><p><strong>各种负载均衡策略</strong></p>
<h2 id="随机"><a href="#随机" class="headerlink" title="随机"></a>随机</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">interface</span>=<span class="string">&quot;com.anthony.service.UserService&quot;</span> <span class="attr">loadbalance</span>=<span class="string">&quot;random&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">interface</span>=<span class="string">&quot;com.anthony.service.UserService&quot;</span> <span class="attr">loadbalance</span>=<span class="string">&quot;roundrobin&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="最少活跃数"><a href="#最少活跃数" class="headerlink" title="最少活跃数"></a>最少活跃数</h2><ul>
<li>最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。</li>
<li>使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。</li>
</ul>
<h2 id="一致性哈希"><a href="#一致性哈希" class="headerlink" title="一致性哈希"></a>一致性哈希</h2><h3 id="一致性Hash算法背景"><a href="#一致性Hash算法背景" class="headerlink" title="一致性Hash算法背景"></a>一致性Hash算法背景</h3><p>　　一致性哈希算法在1997年由麻省理工学院的Karger等人在解决分布式Cache中提出的，设计目标是为了解决因特网中的热点(Hot spot)问题，初衷和CARP十分类似。一致性哈希修正了CARP使用的简单哈希算法带来的问题，使得DHT可以在P2P环境中真正得到应用。</p>
<p>　　但现在一致性hash算法在分布式系统中也得到了广泛应用，研究过<code>memcached</code>缓存数据库的人都知道，<code>memcached</code>服务器端本身不提供分布式cache的一致性，而是由客户端来提供，具体在计算一致性hash时采用如下步骤：</p>
<ol>
<li>首先求出<code>memcached</code>服务器（节点）的哈希值，并将其配置到<code>0～2^32</code>的圆（continuum）上。</li>
<li>然后采用同样的方法求出存储数据的键的哈希值，并映射到相同的圆上。</li>
<li>然后从数据映射到的位置开始顺时针查找，将数据保存到找到的第一个服务器上。如果超过2^32仍然找不到服务器，就会保存到第一台<code>memcached</code>服务器上。</li>
</ol>
<img src="/2021/07/24/Dubbo%EF%BC%88%E4%BA%8C%EF%BC%89/1.png" class>

<p>　　从上图的状态中添加一台memcached服务器。余数分布式算法由于保存键的服务器会发生巨大变化而影响缓存的命中率，但Consistent Hashing中，只有在园（continuum）上增加服务器的地点逆时针方向的第一台服务器上的键会受到影响，如下图所示：</p>
<img src="/2021/07/24/Dubbo%EF%BC%88%E4%BA%8C%EF%BC%89/2.png" class>



<h3 id="一致性Hash性质"><a href="#一致性Hash性质" class="headerlink" title="一致性Hash性质"></a>一致性Hash性质</h3><p>　　考虑到分布式系统每个节点都有可能失效，并且新的节点很可能动态的增加进来，如何保证当系统的节点数目发生变化时仍然能够对外提供良好的服务，这是值得考虑的，尤其实在设计分布式缓存系统时，如果某台服务器失效，对于整个系统来说如果不采用合适的算法来保证一致性，那么缓存于系统中的所有数据都可能会失效（即由于系统节点数目变少，客户端在请求某一对象时需要重新计算其hash值（通常与系统中的节点数目有关），由于hash值已经改变，所以很可能找不到保存该对象的服务器节点），因此一致性hash就显得至关重要，良好的分布式cahce系统中的一致性hash算法应该满足以下几个方面：</p>
<ul>
<li><strong>平衡性(Balance)</strong></li>
</ul>
<p>平衡性是指哈希的结果能够尽可能分布到所有的缓冲中去，这样可以使得所有的缓冲空间都得到利用。很多哈希算法都能够满足这一条件。</p>
<ul>
<li><strong>单调性(Monotonicity)</strong></li>
</ul>
<p>单调性是指如果已经有一些内容通过哈希分派到了相应的缓冲中，又有新的缓冲区加入到系统中，那么哈希的结果应能够保证原有已分配的内容可以被映射到新的缓冲区中去，而不会被映射到旧的缓冲集合中的其他缓冲区。简单的哈希算法往往不能满足单调性的要求，如最简单的线性哈希：x = (ax + b) mod (P)，在上式中，P表示全部缓冲的大小。不难看出，当缓冲大小发生变化时(从P1到P2)，原来所有的哈希结果均会发生变化，从而不满足单调性的要求。哈希结果的变化意味着当缓冲空间发生变化时，所有的映射关系需要在系统内全部更新。而在P2P系统内，缓冲的变化等价于Peer加入或退出系统，这一情况在P2P系统中会频繁发生，因此会带来极大计算和传输负荷。单调性就是要求哈希算法能够应对这种情况。</p>
<ul>
<li><strong>分散性(Spread)</strong></li>
</ul>
<p>在分布式环境中，终端有可能看不到所有的缓冲，而是只能看到其中的一部分。当终端希望通过哈希过程将内容映射到缓冲上时，由于不同终端所见的缓冲范围有可能不同，从而导致哈希的结果不一致，最终的结果是相同的内容被不同的终端映射到不同的缓冲区中。这种情况显然是应该避免的，因为它导致相同内容被存储到不同缓冲中去，降低了系统存储的效率。分散性的定义就是上述情况发生的严重程度。好的哈希算法应能够尽量避免不一致的情况发生，也就是尽量降低分散性。</p>
<ul>
<li><strong>负载(Load)</strong></li>
</ul>
<p>负载问题实际上是从另一个角度看待分散性问题。既然不同的终端可能将相同的内容映射到不同的缓冲区中，那么对于一个特定的缓冲区而言，也可能被不同的用户映射为不同的内容。与分散性一样，这种情况也是应当避免的，因此好的哈希算法应能够尽量降低缓冲的负荷。</p>
<ul>
<li><strong>平滑性(Smoothness)</strong></li>
</ul>
<p>平滑性是指缓存服务器的数目平滑改变和缓存对象的平滑改变是一致的。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>　　一致性哈希算法（Consistent Hashing）最早在论文《<a href="http://dl.acm.org/citation.cfm?id=258660">Consistent Hashing and Random Trees: Distributed Caching Protocols for Relieving Hot Spots on the World Wide Web</a>》中被提出。简单来说，一致性哈希将整个哈希值空间组织成一个虚拟的圆环，如假设某哈希函数H的值空间为0-2^32-1（即哈希值是一个32位无符号整形），整个哈希空间环如下：</p>
<img src="/2021/07/24/Dubbo%EF%BC%88%E4%BA%8C%EF%BC%89/3.png" class>

<p>　　整个空间按顺时针方向组织。0和232-1在零点中方向重合。</p>
<p>　　下一步将各个服务器使用Hash进行一个哈希，具体可以选择服务器的ip或主机名作为关键字进行哈希，这样每台机器就能确定其在哈希环上的位置，这里假设将上文中四台服务器使用ip地址哈希后在环空间的位置如下：</p>
<img src="/2021/07/24/Dubbo%EF%BC%88%E4%BA%8C%EF%BC%89/4.png" class> 

<p>接下来使用如下算法定位数据访问到相应服务器：将数据key使用相同的函数Hash计算出哈希值，并确定此数据在环上的位置，从此位置沿环顺时针“行走”，第一台遇到的服务器就是其应该定位到的服务器。</p>
<p>　　例如我们有Object A、Object B、Object C、Object D四个数据对象，经过哈希计算后，在环空间上的位置如下：</p>
<img src="/2021/07/24/Dubbo%EF%BC%88%E4%BA%8C%EF%BC%89/5.png" class>

<p>根据一致性哈希算法，数据A会被定为到Node A上，B被定为到Node B上，C被定为到Node C上，D被定为到Node D上。</p>
<p>下面分析一致性哈希算法的容错性和可扩展性。现假设Node C不幸宕机，可以看到此时对象A、B、D不会受到影响，只有C对象被重定位到Node D。一般的，在一致性哈希算法中，如果一台服务器不可用，则受影响的数据仅仅是此服务器到其环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务器）之间数据，其它不会受到影响。</p>
<p>下面考虑另外一种情况，如果在系统中增加一台服务器Node X，如下图所示：</p>
<img src="/2021/07/24/Dubbo%EF%BC%88%E4%BA%8C%EF%BC%89/6.png" class>

<p>此时对象Object A、B、D不受影响，只有对象C需要重定位到新的Node X 。一般的，在一致性哈希算法中，如果增加一台服务器，则受影响的数据仅仅是新服务器到其环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务器）之间数据，其它数据也不会受到影响。</p>
<p>综上所述，一致性哈希算法对于节点的增减都只需重定位环空间中的一小部分数据，具有较好的容错性和可扩展性。</p>
<p>另外，一致性哈希算法在服务节点太少时，容易因为节点分部不均匀而造成数据倾斜问题。例如系统中只有两台服务器，其环分布如下，</p>
<img src="/2021/07/24/Dubbo%EF%BC%88%E4%BA%8C%EF%BC%89/7.png" class>

<p>此时必然造成大量数据集中到Node A上，而只有极少量会定位到Node B上。为了解决这种数据倾斜问题，一致性哈希算法引入了虚拟节点机制，即对每一个服务节点计算多个哈希，每个计算结果位置都放置一个此服务节点，称为虚拟节点。具体做法可以在服务器ip或主机名的后面增加编号来实现。例如上面的情况，可以为每台服务器计算三个虚拟节点，于是可以分别计算 “Node A#1”、“Node A#2”、“Node A#3”、“Node B#1”、“Node B#2”、“Node B#3”的哈希值，于是形成六个虚拟节点：</p>
<img src="/2021/07/24/Dubbo%EF%BC%88%E4%BA%8C%EF%BC%89/8.png" class>

<p>同时数据定位算法不变，只是多了一步虚拟节点到实际节点的映射，例如定位到“Node A#1”、“Node A#2”、“Node A#3”三个虚拟节点的数据均定位到Node A上。这样就解决了服务节点少时数据倾斜的问题。在实际应用中，通常将虚拟节点数设置为32甚至更大，因此即使很少的服务节点也能做到相对均匀的数据分布。</p>
<h1 id="🎉集群容错"><a href="#🎉集群容错" class="headerlink" title="🎉集群容错"></a>🎉集群容错</h1><p>集群调用失败时，Dubbo 提供的容错方案</p>
<p>在集群调用失败时，Dubbo 提供了多种容错方案，缺省为 failover 重试。</p>
<p><img src="https://dubbo.apache.org/imgs/user/cluster.jpg" alt="cluster"></p>
<p>各节点关系：</p>
<ul>
<li>这里的 <code>Invoker</code> 是 <code>Provider</code> 的一个可调用 <code>Service</code> 的抽象，<code>Invoker</code> 封装了 <code>Provider</code> 地址及 <code>Service</code> 接口信息</li>
<li><code>Directory</code> 代表多个 <code>Invoker</code>，可以把它看成 <code>List&lt;Invoker&gt;</code> ，但与 <code>List</code> 不同的是，它的值可能是动态变化的，比如注册中心推送变更</li>
<li><code>Cluster</code> 将 <code>Directory</code> 中的多个 <code>Invoker</code> 伪装成一个 <code>Invoker</code>，对上层透明，伪装过程包含了容错逻辑，调用失败后，重试另一个</li>
<li><code>Router</code> 负责从多个 <code>Invoker</code> 中按路由规则选出子集，比如读写分离，应用隔离等</li>
<li><code>LoadBalance</code> 负责从多个 <code>Invoker</code> 中选出具体的一个用于本次调用，选的过程包含了负载均衡算法，调用失败后，需要重选</li>
</ul>
<h2 id="集群容错模式"><a href="#集群容错模式" class="headerlink" title="集群容错模式"></a>集群容错模式</h2><p>可以自行扩展集群容错策略，参见：<a href="https://dubbo.apache.org/zh/docs/dev/impls/cluster">集群扩展</a></p>
<h3 id="Failover-Cluster"><a href="#Failover-Cluster" class="headerlink" title="Failover Cluster"></a>Failover Cluster</h3><p>失败自动切换，当出现失败，重试其它服务器。通常用于读操作，但重试会带来更长延迟。可通过 <code>retries=&quot;2&quot;</code> 来设置重试次数(不含第一次)。</p>
<p>重试次数配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">retries</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">retries</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">&quot;findFoo&quot;</span> <span class="attr">retries</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Failfast-Cluster"><a href="#Failfast-Cluster" class="headerlink" title="Failfast Cluster"></a>Failfast Cluster</h3><p>快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。</p>
<h3 id="Failsafe-Cluster"><a href="#Failsafe-Cluster" class="headerlink" title="Failsafe Cluster"></a>Failsafe Cluster</h3><p>失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</p>
<h3 id="Failback-Cluster"><a href="#Failback-Cluster" class="headerlink" title="Failback Cluster"></a>Failback Cluster</h3><p>失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</p>
<h3 id="Forking-Cluster"><a href="#Forking-Cluster" class="headerlink" title="Forking Cluster"></a>Forking Cluster</h3><p>并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 <code>forks=&quot;2&quot;</code> 来设置最大并行数。</p>
<h3 id="Broadcast-Cluster"><a href="#Broadcast-Cluster" class="headerlink" title="Broadcast Cluster"></a>Broadcast Cluster</h3><p>广播调用所有提供者，逐个调用，任意一台报错则报错。通常用于通知所有提供者更新缓存或日志等本地资源信息。</p>
<p>现在广播调用中，可以通过 <code>broadcast.fail.percent </code>配置节点调用失败的比例，当达到这个比例后，<code>BroadcastClusterInvoker</code> 将不再调用其他节点，直接抛出异常。 <code>broadcast.fail.percent</code> 取值在 0～100 范围内。默认情况下当全部调用失败后，才会抛出异常。 <code>broadcast.fail.percent</code> 只是控制的当失败后是否继续调用其他节点，并不改变结果(任意一台报错则报错)。broadcast.fail.percent 参数 在 dubbo2.7.10 及以上版本生效。</p>
<p><code>Broadcast Cluster</code> 配置 <code>broadcast.fail.percent</code>。</p>
<p><code>broadcast.fail.percent=20</code> 代表了当 20% 的节点调用失败就抛出异常，不再调用其他节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@reference(cluster = &quot;broadcast&quot;, parameters = &#123;&quot;broadcast.fail.percent&quot;, &quot;20&quot;&#125;)</span></span><br></pre></td></tr></table></figure>

<p><code>2.1.0</code> 开始支持</p>
<h2 id="集群模式配置"><a href="#集群模式配置" class="headerlink" title="集群模式配置"></a>集群模式配置</h2><p>按照以下示例在服务提供方和消费方配置集群模式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">cluster</span>=<span class="string">&quot;failsafe&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">cluster</span>=<span class="string">&quot;failsafe&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown入门</title>
    <url>/2021/04/09/Markdown%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="1-代码块"><a href="#1-代码块" class="headerlink" title="1.代码块:"></a>1.代码块:</h2><p>​    使用三个 “ ``` ” 即可生成代码块,并且可以选择语言类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( args [] string)</span></span>&#123;</span><br><span class="line">        System.println(<span class="string">&quot;Hello World!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="2-标题"><a href="#2-标题" class="headerlink" title="2.标题"></a>2.标题</h2><p>​    使用 “ # ” 来表示，“ # ”越多字体越小 ， 最多六级标题，注意：# 后面必须有一个空格</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题 </span><br></pre></td></tr></table></figure>

<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h1 id="3-字体"><a href="#3-字体" class="headerlink" title="3.字体"></a>3.字体</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加粗</span></span><br><span class="line">	**加粗**</span><br><span class="line"><span class="comment">//代码高亮显示</span></span><br><span class="line">    ==高亮==</span><br><span class="line"><span class="comment">//删除线</span></span><br><span class="line">    ~删除线~</span><br><span class="line"><span class="comment">//斜体</span></span><br><span class="line">    *斜体*</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（高亮好像有点问题哈）</p>
<p><strong>加粗</strong></p>
<p><del>删除线</del></p>
<p><em>斜体</em></p>
<h1 id="4-引用"><a href="#4-引用" class="headerlink" title="4.引用"></a>4.引用</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用语法</span></span><br><span class="line">&gt;作者:XXX</span><br><span class="line">&gt;&gt;作者:XXX</span><br><span class="line">&gt;&gt;&gt;作者:XXX</span><br></pre></td></tr></table></figure>



<blockquote>
<p>作者:XXX</p>
</blockquote>
<blockquote>
<blockquote>
<p>作者:XXX</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>作者:XXX</p>
</blockquote>
</blockquote>
</blockquote>
<h1 id="5-分割线"><a href="#5-分割线" class="headerlink" title="5.分割线"></a>5.分割线</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分割线</span></span><br><span class="line">	---</span><br><span class="line"><span class="comment">//分割线2</span></span><br><span class="line">   	***</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<h1 id="6-图片插入"><a href="#6-图片插入" class="headerlink" title="6.图片插入"></a>6.图片插入</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在线图片和本地图片</span></span><br><span class="line">![奥特曼](https:<span class="comment">//ss2.baidu.com/-vo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/42166d224f4a20a46b610b709b529822720ed00d.jpg)</span></span><br></pre></td></tr></table></figure>

<p><img src="https://ss2.baidu.com/-vo3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/42166d224f4a20a46b610b709b529822720ed00d.jpg" alt="奥特曼" title="奥特曼"></p>
<img src="/2021/04/09/Markdown%E5%85%A5%E9%97%A8/ddm.jpg" class title="叮当猫">





<h1 id="7-超链接"><a href="#7-超链接" class="headerlink" title="7.超链接"></a>7.超链接</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//超链接语法</span></span><br><span class="line">[内容](链接)</span><br></pre></td></tr></table></figure>

<p><a href="www.baidu.com">百度</a></p>
<h1 id="8-列表"><a href="#8-列表" class="headerlink" title="8.列表"></a>8.列表</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//无序列表</span></span><br><span class="line">- 目录<span class="number">1</span></span><br><span class="line">- 目录<span class="number">2</span></span><br><span class="line">- 目录<span class="number">3</span></span><br><span class="line">- 目录<span class="number">4</span></span><br><span class="line"><span class="comment">//有序列表</span></span><br><span class="line"><span class="number">1</span>+. +名称</span><br></pre></td></tr></table></figure>





<ul>
<li>目录1</li>
<li>目录2</li>
<li>目录3</li>
<li>目录4</li>
</ul>
<ol>
<li>首页</li>
<li>拉文克劳</li>
<li>挖金矿为了救</li>
</ol>
<h1 id="9-表格"><a href="#9-表格" class="headerlink" title="9.表格"></a>9.表格</h1><p>​    一般情况下直接用Typora快速生成，十分方便</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>MybatisPlus(一):极致简化</title>
    <url>/2021/05/12/MybatisPlus%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="🎉MybatisPlus基本概念"><a href="#🎉MybatisPlus基本概念" class="headerlink" title="🎉MybatisPlus基本概念"></a>🎉MybatisPlus基本概念</h1><p>​    <a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus (opens new window)</a>（简称 MP）是一个 <a href="http://www.mybatis.org/mybatis-3/">MyBatis (opens new window)</a>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>
<p><strong>特性：</strong></p>
<ul>
<li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li>
<li><strong>损耗小</strong>：启动即会自动注入基本 <code>CURD</code>，性能基本无损耗，直接面向对象操作</li>
<li><strong>强大的 CRUD 操作</strong>：内置通用 <code>Mapper</code>、通用 <code>Service</code>，仅仅通过少量配置即可实现单表大部分 <code>CRUD</code> 操作，更有强大的条件构造器，满足各类使用需求</li>
<li><strong>支持 Lambda 形式调用</strong>：通过 <code>Lambda</code> 表达式，方便的编写各类查询条件，无需再担心字段写错</li>
<li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 -<code> Sequence</code>），可自由配置，完美解决主键问题</li>
<li><strong>支持 ActiveRecord 模式</strong>：支持 <code>ActiveRecord </code>形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li>
<li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ <code>Write once</code>, <code>use anywhere</code> ）</li>
<li><strong>内置代码生成器</strong>：采用代码或者<code> Maven</code> 插件可快速生成<code>Mapper</code>、 <code>Model </code>、<code> Service</code> 、 <code>Controller </code>层代码，支持模板引擎，更有超多自定义配置等您来使用</li>
<li><strong>内置分页插件</strong>：基于<code>MyBatis</code> 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li>
<li><strong>分页插件支持多种数据库</strong>：支持<code> MySQL</code>、<code>MariaDB</code>、<code>Oracle</code>、<code>DB2</code>、<code>H2</code>、<code>HSQL</code>、<code>SQLite</code>、<code>Postgre</code>、<code>SQLServer</code> 等多种数据库</li>
<li><strong>内置性能分析插件</strong>：可输出<code> Sql</code> 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li>
<li><strong>内置全局拦截插件</strong>：提供全表<code> delete</code> 、<code>update</code>操作智能分析阻断，也可自定义拦截规则，预防误操作</li>
</ul>
<p>​    </p>
<p>对于<code>SpringBoot</code>项目而言，使用<code>MybatisPlus</code>十分便携，直接在依赖文件中添加相关依赖即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中已经包含了<code>Mybatis</code>的相关依赖，不用额外添加.</p>
<h1 id="🎇基本的SQL语句"><a href="#🎇基本的SQL语句" class="headerlink" title="🎇基本的SQL语句"></a>🎇基本的SQL语句</h1><p>构建实体类：</p>
<p>（其中的注释会在后续文章中做汇总）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对应的数据库表名，表名的首字母大写就是类名的话可以不用写，不过还是建议加上，方便维护</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Books</span> </span>&#123;</span><br><span class="line">	<span class="comment">//   数据表主键，value值为表中的字段  类型为主键自增 </span></span><br><span class="line">  <span class="meta">@TableId(value = &quot;book_id&quot; , type = IdType.AUTO)</span></span><br><span class="line">  <span class="keyword">private</span> Integer bookId;</span><br><span class="line">  <span class="keyword">private</span> String bookName;</span><br><span class="line">  <span class="keyword">private</span> Integer bookCounts;</span><br><span class="line">  <span class="keyword">private</span> String detail;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">getBookId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bookId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookId</span><span class="params">(Integer bookId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bookId = bookId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getBookName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bookName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookName</span><span class="params">(String bookName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bookName = bookName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">getBookCounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bookCounts;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookCounts</span><span class="params">(Integer bookCounts)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bookCounts = bookCounts;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDetail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> detail;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDetail</span><span class="params">(String detail)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.detail = detail;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Books&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;bookId=&quot;</span> + bookId +</span><br><span class="line">            <span class="string">&quot;, bookName=&#x27;&quot;</span> + bookName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, bookCounts=&quot;</span> + bookCounts +</span><br><span class="line">            <span class="string">&quot;, detail=&#x27;&quot;</span> + detail + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>构建 <code>dao</code> 层：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继承之后才会有基本的SQL语句，这里使用了泛型，避免需要强制类型转换</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BooksMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Books</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后在启动类配置扫描包：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//用于让SpringBoot自动帮dao接口进行注册</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.soucat.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上完成之后就可以进行测试了，十分的方便.</p>
<p>在测试类中先要将<code>dao</code>接口自动注入，<code>idea</code>会报错，只是因为这个对象是在程序运行时才会产生，编译阶段没有创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> BooksMapper booksMapper;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>查询用户</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询一本书</span></span><br><span class="line">    System.out.println(booksMapper.selectById(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectBoos</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//这里当然了也可以创建List对象后一个一个加进去也没有问题，只是以上方式比较方便</span></span><br><span class="line">    System.out.println(booksMapper.selectBatchIds(list));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>​        其余的也都是类似的，毕竟只是基本的 <code>SQL</code> 语句，当然了，<code>MybatisPlus</code> 也可以像 <code>Mybatis</code> 那样自定义 <code>SQL</code> 语句，编写配置文件实现.就不一一演示了.</p>
<h1 id="🎨AR模式"><a href="#🎨AR模式" class="headerlink" title="🎨AR模式"></a>🎨AR模式</h1><p>​        <code>Active Record</code>(活动记录)，是一种领域模型模式，特点是一个模型类对应关系型数据库中的一个表，而模型类的一个实例对应表中的一行记录，属于动态模型。而Java作为准静态语言，对于 <code>ActiveRecord </code>往往只能感叹其优雅，所以 <code>MP</code> 也在 <code>AR </code>道路上进行了一定的探索，才有了现在的功能Java也能实现AR模式。简而言之，就是直接用实体类对数据库进行<code>CRUD</code>操作，接下来看具体代码：</p>
<p><strong>要实现AR模式需要两个前提：一是实体类继承Model抽象类，二是定义实体类对应的mapper接口继承BaseMapper</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableName(value = &quot;books&quot;)</span></span><br><span class="line">				<span class="comment">//一定要继承这个Model</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Books</span> <span class="keyword">extends</span> <span class="title">Model</span>&lt;<span class="title">Books</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@TableId(value = &quot;book_id&quot; , type = IdType.AUTO)</span></span><br><span class="line">  <span class="keyword">private</span> Integer bookId;</span><br><span class="line">  <span class="keyword">private</span> String bookName;</span><br><span class="line">  <span class="keyword">private</span> Integer bookCounts;</span><br><span class="line">  <span class="keyword">private</span> String detail;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">getBookId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bookId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookId</span><span class="params">(Integer bookId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bookId = bookId;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getBookName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bookName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookName</span><span class="params">(String bookName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bookName = bookName;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Integer <span class="title">getBookCounts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bookCounts;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBookCounts</span><span class="params">(Integer bookCounts)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.bookCounts = bookCounts;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDetail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> detail;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDetail</span><span class="params">(String detail)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.detail = detail;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Books&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;bookId=&quot;</span> + bookId +</span><br><span class="line">            <span class="string">&quot;, bookName=&#x27;&quot;</span> + bookName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, bookCounts=&quot;</span> + bookCounts +</span><br><span class="line">            <span class="string">&quot;, detail=&#x27;&quot;</span> + detail + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>dao</code>接口类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继承之后才会有基本的SQL语句，这里使用了泛型，避免需要强制类型转换</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BooksMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Books</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//用于让SpringBoot自动帮dao接口进行注册</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.soucat.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>查询功能</strong></p>
</blockquote>
<p>AR模式和普通的模式不同之处就在于可以直接使用实体类进行查询,不需要 <code>dao</code> 接口对象来调，当然了这不意味着接口类可以不写了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selectBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询一本书</span></span><br><span class="line">    Books books = <span class="keyword">new</span> Books();</span><br><span class="line">    books.setBookId(<span class="number">1</span>);</span><br><span class="line">    Books books1 = books.selectById();</span><br><span class="line">    System.out.println(books1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其余的基本语句也都类似，就不一一介绍了.</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>MybatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL(一)</title>
    <url>/2021/04/11/MySQL%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="🎊MySQL的安装"><a href="#🎊MySQL的安装" class="headerlink" title="🎊MySQL的安装"></a>🎊MySQL的安装</h1><p>​    ①：去官网下载社区版上面的一个；<br>​    （建议复制下载地址然后在迅雷当中下载比较快）<br>​    ②：在非C盘建一个 <code>MySQL</code> 文件夹装入下载文件并且解压；<br>​    ③：将bin目录配入环境变量；<br>​    ④：编写配置文件：(先建文本文件，编写好以后，将文件更改为 <code>my.ini</code> 文件并改以 <code>ANSCI</code> 编译保存)；<br>​        如下：（注意）设置 <code>mysql</code> 的安装目录和数据库的数据存放目录根据个人下载位置进更改<br>​            </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"></span><br><span class="line">	[mysqld]</span><br><span class="line">	# 设置3306端口</span><br><span class="line">	port=3306</span><br><span class="line">	# 设置mysql的安装目录</span><br><span class="line">	basedir=Z:\\MySQL8.0\\mysql-8.0.22-winx64</span><br><span class="line">	# 设置mysql数据库的数据的存放目录</span><br><span class="line">	datadir=Z:\\MySQL8.0\\mysql-8.0.22-winx64\\data</span><br><span class="line">	# 允许最大连接数</span><br><span class="line">	max_connections=200</span><br><span class="line">	# 允许连接失败的次数。</span><br><span class="line">	max_connect_errors=10</span><br><span class="line">	# 服务端使用的字符集默认为utf8mb4</span><br><span class="line">	character-set-server=utf8mb4</span><br><span class="line">	# 创建新表时将使用的默认存储引擎</span><br><span class="line">	default-storage-engine=INNODB</span><br><span class="line">	# 默认使用“mysql_native_password”插件认证</span><br><span class="line">	#mysql_native_password</span><br><span class="line">	default_authentication_plugin=mysql_native_password</span><br><span class="line">	[mysql]</span><br><span class="line">	# 设置mysql客户端默认字符集</span><br><span class="line">	default-character-set=utf8mb4</span><br><span class="line">	[client]</span><br><span class="line">	# 设置mysql客户端连接服务端时默认使用的端口</span><br><span class="line">	port=3306</span><br><span class="line">	default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">⑤：对MySQL进行初始化安装，以管理员身份运行命令提示符；</span><br><span class="line">并且将路径切换至bin目录下；</span><br><span class="line">⑥：</span><br><span class="line">	1.输入命令：mysqld --initialize --console </span><br><span class="line">		进行初始化,最后面会显示随机生成的密码，要记住</span><br><span class="line">	2.输入命令：mysqld -install mysql</span><br><span class="line">		出现：Service successfully installed 即成功</span><br><span class="line">	3.启动mysql服务 ：net start mysql</span><br><span class="line">	   关闭mysql服务 ： net stop mysql</span><br><span class="line">	4.修改密码 </span><br><span class="line">		ALTER USER &#x27;root&#x27; @&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;密码&#x27;;</span><br></pre></td></tr></table></figure>

<p><strong>补充：有的电脑会缺少一些注册表，安装一个VC++2015redist即可</strong></p>
<h1 id="🎍MySQL相关概念"><a href="#🎍MySQL相关概念" class="headerlink" title="🎍MySQL相关概念"></a>🎍MySQL相关概念</h1><ul>
<li><p><strong>什么是SQL？</strong></p>
<p>&emsp;&emsp;结构化查询语言，是一门标准通用的语言。标准的 <code>sql</code> 适合于所有数据库产品 ,<code>SQL</code> 属于高级语言。只要能看懂英语单词的，写出来的 <code>sql</code> 语句，可以读懂什么意思. <code>SQL</code> 语句在执行的时候，实际上内部也会先进行编译，然后在执行 <code>sql</code> .( <code>sql</code> 语句的编译由<code>DBMS</code>完成.)</p>
</li>
<li><p><strong>DB 、DBMS 概念？</strong></p>
<ul>
<li>DB（Database）：数据库，存储在电脑硬盘中</li>
<li>DBMS（DataBase Management System）：数据库管理系统，常见的有MySQL 、Sqlserver 、Oracle、DB2 、Sybase</li>
</ul>
</li>
<li><p><strong>DBMS是干什么的？</strong></p>
</li>
</ul>
<p>&emsp;&emsp;<code>DBMS</code> 负责执行 <code>sql</code> 语句，通过执行 <code>sql</code> 语句对 <code>DB</code> 中的数据进行操作.</p>
<ul>
<li><strong>表</strong></li>
</ul>
<p>&emsp;&emsp;表（table) 是数据库的基本组成单位，日常生活中用表，无不是为了让数据方便查询和统计以及修改，十分便利，在数据库中也是如此，让我们可读性变强. 一个表包括行和列.</p>
<p>&emsp;&emsp;<code>行</code>：被称为数据记录（data）</p>
<p>&emsp;&emsp;<code>列</code>：被称为字段（column）</p>
<p> &emsp;&emsp;<strong>字段包含的属性有：字段名 、数据类型 、相关约束</strong></p>
<ul>
<li><p><strong>SQL语句的分类</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">DQL（数据查询语言）：查询语句，凡是select语句都是DQL。</span><br><span class="line"></span><br><span class="line">DML（数据操作）：insert delet update 对表当中数据进学校增删改</span><br><span class="line"></span><br><span class="line">DDL（数据定义）：creat drop alter 对表结构的增删改。</span><br><span class="line"></span><br><span class="line">TCL（事物控制）：commit提交事务，rollback回滚事务。（T为transaction）</span><br><span class="line"></span><br><span class="line">DCL（数据控制）：grant授权、revoke撤销权限。</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="🎇MySQL基本语句"><a href="#🎇MySQL基本语句" class="headerlink" title="🎇MySQL基本语句"></a>🎇MySQL基本语句</h1><p>​    <strong>登录：mysql -uroot -p密码；或者 mysql -uroot -p回车；（下一行输入密码不可见）</strong><br>​    <strong>退出：exit</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看数据库</span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line">#创建数据库</span><br><span class="line">create database 数据库名;</span><br><span class="line"></span><br><span class="line">#使用数据库</span><br><span class="line">use 数据库名;</span><br><span class="line"></span><br><span class="line">#初始化数据</span><br><span class="line">source 拖到源文件到CMD中 </span><br></pre></td></tr></table></figure>

<p><strong>注意：所有 <code>sql</code> 语句都要以英文<code>‘;’</code> 结束不然不会执行，以上实际为MySQL的命令，而且sql语句不区分大小写哦</strong></p>
<h2 id="查询表结构"><a href="#查询表结构" class="headerlink" title="查询表结构"></a>查询表结构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查询某个表的结构</span><br><span class="line">desc 表名;</span><br><span class="line"></span><br><span class="line">表结构当中会显示，字段名 ， 数据类型 ，约束 ， 默认值 </span><br></pre></td></tr></table></figure>



<h2 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h2><h3 id="普通查询语句"><a href="#普通查询语句" class="headerlink" title="普通查询语句"></a>普通查询语句</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查询某个字段</span><br><span class="line">select 字段 from 表名;</span><br><span class="line"></span><br><span class="line">#查询所有字段</span><br><span class="line">select * from 表名;</span><br><span class="line"></span><br><span class="line">#一般性格式</span><br><span class="line">select 字段1,字段2，···，字段n from 表名;</span><br><span class="line"></span><br><span class="line">#查询当前所使用的数据库1</span><br><span class="line">select database();</span><br><span class="line"></span><br><span class="line">#查询mysql版本号</span><br><span class="line">select version();</span><br><span class="line"></span><br><span class="line"># \c 可以结束一条语句的输入</span><br></pre></td></tr></table></figure>



<p>查询语句中，字段可以参与数学运算，以及可以取别名.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#取别名时用到 as , 同时as可以省略以空格代替即可.</span><br><span class="line">select 字段1 (as) 别名1,字段2*12 别名2 from 表名； </span><br><span class="line"></span><br><span class="line">#注意，当别名取中文名的时候,需要用引号括起来，不然会报错 既可以使用单引号和双引号</span><br><span class="line">#MySQL对于两种引号都兼容，而Oracle只对单引号兼容，考虑以后会接触到其它数据库</span><br><span class="line">#更推荐使用 单引号 .</span><br></pre></td></tr></table></figure>



<h3 id="条件查询语句"><a href="#条件查询语句" class="headerlink" title="条件查询语句"></a>条件查询语句</h3><p>基本的语句结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">	字段n</span><br><span class="line">from</span><br><span class="line">	表名</span><br><span class="line">where</span><br><span class="line">	条件;</span><br><span class="line"></span><br><span class="line">#以上这种格式在命令行中也是可以使用的，这么写只是为了看的更清楚.</span><br><span class="line">#条件 可以是 诸如 字段 &#x3D; xxxx; 同样的中文需要单引号</span><br></pre></td></tr></table></figure>



<p>现在给出一张样表，以便后续的举例和学习.</p>
<img src="/2021/04/11/MySQL%EF%BC%88%E4%B8%80%EF%BC%89/1.png" class title="table">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查询工资大于(小于)2000以上的人的名单</span><br><span class="line">select ename from emp where sal &gt;（&lt;） 2000;</span><br><span class="line"></span><br><span class="line">#查询工资大于等于2000以上的人的名单</span><br><span class="line">select ename from emp where sal &gt;&#x3D; 2000;</span><br><span class="line"></span><br><span class="line">#查询工资不等于3000的</span><br><span class="line">select ename from emp where sal &lt;&gt; 3000;</span><br><span class="line">#或者</span><br><span class="line">select ename from emp where sal !&#x3D; 3000;</span><br></pre></td></tr></table></figure>



<h4 id="between···and-in-and-or"><a href="#between···and-in-and-or" class="headerlink" title="between···and, in , and , or"></a>between···and, in , and , or</h4><ul>
<li><strong>between···and</strong></li>
</ul>
<p><code>between···and</code> 为闭区间.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查询工资位于1000 到 2000的人的名单</span><br><span class="line">select ename,sal from emp where sal between 1000 and 2000;</span><br><span class="line"></span><br><span class="line">#也可以对字符串使用</span><br><span class="line">select ename from emp where ename between &#39;A&#39; and &#39;F&#39;;</span><br><span class="line"></span><br><span class="line">#当然了数据必须左小右大，懂的都懂哈，不然查不到的</span><br></pre></td></tr></table></figure>



<ul>
<li><strong>and、or</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查询工资为3000 和 1500的人的名单</span><br><span class="line">select ename , sal from emp where sal &#x3D; 3000 and sal &#x3D; 1500;</span><br><span class="line"></span><br><span class="line">#查询工资为3000 或 1500的人的名单</span><br><span class="line">select ename , sal from emp where sal &#x3D; 3000 or sal &#x3D; 1500;</span><br><span class="line"></span><br><span class="line">#查询工资为 3000 和 部门编号为15或者30的</span><br><span class="line">#应该不会有人这么写吧，这无疑是错误的写法</span><br><span class="line">select ename,deptno , sal from emp where sal &#x3D; 3000 and deptno &#x3D; 15 or deptno &#x3D; 30;</span><br><span class="line">#这条语句查询的是 （工资为3000并且编号为15） 或者 编号为30的人的名单</span><br><span class="line"></span><br><span class="line">#正确写法</span><br><span class="line">select ename,deptno , sal from emp where sal &#x3D; 3000 and (deptno &#x3D; 15 or deptno &#x3D; 30);</span><br></pre></td></tr></table></figure>



<ul>
<li><strong>in</strong></li>
</ul>
<p>in的用法与or基本相同</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查询工资为3000 或者 1500的人的名单</span><br><span class="line">#用or</span><br><span class="line">select ename , sal from emp where sal &#x3D; 3000 or sal &#x3D; 1500;</span><br><span class="line">#用in</span><br><span class="line">select ename , sal from emp where sal in (3000, 1500);</span><br></pre></td></tr></table></figure>

<p><strong>注意： in的括号不是区间范围而是值，类似于一个数组，里面同样也可以是字符串，记得要加单引号</strong></p>
<hr>
<p>接下来给出一个问题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查询工资不是3000和1500的人的名单</span><br><span class="line">#最直白的写法</span><br><span class="line">select ename , sal from emp where sal !&#x3D; 3000 and sal !&#x3D; 1500;</span><br><span class="line"></span><br><span class="line">#使用in</span><br><span class="line">select ename , sal from emp where sal not in (3000 , 1500);</span><br></pre></td></tr></table></figure>



<p><strong>以上可以知道，<code>not in</code> 的使用十分方便，再次强调，括号中并不是范围而是具体的值</strong></p>
<ul>
<li><strong>NULL</strong></li>
</ul>
<p>接下来介绍一下空(NULL) ，表中字段 <code>comm</code> 中包含 <code>NULL</code> 值，那么如何筛选出这些包含 <code>NULL</code> 的名单呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#这不简单嘛，于是迅速写下了</span><br><span class="line">select ename , sal from emp where comm &#x3D; ‘NULL’ ;</span><br><span class="line">#好家伙，果不其然报错了，不愧是我</span><br><span class="line">#实际上该怎么写呢？</span><br><span class="line">select ename , sal from emp where comm is null;</span><br><span class="line"></span><br><span class="line">#查询comm不为空的名单</span><br><span class="line">select ename , sal from emp where comm is not null;</span><br></pre></td></tr></table></figure>



<h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><ul>
<li><strong><code>like</code></strong> : 英文可译为 像，类似 (由此可见 <code>sql </code> 语句是多么贴合英语的实际表达哈哈哈哈)</li>
<li><strong><code>%</code></strong> : 代表多个字符</li>
<li><strong><code>_</code></strong> : 代表单个字符</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查询名字中首字母为A的人的名单</span><br><span class="line">select ename from emp where ename like &#39;a%&#39;;</span><br><span class="line"></span><br><span class="line">#查询名字中含有A的人的名单 </span><br><span class="line">select ename from emp where ename like &#39;%a%&#39; or ename like &#39;a%&#39;</span><br><span class="line"></span><br><span class="line">#查询名字中以第二个字母为b的人的名单</span><br><span class="line">select ename from emp where ename like &#39;_b%&#39;;</span><br><span class="line"></span><br><span class="line">#查询名字中以b字母结尾的人的名单</span><br><span class="line">select ename from emp where ename like &#39;%b&#39;;</span><br></pre></td></tr></table></figure>



<h3 id="排序以及分组函数"><a href="#排序以及分组函数" class="headerlink" title="排序以及分组函数"></a>排序以及分组函数</h3><p><strong>排序</strong></p>
<p>&emsp;&emsp;排序在数据处理上也是经常使用的，当然也是非常简单的，下面将给出相关的一些命令：</p>
<table>
<thead>
<tr>
<th align="center">asc</th>
<th align="center">升序</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>desc</strong></td>
<td align="center"><strong>降序</strong></td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查询工资在1500 - 3000之间的并且按降序排列的名单</span><br><span class="line">select ename , sal from emp where sal between 1500 and 3000 order by sal desc;</span><br><span class="line"></span><br><span class="line">#排序还可以规定第二级的排序，即第一级排序数值相同的时候，触发二级排序 比如工资相同的时候按名字首字母排序</span><br><span class="line">select ename , sal from emp where sal between 1500 and 3000 order by sal desc , ename asc;</span><br><span class="line"></span><br><span class="line">#</span><br></pre></td></tr></table></figure>



<p><strong>注意：如果在 <code>order by </code> 中不写排序方式，默认升序排列.</strong></p>
<hr>
<p><strong>分组函数</strong></p>
<table>
<thead>
<tr>
<th align="center">count</th>
<th align="center">sum</th>
<th align="center">avg</th>
<th align="center">max</th>
<th align="center">min</th>
</tr>
</thead>
<tbody><tr>
<td align="center">计数</td>
<td align="center">求和</td>
<td align="center">求平均值</td>
<td align="center">求最大值</td>
<td align="center">求最小值</td>
</tr>
</tbody></table>
<p>记住：所有的分组函数都是对“某一组”数据进行操作的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#找出工资总和？</span><br><span class="line">	select sum(sal) from emp;</span><br><span class="line">#找出最高工资？</span><br><span class="line">	select max(sal) from emp;</span><br><span class="line">#找出最低工资？</span><br><span class="line">	select min(sal) from emp;</span><br><span class="line">#找出平均工资？</span><br><span class="line">	select avg(sal) from emp;</span><br><span class="line">#找出总人数？</span><br><span class="line">	select count(*) from emp;</span><br><span class="line">	select count(ename) from emp;</span><br><span class="line"></span><br><span class="line">#分组函数一共5个。</span><br><span class="line">#分组函数还有另一个名字：多行处理函数。</span><br><span class="line">#多行处理函数的特点：输入多行，最终输出的结果是1行。</span><br><span class="line">#分组函数自动忽略NULL , 并且也可以通过 as 重新命名</span><br></pre></td></tr></table></figure>

<p><strong>接下来，要开始挖坑了，问题如下：查询工资高于平均工资的员工名单？</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#我们知道我们学习了分组函数，有一个avg恰好可以求平均值</span><br><span class="line">#于是</span><br><span class="line">select ename , sal from emp where sal &gt; avg(sal);</span><br><span class="line">#看似这条语句逻辑没什么问题，执行过后却直接报错~~~</span><br><span class="line">#Why？</span><br><span class="line">#这里先不进行讲述和分析，我们先接着往下面讲</span><br></pre></td></tr></table></figure>





<h3 id="单行处理函数"><a href="#单行处理函数" class="headerlink" title="单行处理函数"></a>单行处理函数</h3><ul>
<li><strong>什么是单行处理函数？</strong></li>
</ul>
<p>&emsp;&emsp;输入一行，输出一行</p>
<ul>
<li><p><strong>计算每个员工的年薪？</strong></p>
<p><code>select ename , (sal + comm ) * 12 &#39;年薪&#39; from emp;</code></p>
<p>按下回车会发现，大部分人的年薪为 <code>NULL</code> ，辛辛苦苦干了一年，全白给了，23333.</p>
<p>这是因为只要有含有 <strong><code>NULL</code></strong> 值参与运算，结果都会是 **<code>NULL</code>**，那么如何解决呢？</p>
<p>这就需要我们的单行处理函数了：</p>
<ul>
<li><p><strong>ifnull()</strong></p>
<p>空处理函数. 如：comm（津贴）中有的值为空，意思其实就是0 ， 那么就是 <strong><code>ifnull(comm , 0)</code><strong>，意思就是如果comm的值为</strong><code>NULL</code></strong> 那么就用 0 代替这个值.</p>
</li>
</ul>
<p>所以上面这个问题的正确写法应该是：</p>
<p><strong><code>select ename , (sal + ifnull(comm , 0)) * 12 &#39;yearsal&#39; from emp;</code></strong></p>
</li>
</ul>
<p>类似的单行处理函数还有如下这些（且不局限于以下这些）：</p>
<table>
<thead>
<tr>
<th align="center">Lower</th>
<th align="center">转换小写</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>upper</strong></td>
<td align="center"><strong>转换大写</strong></td>
</tr>
<tr>
<td align="center"><strong>substr</strong></td>
<td align="center"><strong>取子串</strong>（**substr(被截取的字符串,起始下标,截取的长度)**）</td>
</tr>
<tr>
<td align="center"><strong>length</strong></td>
<td align="center"><strong>取长度</strong></td>
</tr>
<tr>
<td align="center"><strong>trim</strong></td>
<td align="center"><strong>去空格</strong></td>
</tr>
<tr>
<td align="center"><strong>str_to_date</strong></td>
<td align="center"><strong>将字符串转换成日期</strong></td>
</tr>
<tr>
<td align="center"><strong>date_format</strong></td>
<td align="center"><strong>格式化日期</strong></td>
</tr>
<tr>
<td align="center"><strong>format</strong></td>
<td align="center"><strong>设置千分位</strong></td>
</tr>
<tr>
<td align="center"><strong>round</strong></td>
<td align="center"><strong>四舍五入</strong></td>
</tr>
<tr>
<td align="center"><strong>rand()</strong></td>
<td align="center"><strong>生成随机数</strong></td>
</tr>
</tbody></table>
<h3 id="group-by-以及-having"><a href="#group-by-以及-having" class="headerlink" title="group by 以及 having"></a>group by 以及 having</h3><ul>
<li><p><strong>group by ： 按照某个字段或者某些字段进行分组</strong></p>
</li>
<li><p><strong>having :  having是对分组之后的数据进行再次过滤</strong></p>
<hr>
</li>
</ul>
<p><strong>注意：分组函数一般都会和group by联合使用，这也是为什么它被称为分组函数的原因.并且任何一个分组函数count sum avg max min）都是在group by语句执行结束之后才会执行的，当一条 <code>sql</code>语句没有group by的话，整张表的数据会自成一组。</strong></p>
<p>大致了解了是干什么的之后，现在先来讲一下，<code>sql</code> 语句的各个部分的执行顺序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select			5.对字段进行选择</span><br><span class="line">	xxx</span><br><span class="line">from			1.第一个执行,先确定处理哪一张表</span><br><span class="line">	xxx</span><br><span class="line">where			2.处理where条件</span><br><span class="line">	xxx</span><br><span class="line">group by		3.进行分组处理</span><br><span class="line">	xxx</span><br><span class="line">having			4.进行条件过滤</span><br><span class="line">	xxx</span><br><span class="line">order by		6.进行排序</span><br><span class="line">	xxx;</span><br></pre></td></tr></table></figure>

<p>还记得这个吗？ 接下来要开始填坑了</p>
<blockquote>
<p><strong>接下来，要开始挖坑了，问题如下：查询工资高于平均工资的员工名单？</strong></p>
</blockquote>
<p>我们再看一眼语句：</p>
<blockquote>
<p><code>select ename , sal from emp where sal &gt; avg(sal);</code></p>
</blockquote>
<p>通过上面说到的执行顺序可以发现 where 的执行顺序在group by 之前， where中 avg 的执行需要group by 之后才可以执行，故报错. </p>
<ul>
<li>找出每个部门的平均薪资，要求显示薪资大于2000的数据?</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#通过having进行过滤</span><br><span class="line">select deptno , avg(sal) from emp group by deptno having avg(sal) &gt; 2000;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ul>
<li><strong>通过group by 进行分组过后 ， select 的 只能是一个能够和分组过后存在对应关系的值.  比如安装部门编号deptno 进行分组 会分为四组，每一组中包含多个人的信息</strong></li>
</ul>
<img src="/2021/04/11/MySQL%EF%BC%88%E4%B8%80%EF%BC%89/2.png" class title="result">

<ul>
<li><strong>由于执行顺序可以知道，你需要查询的字段必须能够和分组一一对应，比如每个部门工资的最大值和每个部门工资的平均值</strong></li>
</ul>
<h3 id="查询去重—distinct"><a href="#查询去重—distinct" class="headerlink" title="查询去重—distinct"></a>查询去重—distinct</h3><ul>
<li><strong>查询有哪些工作岗位？</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#一般写法</span><br><span class="line">select job from emp ;</span><br><span class="line">#处理后会发现,会有重复的工作，不方便查看</span><br><span class="line">#于是开始考虑进行去重</span><br><span class="line">select distinct job from emp ;</span><br></pre></td></tr></table></figure>



<p><strong>注意：distinct 只能放在所有字段的最前面，如果包含多个字段，去重范围变大，表示多个字段不能完全一样而不是第一个字段不能重复.例如</strong><code>select distinct deptno , sal from emp ;</code><strong>表示过滤掉部门编号和工资都一样的人，错误写法如下（谨记 <code>distinct</code>只能出现在第一个字段的签名的）：</strong><code>select deptno , distinct sal from emp ; </code> </p>
<ul>
<li><strong>统计岗位数量？</strong></li>
</ul>
<p>&emsp;&emsp;<code>select count(distinct job) from emp;</code></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis（一）</title>
    <url>/2021/04/18/Mybatis%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="🍚初识Mybatis"><a href="#🍚初识Mybatis" class="headerlink" title="🍚初识Mybatis"></a>🍚初识Mybatis</h1><blockquote>
<p>&emsp;&emsp;MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录。</p>
</blockquote>
<p>&emsp;&emsp;MyBatis 是支持普通 SQL查询，<a href="https://baike.so.com/doc/2045557-2164405.html">存储过程</a>和高级映射的优秀<a href="https://baike.so.com/doc/7722506-7996601.html">持久层</a>框架。MyBatis 消除了几乎所有的<a href="https://baike.so.com/doc/2417290-2555569.html">JDBC</a>代码和参数的手工设置以及<a href="https://baike.so.com/doc/2123416-2246652.html">结果集</a>的检索。MyBatis 使用简单的 XML或注解用于配置和原始映射，将接口和 Java 的POJOs(Plain Ordinary Java Objects，普通的 Java对象)映射成数据库中的记录。</p>
<p>&emsp;&emsp;每个MyBatis应用程序主要都是使用SqlSessionFactory实例的，一个SqlSessionFactory实例可以通过SqlSessionFactoryBuilder获得。SqlSessionFactoryBuilder可以从一个xml配置文件或者一个预定义的配置类的实例获得。</p>
<p>&emsp;&emsp;用xml文件构建SqlSessionFactory实例是非常简单的事情。推荐在这个配置中使用类路径资源(classpath resource)，但你可以使用任何Reader实例，包括用文件路径或file://开头的url创建的实例。MyBatis有一个实用类—-Resources，它有很多方法，可以方便地从类路径及其它位置加载资源。</p>
<p><strong>简而言之：<code>Mybatis</code> 可以简化 <code>JDBC</code> 的代码，并且将 <code>SQL</code> 语句从 <code>Java </code> 代码中独立了出来，降低了代码的维护成本</strong></p>
<h1 id="🎃Mybatis的安装"><a href="#🎃Mybatis的安装" class="headerlink" title="🎃Mybatis的安装"></a>🎃Mybatis的安装</h1><p>&emsp;&emsp;可以在Maven中的远程仓库进行下载，具体地址如下:<strong><code>https://mvnrepository.com/</code></strong> ，这里可以选择最新的版本 <code>3.5.6</code> 复制其坐标，添加至 <code>pom.xml</code> 文件中即可，下面也给出了所需要的 <code>mysql</code>驱动包 ,以及 <code>maven</code> 的单元测试包.</p>
<ul>
<li><strong>项目创建小技巧：先创建好一个 <code>maven</code> 项目，将下方依赖写入，并进行安装下载，然后删除 <code>src</code> 目录，以此项目作为父项目，这样<code>pom.xml</code> 中的依赖会被子模块继承，这样就不需要频繁的导入依赖.接着，在该工程下创建我们所需要的测试 <code>module</code> 即可.</strong></li>
</ul>
<p><strong>Mybatis项目所需依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>&emsp;&emsp;接着在<code>src--&gt;main--&gt;resources--&gt;新建 mybatis-config.xml</code> ，并且加入以下代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">r<span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span>            <span class="comment">&lt;!--需要配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span>                  <span class="comment">&lt;!--需要配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span>        <span class="comment">&lt;!--需要配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span>        <span class="comment">&lt;!--需要配置--&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/BlogMapper.xml&quot;</span>/&gt;</span>    <span class="comment">&lt;!--需要配置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>${driver}</strong> ：<code>com.mysql.cj.jdbc.driver</code> 高版本的 <code>mysql</code> 需要添加 <code>cj</code> </li>
<li><strong>${url}</strong> ： <code>jdbc:mysql://localhost:3306/使用的数据库名?serverTimezone=UTC&quot;</code>  高版本的需要添加时区</li>
<li><strong>${username}</strong> ： 默认为 <code>root</code></li>
<li><strong>${password}</strong> : 懂的都懂</li>
<li><strong>resource</strong> ： 配置<code>Mapper.xml</code>文件 ，对此文件进行注册</li>
</ul>
<h1 id="🎉Mybatis初体验"><a href="#🎉Mybatis初体验" class="headerlink" title="🎉Mybatis初体验"></a>🎉Mybatis初体验</h1><p>先放出准备好的数据文件：</p>
<img src="/2021/04/18/Mybatis%EF%BC%88%E4%B8%80%EF%BC%89/1.png" class title="table">

<p>接下来开始编写：</p>
<ul>
<li><strong>Mybatis工具类的编写</strong></li>
</ul>
<p>首先： <code>src--&gt;main--&gt;java--&gt;新建utils包--&gt;Mybatisutils.java</code></p>
<p><strong>mybaits的工具类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mybatisutils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用Mybatis第一步: 获取 SqlsessionFactory对象</span></span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li><strong>创建实体类</strong></li>
</ul>
<p>在 <code>java</code> 包下创建 <code>pojo</code> 包 ，创建实体类 <code>User</code> , 定义私有属性，属性名与数据库中的字段名一一对应，并且对外提供 <code>get/set</code> 方法，以及有参构造方法和无参构造方法，并且重写 <code>tostring</code> 方法，创建如下.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li><strong>创建数据库访问对象</strong></li>
</ul>
<p>在 <code>java</code> 包下创建 <code>Dao</code> 包，创建数据库访问接口 <code>UserDao</code> ，并且定义抽象方法，<code>getUserList</code> ，返回值类型为 <code>List&lt;User&gt;</code> </p>
<p>具体如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里将 <code>UserDao</code> 更名为了 <code>UserMapper</code> 是为了统一跟配置文件中的 <code>Mapper</code> 注册标签一致.</p>
<ul>
<li><strong>数据库访问对象实现类</strong></li>
</ul>
<p>正常情况下，按照以前的操作，需要手动编写 <code>JDBC</code> 代码，进行数据库连接，十分冗杂，顺便回顾一下 <code>JDBC</code> 中常用的几个类：</p>
<p>结果集类：<code>ResultSet</code> ，连接类： <code>Connection</code> , 数据库操作对象类：<code>Statement</code> 以及防止 <code>SQL注入 </code> 的 <code>PreparedStatement</code></p>
<p>Mybatis为我们提供了一种更为简单的方式，编写<code>xml</code> 文件， 将 <code>SQL</code> 语句完全与 <code>Java</code> 代码分开 .</p>
<p>在 <code>Dao</code> 包下新建 <code>UserMapper.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;Dao.UserMapper&quot;</span>&gt;</span><span class="comment">&lt;!--此处填写文件位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--id中填写对应的接口中的方法resultType 中填写实体类的路径--&gt;</span></span><br><span class="line">        select * from bjpowernode.users  <span class="comment">&lt;!--具体的对应的SQL语句以及数据库中的哪一个表--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li><strong>创建测试类</strong></li>
</ul>
<p>在<code>test---&gt; Dao ---&gt; UserMapperTest</code> </p>
<p>编写以下内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> pojo.User;</span><br><span class="line"><span class="keyword">import</span> utils.Mybatisutils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获得SqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = Mybatisutils.getSqlSession();</span><br><span class="line">        <span class="comment">//获取实现类对象</span></span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; list = userMapper.getUserList();</span><br><span class="line">        <span class="keyword">for</span> (User user : list)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li><strong>点击测试即可</strong></li>
</ul>
<h1 id="🎁数据库的CRUD操作"><a href="#🎁数据库的CRUD操作" class="headerlink" title="🎁数据库的CRUD操作"></a>🎁数据库的CRUD操作</h1><p>接下来将演示数据库的四种基本操作.</p>
<p>前言： 在数据库操作对象的实现的映射文件中，最常用的莫过于 <code>select</code> 标签，接下来介绍常用属性</p>
<ul>
<li><strong><code>parameterType</code></strong> ：表示形式参数的数据的类型</li>
<li><strong><code>id</code></strong> ：对应接口的方法名</li>
<li><strong><code>resultType</code></strong> ：定义返回值的数据类型</li>
</ul>
<h2 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h2><ul>
<li><strong>接口中添加方法</strong></li>
</ul>
<p><code>UserMapper</code>的接口中新加入查询方法 <code>selectUserById</code>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">User <span class="title">selectUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>



<ul>
<li><strong>Mapper.xml文件中进行配置</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;pojo.User&quot;</span>&gt;</span></span><br><span class="line">      select * from bjpowernode.users where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li><strong>UserMapperTest中添加测试方法</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SelectUserByIdTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">       </span><br><span class="line">       SqlSession sqlSession = Mybatisutils.getSqlSession();</span><br><span class="line">       UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">       User u = userMapper.selectUserById(<span class="number">1</span>);</span><br><span class="line">       System.out.println(u);</span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h2 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h2><p><strong>注意：增加，修改，删除都需要提交事务才可以生效</strong></p>
<ul>
<li><strong>接口中添加方法</strong></li>
</ul>
<p>方式一：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">User <span class="title">selectUserByNP1</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name ,<span class="meta">@Param(&quot;pwd&quot;)</span> String pwd)</span></span>;</span><br></pre></td></tr></table></figure>

<p>方式二使用Map：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">User <span class="title">selectUserByNP2</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>



<ul>
<li><strong>Mapper.xml文件中进行配置</strong></li>
</ul>
<p>注意：如果形式参数有多个，可以用注解的方式进行添加多个 ，注解名需要和形式参数名保持一致.</p>
<p>方式一：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--    方式一:通过<span class="meta">@param</span>注解进行--&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;selectUserByNP1&quot;</span> resultType=<span class="string">&quot;pojo.User&quot;</span>&gt;</span><br><span class="line">        select * from bjpowernode.users where name = #&#123;name&#125; and pwd = #&#123;pwd&#125;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure>

<p>方式二：</p>
<p>本质上，<code>SQL</code> 语句中的 <code>#&#123;name&#125; / #&#123;pwd&#125;</code> 的命名是随意，只需保证，加入<code>Map</code> 集合的 <code>Key</code> 值与这个保持一一对应的关系即可.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--    方式二使用Map集合--&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;selectUserByNP2&quot;</span> parameterType=<span class="string">&quot;map&quot;</span> resultType=<span class="string">&quot;pojo.User&quot;</span>&gt;</span><br><span class="line">        select * from bjpowernode.users where name = #&#123;name&#125; and pwd = #&#123;pwd&#125;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure>



<ul>
<li><strong>UserMapperTest中添加测试方法</strong></li>
</ul>
<p>方式一：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SelectUserByNpTest01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = Mybatisutils.getSqlSession();</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    User u = userMapper.selectUserByNP1(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;qwe123456&quot;</span>);</span><br><span class="line">    System.out.println(u);</span><br><span class="line">    sqlsession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>方式二：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SelectUserByNpTest02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = Mybatisutils.getSqlSession();</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    Map&lt;String,Object&gt; map  = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;pwd&quot;</span>,<span class="string">&quot;qwe123456&quot;</span>);</span><br><span class="line">    User u = userMapper.selectUserByNP2(map);</span><br><span class="line">    System.out.println(u);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="增加操作"><a href="#增加操作" class="headerlink" title="增加操作"></a>增加操作</h2><ul>
<li><strong>接口中添加方法</strong></li>
</ul>
<p>返回值为包装类，否则会报空指针异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Integer <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Mapper.xml文件中进行配置</strong></li>
</ul>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--    进行数据库添加数据--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;pojo.User&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        insert into users (id,name,pwd) values (#</span><span class="template-variable">&#123;id&#125;</span><span class="xml"> , #</span><span class="template-variable">&#123;name&#125;</span><span class="xml"> , #</span><span class="template-variable">&#123;pwd&#125;</span><span class="xml">)</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>UserMapperTest中添加测试方法</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = Mybatisutils.getSqlSession();</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    User u = <span class="keyword">new</span> User(<span class="number">5</span>,<span class="string">&quot;王二&quot;</span>,<span class="string">&quot;987654321&quot;</span>);</span><br><span class="line">    Integer i = userMapper.addUser(u);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><ul>
<li><strong>接口中添加方法</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Integer <span class="title">deletUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Mapper.xml文件中进行配置</strong></li>
</ul>
<p>对于包装类和基本数据类型以及 <code>String</code>, <code>resultType以及parameterType</code> 可以不用写</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;select <span class="built_in">id</span>=<span class="string">&quot;deletUser&quot;</span> resultType=<span class="string">&quot;integer&quot;</span> &gt;</span><br><span class="line">    delete <span class="keyword">from</span> users <span class="keyword">where</span> <span class="built_in">id</span> = <span class="comment">#&#123;id&#125;</span></span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>UserMapperTest中添加测试方法</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deletUserTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = Mybatisutils.getSqlSession();</span><br><span class="line">    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    Integer i = userMapper.deletUser(<span class="number">4</span>);</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="🎉Bug记录"><a href="#🎉Bug记录" class="headerlink" title="🎉Bug记录"></a>🎉Bug记录</h1><p>1.<strong>java.io.IOException: Could not find resource Dao/UserMapper.xml</strong></p>
<p>​    一般为Dao目录下的mapper.xml文件没有被maven编译处理到target中的Dao目录下需要在pom中进行配置处理，使maven可以一同处理xml文件 , 在build标签下添加以下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>2.<strong>Invalid bound statement (not found): Dao.UserDao.getUserList</strong></p>
<p>​    可能为<code>数据库操作对象的实现（类）</code>（Mapper.xml）文件中 select 标签中id属性不为接口中的抽象方法名.</p>
<p>3.<strong>Type interface Dao.UserDao is not known to the MapperRegistry.</strong></p>
<p>​    可能为Mapper.xml 文件中的 namespace 填写错误.</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis(一):五大数据类型</title>
    <url>/2021/06/08/Redis%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="⛵NoSQL"><a href="#⛵NoSQL" class="headerlink" title="⛵NoSQL"></a>⛵NoSQL</h1><p>​    <code>NoSQL</code>，泛指非关系型的数据库。随着互联网<a href="https://baike.so.com/doc/7119987-7343121.html">web2.0</a>网站的兴起，传统的关系数据库在应付<code>web2.0</code>网站，特别是超大规模和高并发的<a href="https://baike.so.com/doc/3656419-3843163.html">SNS</a>类型的<code>web2.0</code>纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。<code>NoSQL</code>数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。</p>
<p>​        虽然<code>NoSQL</code>流行语火起来才短短一年的时间，但是不可否认，现在已经开始了第二代运动。尽管早期的堆栈代码只能算是一种实验，然而现在的系统已经更加的成熟、稳定。不过现在也面临着一个严酷的事实:技术越来越成熟–以至于原来很好的<code>NoSQL</code>数据存储不得不进行重写，也有少数人认为这就是所谓的2.0版本。这里列出一些比较知名的工具，可以为大数据建立快速、可扩展的存储库。</p>
<h2 id="NoSQL的应用场景"><a href="#NoSQL的应用场景" class="headerlink" title="NoSQL的应用场景"></a>NoSQL的应用场景</h2><ul>
<li><p>数据模型比较简单</p>
</li>
<li><p>需要灵活性更强的IT系统</p>
</li>
<li><p>对数据库性能要求较高</p>
</li>
<li><p>不需要高度的数据一致性</p>
</li>
</ul>
<p>如：商城网站中对商品数据频繁查询、对热搜商品的排行统计、订单超时问题、以及微信朋友圈（音频，视频）、验证码消息验证等</p>
<h1 id="🚋Redis"><a href="#🚋Redis" class="headerlink" title="🚋Redis"></a>🚋Redis</h1><ul>
<li><p>redis是一个内存型的数据库</p>
</li>
<li><p> Redis是一个高性能key/value内存型数据库</p>
</li>
<li><p> Redis支持丰富的数据类型 </p>
</li>
<li><p> Redis支持持久化 </p>
</li>
<li><p> Redis单线程,单进程（高版本也支持多线程）</p>
</li>
</ul>
<h2 id="Redis数据库相关指令"><a href="#Redis数据库相关指令" class="headerlink" title="Redis数据库相关指令"></a>Redis数据库相关指令</h2><h3 id="数据库操作指令"><a href="#数据库操作指令" class="headerlink" title="数据库操作指令"></a>数据库操作指令</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.Redis中库说明</span></span><br><span class="line"><span class="bullet">-</span> 使用redis的默认配置器动redis服务后,默认会存在16个库,编号从0-15</span><br><span class="line"><span class="bullet">-</span> 可以使用select 库的编号 来选择一个redis的库</span><br><span class="line"></span><br><span class="line"><span class="section"># 2.Redis中操作库的指令</span></span><br><span class="line"><span class="bullet">-</span> 清空当前的库  FLUSHDB</span><br><span class="line"><span class="bullet">-</span> 清空全部的库  FLUSHALL</span><br><span class="line"></span><br><span class="line"><span class="section"># 3.redis客户端显示中文</span></span><br><span class="line"><span class="bullet">-</span>	./redis-cli  -p 7000 --raw</span><br></pre></td></tr></table></figure>

<h3 id="操作key相关指令"><a href="#操作key相关指令" class="headerlink" title="操作key相关指令"></a>操作key相关指令</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.DEL指令</span></span><br><span class="line"><span class="bullet">-</span> 语法 :  DEL key [key ...] </span><br><span class="line"><span class="bullet">-</span> 作用 :  删除给定的一个或多个key 。不存在的key 会被忽略。</span><br><span class="line"><span class="bullet">-</span> 可用版本： &gt;= 1.0.0</span><br><span class="line"><span class="bullet">-</span> 返回值： 被删除key 的数量。 </span><br><span class="line"></span><br><span class="line"><span class="section"># 2.EXISTS指令</span></span><br><span class="line"><span class="bullet">-</span> 语法:  EXISTS key</span><br><span class="line"><span class="bullet">-</span> 作用:  检查给定key 是否存在。</span><br><span class="line"><span class="bullet">-</span> 可用版本： &gt;= 1.0.0</span><br><span class="line"><span class="bullet">-</span> 返回值： 若key 存在，返回1 ，否则返回0。</span><br><span class="line"></span><br><span class="line"><span class="section"># 3.EXPIRE</span></span><br><span class="line"><span class="bullet">-</span> 语法:  EXPIRE key seconds</span><br><span class="line"><span class="bullet">-</span> 作用:  为给定key 设置生存时间，当key 过期时(生存时间为0 )，它会被自动删除。</span><br><span class="line"><span class="bullet">-</span> 可用版本： &gt;= 1.0.0</span><br><span class="line"><span class="bullet">-</span> 时间复杂度： O(1)</span><br><span class="line"><span class="bullet">-</span> 返回值：设置成功返回1 。</span><br><span class="line"></span><br><span class="line"><span class="section"># 4.KEYS</span></span><br><span class="line"><span class="bullet">-</span> 语法 :  KEYS pattern</span><br><span class="line"><span class="bullet">-</span> 作用 :  查找所有符合给定模式pattern 的key 。</span><br><span class="line"><span class="bullet">-</span> 语法:</span><br><span class="line"><span class="code">	KEYS * 匹配数据库中所有key 。</span></span><br><span class="line"><span class="code">	KEYS h?llo 匹配hello ，hallo 和hxllo 等。</span></span><br><span class="line"><span class="code">	KEYS h*llo 匹配hllo 和heeeeello 等。</span></span><br><span class="line"><span class="code">	KEYS h[ae]llo 匹配hello 和hallo ，但不匹配hillo 。特殊符号用 &quot;\&quot; 隔开</span></span><br><span class="line"><span class="code">- 可用版本： &gt;= 1.0.0</span></span><br><span class="line"><span class="code">- 返回值： 符合给定模式的key 列表。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 5.MOVE</span></span><br><span class="line"><span class="code">- 语法 :  MOVE key db</span></span><br><span class="line"><span class="code">- 作用 :  将当前数据库的key 移动到给定的数据库db 当中。</span></span><br><span class="line"><span class="code">- 可用版本： &gt;= 1.0.0</span></span><br><span class="line"><span class="code">- 返回值： 移动成功返回1 ，失败则返回0 。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 6.PEXPIRE</span></span><br><span class="line"><span class="code">- 语法 :  PEXPIRE key milliseconds</span></span><br><span class="line"><span class="code">- 作用 :  这个命令和EXPIRE 命令的作用类似，但是它以毫秒为单位设置key 的生存时间，而不像EXPIRE 命令那样，以秒为单位。</span></span><br><span class="line"><span class="code">- 可用版本： &gt;= 2.6.0</span></span><br><span class="line"><span class="code">- 时间复杂度： O(1)</span></span><br><span class="line"><span class="code">- 返回值：设置成功，返回1  key 不存在或设置失败，返回0</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 7.PEXPIREAT</span></span><br><span class="line"><span class="code">- 语法 :  PEXPIREAT key milliseconds-timestamp</span></span><br><span class="line"><span class="code">- 作用 :  这个命令和EXPIREAT 命令类似，但它以毫秒为单位设置key 的过期unix 时间戳，而不是像EXPIREAT那样，以秒为单位。</span></span><br><span class="line"><span class="code">- 可用版本： &gt;= 2.6.0</span></span><br><span class="line"><span class="code">- 返回值：如果生存时间设置成功，返回1 。当key 不存在或没办法设置生存时间时，返回0 。(查看EXPIRE 命令获取更多信息)</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 8.TTL</span></span><br><span class="line"><span class="code">- 语法 :   TTL key</span></span><br><span class="line"><span class="code">- 作用 :   以秒为单位，返回给定key 的剩余生存时间(TTL, time to live)。</span></span><br><span class="line"><span class="code">- 可用版本： &gt;= 1.0.0</span></span><br><span class="line"><span class="code">- 返回值：</span></span><br><span class="line"><span class="code">	当key 不存在时，返回-2 。</span></span><br><span class="line"><span class="code">	当key 存在但没有设置剩余生存时间时，返回-1 。</span></span><br><span class="line"><span class="code">	否则，以秒为单位，返回key 的剩余生存时间。</span></span><br><span class="line"><span class="code">- Note : 在Redis 2.8 以前，当key 不存在，或者key 没有设置剩余生存时间时，命令都返回-1 。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 9.PTTL</span></span><br><span class="line"><span class="code">- 语法 :  PTTL key</span></span><br><span class="line"><span class="code">- 作用 :  这个命令类似于TTL 命令，但它以毫秒为单位返回key 的剩余生存时间，而不是像TTL 命令那样，以秒为单位。</span></span><br><span class="line"><span class="code">- 可用版本： &gt;= 2.6.0</span></span><br><span class="line"><span class="code">- 返回值： 当key 不存在时，返回-2 。当key 存在但没有设置剩余生存时间时，返回-1 。</span></span><br><span class="line"><span class="code">- 否则，以毫秒为单位，返回key 的剩余生存时间。</span></span><br><span class="line"><span class="code">- 注意 : 在Redis 2.8 以前，当key 不存在，或者key 没有设置剩余生存时间时，命令都返回-1 。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 10.RANDOMKEY</span></span><br><span class="line"><span class="code">- 语法 :  RANDOMKEY</span></span><br><span class="line"><span class="code">- 作用 :  从当前数据库中随机返回(不删除) 一个key 。</span></span><br><span class="line"><span class="code">- 可用版本： &gt;= 1.0.0</span></span><br><span class="line"><span class="code">- 返回值：当数据库不为空时，返回一个key 。当数据库为空时，返回nil 。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 11.RENAME</span></span><br><span class="line"><span class="code">- 语法 :  RENAME key newkey</span></span><br><span class="line"><span class="code">- 作用 :  将key 改名为newkey 。当key 和newkey 相同，或者key 不存在时，返回一个错误。当newkey 已经存在时，RENAME 命令将覆盖旧值。</span></span><br><span class="line"><span class="code">- 可用版本： &gt;= 1.0.0</span></span><br><span class="line"><span class="code">- 返回值： 改名成功时提示OK ，失败时候返回一个错误。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 12.TYPE</span></span><br><span class="line"><span class="code">- 语法 :  TYPE key</span></span><br><span class="line"><span class="code">- 作用 :  返回key 所储存的值的类型。</span></span><br><span class="line"><span class="code">- 可用版本： &gt;= 1.0.0</span></span><br><span class="line"><span class="code">- 返回值：</span></span><br><span class="line"><span class="code">	none (key 不存在)</span></span><br><span class="line"><span class="code">	string (字符串)</span></span><br><span class="line"><span class="code">	list (列表)</span></span><br><span class="line"><span class="code">	set (集合)</span></span><br><span class="line"><span class="code">	zset (有序集)</span></span><br><span class="line"><span class="code">	hash (哈希表)</span></span><br></pre></td></tr></table></figure>

<h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><h4 id="内存存储模型"><a href="#内存存储模型" class="headerlink" title="内存存储模型"></a>内存存储模型</h4><img src="/2021/06/08/Redis%EF%BC%88%E4%B8%80%EF%BC%89/1.png" class title="图片">



<h4 id="常用操作命令"><a href="#常用操作命令" class="headerlink" title="常用操作命令"></a>常用操作命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>set</td>
<td>设置一个key/value</td>
</tr>
<tr>
<td>get</td>
<td>根据key获得对应的value</td>
</tr>
<tr>
<td>mset</td>
<td>一次设置多个key value</td>
</tr>
<tr>
<td>mget</td>
<td>一次获得多个key的value</td>
</tr>
<tr>
<td>getset</td>
<td>获得原始key的值，同时设置新值</td>
</tr>
<tr>
<td>strlen</td>
<td>获得对应key存储value的长度</td>
</tr>
<tr>
<td>append</td>
<td>为对应key的value追加内容</td>
</tr>
<tr>
<td>getrange 索引0开始</td>
<td>截取value的内容</td>
</tr>
<tr>
<td>setex</td>
<td>设置一个key存活的有效期（秒）</td>
</tr>
<tr>
<td>psetex</td>
<td>设置一个key存活的有效期（毫秒）</td>
</tr>
<tr>
<td>setnx</td>
<td>存在不做任何操作,不存在添加</td>
</tr>
<tr>
<td>msetnx原子操作(只要有一个存在不做任何操作)</td>
<td>可以同时设置多个key,只有有一个存在都不保存</td>
</tr>
<tr>
<td>decr</td>
<td>进行数值类型的-1操作</td>
</tr>
<tr>
<td>decrby</td>
<td>根据提供的数据进行减法操作</td>
</tr>
<tr>
<td>Incr</td>
<td>进行数值类型的+1操作</td>
</tr>
<tr>
<td>incrby</td>
<td>根据提供的数据进行加法操作</td>
</tr>
<tr>
<td>Incrbyfloat</td>
<td>根据提供的数据加入浮点数</td>
</tr>
</tbody></table>
<h3 id="List类型"><a href="#List类型" class="headerlink" title="List类型"></a>List类型</h3><p>list 列表 相当于java中list 集合  特点  元素有序  且 可以重复</p>
<h4 id="内存存储模型-1"><a href="#内存存储模型-1" class="headerlink" title="内存存储模型"></a>内存存储模型</h4><img src="/2021/06/08/Redis%EF%BC%88%E4%B8%80%EF%BC%89/2.png" class title="图片">



<h4 id="常用操作指令"><a href="#常用操作指令" class="headerlink" title="常用操作指令"></a>常用操作指令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>lpush</td>
<td>将某个值加入到一个key列表头部</td>
</tr>
<tr>
<td>lpushx</td>
<td>同lpush,但是必须要保证这个key存在</td>
</tr>
<tr>
<td>rpush</td>
<td>将某个值加入到一个key列表末尾</td>
</tr>
<tr>
<td>rpushx</td>
<td>同rpush,但是必须要保证这个key存在</td>
</tr>
<tr>
<td>lpop</td>
<td>返回和移除列表左边的第一个元素</td>
</tr>
<tr>
<td>rpop</td>
<td>返回和移除列表右边的第一个元素</td>
</tr>
<tr>
<td>lrange</td>
<td>获取某一个下标区间内的元素</td>
</tr>
<tr>
<td>llen</td>
<td>获取列表元素个数</td>
</tr>
<tr>
<td>lset</td>
<td>设置某一个指定索引的值(索引必须存在)</td>
</tr>
<tr>
<td>lindex</td>
<td>获取某一个指定索引位置的元素</td>
</tr>
<tr>
<td>lrem</td>
<td>删除重复元素</td>
</tr>
<tr>
<td>ltrim</td>
<td>保留列表中特定区间内的元素</td>
</tr>
<tr>
<td>linsert</td>
<td>在某一个元素之前，之后插入新元素</td>
</tr>
</tbody></table>
<h3 id="Set类型"><a href="#Set类型" class="headerlink" title="Set类型"></a>Set类型</h3><p>特点: Set类型 Set集合 元素无序  不可以重复</p>
<h4 id="内存存储模型-2"><a href="#内存存储模型-2" class="headerlink" title="内存存储模型"></a>内存存储模型</h4><img src="/2021/06/08/Redis%EF%BC%88%E4%B8%80%EF%BC%89/3.png" class title="图片">



<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>sadd</td>
<td>为集合添加元素</td>
</tr>
<tr>
<td>smembers</td>
<td>显示集合中所有元素 无序</td>
</tr>
<tr>
<td>scard</td>
<td>返回集合中元素的个数</td>
</tr>
<tr>
<td>spop</td>
<td>随机返回一个元素 并将元素在集合中删除</td>
</tr>
<tr>
<td>smove</td>
<td>从一个集合中向另一个集合移动元素  必须是同一种类型</td>
</tr>
<tr>
<td>srem</td>
<td>从集合中删除一个元素</td>
</tr>
<tr>
<td>sismember</td>
<td>判断一个集合中是否含有这个元素</td>
</tr>
<tr>
<td>srandmember</td>
<td>随机返回元素</td>
</tr>
<tr>
<td>sdiff</td>
<td>去掉第一个集合中其它集合含有的相同元素</td>
</tr>
<tr>
<td>sinter</td>
<td>求交集</td>
</tr>
<tr>
<td>sunion</td>
<td>求和集</td>
</tr>
</tbody></table>
<h3 id="ZSet类型"><a href="#ZSet类型" class="headerlink" title="ZSet类型"></a>ZSet类型</h3><p>特点: 可排序的set集合  排序  不可重复 </p>
<p>ZSET 官方  可排序SET  sortSet   </p>
<h4 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h4><img src="/2021/06/08/Redis%EF%BC%88%E4%B8%80%EF%BC%89/4.png" class title="图片">



<h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>zadd</td>
<td>添加一个有序集合元素</td>
</tr>
<tr>
<td>zcard</td>
<td>返回集合的元素个数</td>
</tr>
<tr>
<td>zrange 升序 zrevrange 降序</td>
<td>返回一个范围内的元素</td>
</tr>
<tr>
<td>zrangebyscore</td>
<td>按照分数查找一个范围内的元素</td>
</tr>
<tr>
<td>zrank</td>
<td>返回排名</td>
</tr>
<tr>
<td>zrevrank</td>
<td>倒序排名</td>
</tr>
<tr>
<td>zscore</td>
<td>显示某一个元素的分数</td>
</tr>
<tr>
<td>zrem</td>
<td>移除某一个元素</td>
</tr>
<tr>
<td>zincrby</td>
<td>给某个特定元素加分</td>
</tr>
</tbody></table>
<h3 id="hash类型"><a href="#hash类型" class="headerlink" title="hash类型"></a>hash类型</h3><p>特点: value 是一个map结构 存在key value  key 无序的  </p>
<h4 id="内存模型-1"><a href="#内存模型-1" class="headerlink" title="内存模型"></a>内存模型</h4><img src="/2021/06/08/Redis%EF%BC%88%E4%B8%80%EF%BC%89/5.png" class title="图片">



<h4 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h4><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>hset</td>
<td>设置一个key/value对</td>
</tr>
<tr>
<td>hget</td>
<td>获得一个key对应的value</td>
</tr>
<tr>
<td>hgetall</td>
<td>获得所有的key/value对</td>
</tr>
<tr>
<td>hdel</td>
<td>删除某一个key/value对</td>
</tr>
<tr>
<td>hexists</td>
<td>判断一个key是否存在</td>
</tr>
<tr>
<td>hkeys</td>
<td>获得所有的key</td>
</tr>
<tr>
<td>hvals</td>
<td>获得所有的value</td>
</tr>
<tr>
<td>hmset</td>
<td>设置多个key/value</td>
</tr>
<tr>
<td>hmget</td>
<td>获得多个key的value</td>
</tr>
<tr>
<td>hsetnx</td>
<td>设置一个不存在的key的值</td>
</tr>
<tr>
<td>hincrby</td>
<td>为value进行加法运算</td>
</tr>
<tr>
<td>hincrbyfloat</td>
<td>为value加入浮点值</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring5(一)</title>
    <url>/2021/04/22/Spring5%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>前言：在我看来 ， 所有框架的产生都来自于对代码复用率以及提高开发效率和可拓展性以及高效性能为追求的，不管怎么说，就是为了提高效率，毕竟时间就是金钱~~</p>
</blockquote>
<h1 id="🎇初识Spring"><a href="#🎇初识Spring" class="headerlink" title="🎇初识Spring"></a>🎇初识Spring</h1><p>1、Spring是一个开源免费的框架 , 容器  .</p>
<p>2、Spring是一个轻量级的框架 , 非侵入式的 .</p>
<p><strong>3、控制反转 IoC  , 面向切面 Aop</strong></p>
<p>4、对事物的支持 , 对框架的支持</p>
<p>…….</p>
<p>一句话概括：</p>
<p><strong>Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器（框架）。</strong></p>
<p>Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式 .</p>
<p>组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下：</p>
<ul>
<li><strong>核心容器</strong>：核心容器提供 Spring 框架的基本功能。核心容器的主要组件是BeanFactory，它是工厂模式的实现。BeanFactory 使用<em>控制反转</em>（IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。</li>
<li><strong>Spring 上下文</strong>：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。</li>
<li><strong>Spring AOP</strong>：通过配置管理特性，Spring AOP 模块直接将面向切面的编程功能 , 集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理任何支持 AOP的对象。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖组件，就可以将声明性事务管理集成到应用程序中。</li>
<li><strong>Spring DAO</strong>：JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</li>
<li><strong>Spring ORM</strong>：Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。</li>
<li><strong>Spring Web 模块</strong>：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</li>
<li><strong>Spring MVC 框架</strong>：MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。</li>
</ul>
<h1 id="🎊控制反转-（IOC）"><a href="#🎊控制反转-（IOC）" class="headerlink" title="🎊控制反转 （IOC）"></a>🎊控制反转 （IOC）</h1><p>**什么是控制反转？在<code>Java</code> 中，创建一个对象我们通常通过直接 <code>new</code> 出相应的对象 ，这需要我们直接编写源代码.而控制反转就是将对象的创建以及创建什么对象判断交给第三方，不需要我们来判断，我们只需要从第三方取出即可，这就是根据具体需求进行创建对象，用 <code>OOP</code>（面向对象）的思想来说，就是将实现类进一步抽象化，使实现类更具有兼容性. 看了以下的例子再回过头看，就会明白了 **</p>
<p>新建一个空白的maven项目</p>
<blockquote>
<p>分析实现</p>
</blockquote>
<p>我们先用我们原来的方式写一段代码 .</p>
<p>1、先写一个UserDao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、再去写Dao的实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;获取用户数据&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、然后去写UserService的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、最后写Service的实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       userDao.getUser();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、测试一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">   UserService service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">   service.getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是我们原来的方式 , 开始大家也都是这么去写的对吧 . 那我们现在修改一下 .</p>
<p>把Userdao的实现类增加一个 .</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoMySqlImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;MySql获取用户数据&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>紧接着我们要去使用MySql的话 , 我们就需要去service实现类里面修改对应的实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoMySqlImpl();</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       userDao.getUser();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在假设, 我们再增加一个Userdao的实现类 .</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoOracleImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;Oracle获取用户数据&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么我们要使用Oracle , 又需要去service实现类里面修改对应的实现 . 假设我们的这种需求非常大 , 这种方式就根本不适用了, 甚至反人类对吧 , 每次变动 , 都需要修改大量代码 . 这种设计的耦合性太高了, 牵一发而动全身 .</p>
<p><strong>那我们如何去解决呢 ?</strong> </p>
<p>我们可以在需要用到他的地方 , 不去实现它 , 而是留出一个接口 , 利用set , 我们去代码里修改下 .</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="comment">// 利用set实现</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       userDao.getUser();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在去我们的测试类里 , 进行测试 ;</p>
<p>使用 <code>Spring</code> 过后，也不</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">   UserServiceImpl service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">   service.setUserDao( <span class="keyword">new</span> UserDaoMySqlImpl() );</span><br><span class="line">   service.getUser();</span><br><span class="line">   <span class="comment">//那我们现在又想用Oracle去实现呢</span></span><br><span class="line">   service.setUserDao( <span class="keyword">new</span> UserDaoOracleImpl() );</span><br><span class="line">   service.getUser();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大家发现了区别没有 ? 可能很多人说没啥区别 . 他们已经发生了根本性的变化 , 很多地方都不一样了 . 仔细去思考一下 , 以前所有东西都是由程序去进行控制创建 , 而现在是由我们自行控制创建对象 , 把主动权交给了调用者 . 程序不用去管怎么创建,怎么实现了 . 它只负责提供一个接口 .</p>
<p>这种思想 , 从本质上解决了问题 , 我们程序员不再去管理对象的创建了 , 更多的去关注业务的实现 . 耦合性大大降低 . 这也就是IOC的原型 !</p>
<h1 id="🎁Spring之配置文件"><a href="#🎁Spring之配置文件" class="headerlink" title="🎁Spring之配置文件"></a>🎁Spring之配置文件</h1><p>创建一个 <code>maven</code> 项目 ， 导入 <code>Spring</code>的依赖包 ， 这里选择导入一个依赖 <code>Spring</code>的包，因为 <code>Spring</code>的依赖包比较多，这样导入比较方便,下面给出依赖坐标：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>编写一个实体类 <code>User</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里运用了lombok简化开发顺带给出相关依赖</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">		&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">            &lt;version&gt;1.18.4&lt;/version&gt;</span></span><br><span class="line"><span class="comment">        &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String , Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Product product;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String pname;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>编写 <code>applicationContext.xml</code> 文本也就是<code>Spring</code>文件 ，也可以自己命名，在<code>idea</code>中需要进行如下设置：</li>
</ul>
<img src="/2021/04/22/Spring5%EF%BC%88%E4%B8%80%EF%BC%89/1.png" class title="图片">

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--bean就是java对象,由Spring创建和管理--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   id 是bean的标识符,要唯一,如果没有配置id,name就是默认标识符</span></span><br><span class="line"><span class="comment">   如果配置id,又配置了name,那么name是别名</span></span><br><span class="line"><span class="comment">   name可以设置多个别名,可以用逗号,分号,空格隔开</span></span><br><span class="line"><span class="comment">   如果不配置id和name,可以根据applicationContext.getBean(.class)获取对象;</span></span><br><span class="line"><span class="comment">   class是bean的全限定名=包名+类名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--可以取别名，在测试程序中可以通过别名来获取对象--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--name 也相当于是取别名 可以取多个 可以用很多符号进行分隔 如空格 逗号  分号等--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--class用于连接实体类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pojo.User&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--对属性进行赋值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;隔壁老王&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        Map属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;First&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试1ing&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;Second&quot;</span> <span class="attr">value</span>=<span class="string">&quot;测试2ing&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        数组--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        List--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>23333<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>66666<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        set--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        Product 对实体类进行初始化赋值--&gt;</span></span><br><span class="line">        			<span class="comment">&lt;!--ref指向一个bean（对象）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;product&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;addr&quot;</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!--Properties属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;年龄&quot;</span>&gt;</span>18<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;addr&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pojo.Product&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;num&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;pname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;书&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>进行测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        User user = (User) context.getBean(<span class="string">&quot;user2&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>输出</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User(</span><br><span class="line">    name=隔壁老王, age=<span class="number">18</span>, </span><br><span class="line">    map=&#123;First=测试1ing, Second=测试2ing&#125;, </span><br><span class="line">    product=Product(pname=书, price=<span class="number">100</span>, num=<span class="number">100</span>), </span><br><span class="line">    list=[<span class="number">23333</span>, <span class="number">66666</span>], </span><br><span class="line">    set=[LOL], </span><br><span class="line">    books=[西游记, 红楼梦],</span><br><span class="line">    properties=&#123;姓名=张三, 年龄=<span class="number">18</span>&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<p>若果含有多个配置文件可以使用<code>import导入</code>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;路径&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring5</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro(一):介绍与基本概念</title>
    <url>/2021/06/09/Shiro%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="🚧权限管理"><a href="#🚧权限管理" class="headerlink" title="🚧权限管理"></a>🚧权限管理</h2><h3 id="什么是权限管理"><a href="#什么是权限管理" class="headerlink" title="什么是权限管理"></a>什么是权限管理</h3><p>基本上涉及到用户参与的系统都要进行权限管理，权限管理属于系统安全的范畴，权限管理实现<code>对用户访问系统的控制</code>，按照安全规则或者<a href="http://baike.baidu.com/view/160028.htm">安全策略</a>控制用户可以访问而且只能访问自己被授权的资源。</p>
<p>权限管理包括用户<code>身份认证</code>和<code>授权</code>两部分，简称<code>认证授权</code>。对于需要访问控制的资源用户首先经过身份认证，认证通过后用户具有该资源的访问权限方可访问。</p>
<h3 id="什么是身份认证"><a href="#什么是身份认证" class="headerlink" title="什么是身份认证"></a>什么是身份认证</h3><p><code>身份认证</code>，就是判断一个用户是否为合法用户的处理过程。最常用的简单身份认证方式是系统通过核对用户输入的用户名和口令，看其是否与系统中存储的该用户的用户名和口令一致，来判断用户身份是否正确。对于采用<a href="http://baike.baidu.com/view/5628.htm">指纹</a>等系统，则出示指纹；对于硬件Key等刷卡系统，则需要刷卡。</p>
<h3 id="什么是授权"><a href="#什么是授权" class="headerlink" title="什么是授权"></a>什么是授权</h3><p><code>授权，即访问控制</code>，控制谁能访问哪些资源。主体进行身份认证后需要分配权限方可访问系统的资源，对于某些资源没有权限是无法访问的</p>
<hr>
<h2 id="🏁什么是shiro"><a href="#🏁什么是shiro" class="headerlink" title="🏁什么是shiro"></a>🏁什么是shiro</h2><blockquote>
<p><strong>Apache Shiro™</strong> is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the smallest mobile applications to the largest web and enterprise applications.  </p>
<p>Shiro 是一个功能强大且易于使用的Java安全框架，它执行身份验证、授权、加密和会话管理。使用Shiro易于理解的API，您可以快速轻松地保护任何应用程序—从最小的移动应用程序到最大的web和企业应用程序。</p>
</blockquote>
<p><code>Shiro是apache旗下一个开源框架，它将软件系统的安全认证相关的功能抽取出来，实现用户身份认证，权限授权、加密、会话管理等功能，组成了一个通用的安全认证框架。</code></p>
<hr>
<h2 id="🌎shiro的核心架构"><a href="#🌎shiro的核心架构" class="headerlink" title="🌎shiro的核心架构"></a>🌎shiro的核心架构</h2><img src="/2021/06/09/Shiro%EF%BC%88%E4%B8%80%EF%BC%89/1.png" class title="架构图">



<h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h3><p><code>Subject即主体</code>，外部应用与subject进行交互，subject记录了当前操作用户，将用户的概念理解为当前操作的主体，可能是一个通过浏览器请求的用户，也可能是一个运行的程序。    Subject在shiro中是一个接口，接口中定义了很多认证授相关的方法，外部程序通过subject进行认证授，而subject是通过SecurityManager安全管理器进行认证授权</p>
<h3 id="SecurityManager"><a href="#SecurityManager" class="headerlink" title="SecurityManager"></a>SecurityManager</h3><p><code>SecurityManager即安全管理器</code>，对全部的subject进行安全管理，它是shiro的核心，负责对所有的subject进行安全管理。通过SecurityManager可以完成subject的认证、授权等，实质上SecurityManager是通过Authenticator进行认证，通过Authorizer进行授权，通过SessionManager进行会话管理等。</p>
<p><code>SecurityManager是一个接口，继承了Authenticator, Authorizer, SessionManager这三个接口。</code></p>
<h3 id="Authenticator"><a href="#Authenticator" class="headerlink" title="Authenticator"></a>Authenticator</h3><p><code>Authenticator即认证器</code>，对用户身份进行认证，Authenticator是一个接口，shiro提供ModularRealmAuthenticator实现类，通过ModularRealmAuthenticator基本上可以满足大多数需求，也可以自定义认证器。</p>
<h3 id="Authorizer"><a href="#Authorizer" class="headerlink" title="Authorizer"></a>Authorizer</h3><p><code>Authorizer即授权器</code>，用户通过认证器认证通过，在访问功能时需要通过授权器判断用户是否有此功能的操作权限。</p>
<h3 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h3><p><code>Realm即领域</code>，相当于datasource数据源，securityManager进行安全认证需要通过Realm获取用户权限数据，比如：如果用户身份数据在数据库那么realm就需要从数据库获取用户身份信息。</p>
<ul>
<li>​    注意：不要把realm理解成只是从数据源取数据，在realm中还有认证授权校验的相关的代码。</li>
</ul>
<h3 id="SessionManager"><a href="#SessionManager" class="headerlink" title="SessionManager"></a>SessionManager</h3><p><code>sessionManager即会话管理</code>，shiro框架定义了一套会话管理，它不依赖web容器的session，所以shiro可以使用在非web应用上，也可以将分布式应用的会话集中在一点管理，此特性可使它实现单点登录。</p>
<h3 id="SessionDAO"><a href="#SessionDAO" class="headerlink" title="SessionDAO"></a>SessionDAO</h3><p><code>SessionDAO即会话dao</code>，是对session会话操作的一套接口，比如要将session存储到数据库，可以通过jdbc将会话存储到数据库。</p>
<h3 id="CacheManager"><a href="#CacheManager" class="headerlink" title="CacheManager"></a>CacheManager</h3><p><code>CacheManager即缓存管理</code>，将用户权限数据存储在缓存，这样可以提高性能。</p>
<h3 id="Cryptography"><a href="#Cryptography" class="headerlink" title="Cryptography"></a>Cryptography</h3><p>​    <code>Cryptography即密码管理</code>，shiro提供了一套加密/解密的组件，方便开发。比如提供常用的散列、加/解密等功能。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot（一）:Hello World</title>
    <url>/2021/05/05/SpringBoot%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="🎉SpringBoot为快速开发为生"><a href="#🎉SpringBoot为快速开发为生" class="headerlink" title="🎉SpringBoot为快速开发为生"></a>🎉SpringBoot为快速开发为生</h1><blockquote>
<p>前言：在学完 Spring + SpringMVC + Mybatis 之后进行了 SSM整合项目的搭建，搭建项目最花费时间的其实是在各种的配置文件上，比如mybatis-config.xml 和 Spring中的applicationContext.xml 以及 SpringMVC中 Web.xml 都有固定的文件头等等内容，每次写都还要去别处复制粘贴，难搞。光是建个文件之后的复制粘贴就已经让我头大了，最难搞的还是Spring中文件配置文件中一些小东西，比如：SqlsessionFactory 以及 dao 层自动接口扫描器，完全可以说是固定写法，SpringMVC的配置中需要配置视图解析器，以及事物处理器，web.xml中需要配置请求转发器和资源过滤，配置过程几乎完全面向复制粘贴，繁琐且冗杂，也非常容易出错，我整合的SSM的项目至今没有跑起来，Debug了一个多星期无果，从Gitee上扒下来别人的项目跑，能跑，我的就是跑不起来，那几天我真是做梦都在想配置文件哪里出错了QAQ</p>
</blockquote>
<p>接下，进入正题：</p>
<p>​        SpringBoot的出现就是为了解决以上问题，把配置简化到几乎没有，就连Tomcat都不需要我们自己去配置了，不得不说，SpringBoot永远滴神.接下来我将演示快速创建一个SpringBoot项目到启动的全过程.</p>
<p><strong>在此之前，介绍一下SpringBoot的相关特点：</strong></p>
<p>   1.<strong>创建独立的Spring应用程序</strong></p>
<ol start="2">
<li><p><strong>嵌入的Tomcat，无需部署WAR文件</strong></p>
</li>
<li><p><strong>简化Maven配置</strong></p>
</li>
<li><p><strong>自动配置Spring</strong></p>
</li>
<li><p><strong>提供生产就绪型功能，如指标，健康检查和外部配置</strong></p>
</li>
<li><p>**绝对没有代码生成并且对XML也没有配置要求 **</p>
</li>
</ol>
<hr>
<p>接下来体验一下咯：</p>
<ul>
<li>通过IDEA创建项目</li>
</ul>
<img src="/2021/05/05/SpringBoot%EF%BC%88%E4%B8%80%EF%BC%89/1.png" class title="creat">



<p>点击**<code>Next</code>**，下一步</p>
<img src="/2021/05/05/SpringBoot%EF%BC%88%E4%B8%80%EF%BC%89/2.png" class title="create">



<p>点击 <strong><code>Next</code></strong> ，下一步</p>
<img src="/2021/05/05/SpringBoot%EF%BC%88%E4%B8%80%EF%BC%89/3.png" class title="creat">





<p>点击 <strong><code>Next</code></strong> ，下一步，后面就是填写项目名称，这里就略过了，快进到创建后</p>
<img src="/2021/05/05/SpringBoot%EF%BC%88%E4%B8%80%EF%BC%89/4.png" class title="create">



<ul>
<li>接下来编写 <code>Controller</code> 层，注意，要在DemoApplication.java的同目录下创建包下的java文件或者java文件才能被扫描到</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示不会跳转JSP、HTML 而是直接将返回的内容写入 Http响应包中的响应体中,直接将内容呈现在页面中</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="comment">//@Controller</span></span><br><span class="line"><span class="comment">//@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpringBoot</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于建立请求URL和处理请求方法之间的对应关系，将该方法映射到这个url路径上</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Hello</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello SpringBoot !&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>接下来就可以直接启动项目了，SpringBoot不会自动打开浏览器，需要我们手动输入URL.</p>
<p>浏览器中输入 <code>localhost:8080/hello</code></p>
</li>
</ul>
<img src="/2021/05/05/SpringBoot%EF%BC%88%E4%B8%80%EF%BC%89/5.png" class title="create">



<p>会发现，从来到尾我们只需要在创建项目的时候需要进行配置，创建好后只需要编写业务逻辑即可运行.</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot(七):自定义条件注解</title>
    <url>/2021/06/23/SpringBoot%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    <content><![CDATA[<h1 id="🚗动态注入实现原理"><a href="#🚗动态注入实现原理" class="headerlink" title="🚗动态注入实现原理"></a>🚗动态注入实现原理</h1><p><code>SpringBoot</code>中的一大特色为自动配置(包括动态配置)，其底层实现原理依托于<code>springFramework</code>中的<code>condition</code>接口类，在<code>SpringBoot</code>的源码中，随处可见类似于<code>@ConditionalOnBean</code>这样类似的注解，其依赖的条件类为<code>OnBeanCondition</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用在类上 和 方法上</span></span><br><span class="line"><span class="meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span></span><br><span class="line">/运行时有效</span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="comment">//与javadoc文档有关</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">//当OnBeanCondition判断有效(返回true)时启用</span></span><br><span class="line"><span class="meta">@Conditional(OnBeanCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnBean &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类似的还有以下注解:</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">注解</th>
<th align="center">条件类</th>
<th align="center">返回true的条件</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">@ConditionalOnBean</td>
<td align="center">OnBeanCondition</td>
<td align="center">容器中有指定bean的时候为true</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">@ConditionalOnMissingBean</td>
<td align="center">OnBeanCondition</td>
<td align="center">容器中没有指定bean的时候为true</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">@ConditionalOnSingleCandidate</td>
<td align="center">OnBeanCondition</td>
<td align="center">容器中指定的bean只有一个时为true</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">@ConditionalOnClass</td>
<td align="center">OnClassCondition</td>
<td align="center">当类路径下有指定类的时候为true</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">@ConditionalOnMissingClass</td>
<td align="center">OnClassCondition</td>
<td align="center">当类路径下没有指定类的时候为true</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">@ConditionalOnProperty</td>
<td align="center">OnPropertyCondition</td>
<td align="center">当指定的属性有指定的值的时候为true</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">@ConditionalOnResource</td>
<td align="center">OnResourceCondition</td>
<td align="center">类路径有指定的值的时候为true</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">@ConditionalOnExpression</td>
<td align="center">OnExpressionCondition</td>
<td align="center">基于springEL表达式判断是否为true</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">@ConditionalOnJava</td>
<td align="center">OnJavaCondition</td>
<td align="center">基于Java版本进行判断，满足版本要求为true</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">@ConditionalOnNotWebApplication</td>
<td align="center">OnWebApplicationCondition</td>
<td align="center">当项目不是web项目的条件下为true</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">@ConditionalOnWebApplication</td>
<td align="center">OnWebApplicationCondition</td>
<td align="center">当项目时web项目的条件下为true</td>
</tr>
</tbody></table>
<p>一般情况下，我们还会在<code>application.properties</code>中进行一些配置，那么这是如何进行动态读取配置的呢？</p>
<p>那就要使用到<code>@ConditionalOnProperty 、@ConfigurationProperties</code> 等，在启动<code>SpringBoot</code>的时候会对配置文件进行扫描，如果扫描到对应的配置，则对这些配置进行加载，当然，这些配置也有部分也有需要存在默认值，哪怕不进行显示的配置，也可以进行加载配置.</p>
<h1 id="🏍自定义Conditon条件类"><a href="#🏍自定义Conditon条件类" class="headerlink" title="🏍自定义Conditon条件类"></a>🏍自定义Conditon条件类</h1><p>为什么需要自定义条件类？一来，可以加深对<code>SpringBoot</code>自动配置原理.二来，可以在业务需求中自己定制化配置，加快开发效率.总之，不管怎么样，尝试自己实现一遍其实也挺有意思的hhh.</p>
<ul>
<li>自定义接口类(本质上是为了进行类抽象，便于判断)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessagePrint</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>接口实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMessage</span> <span class="keyword">implements</span> <span class="title">MessagePrint</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;文件存在！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YourMessage</span> <span class="keyword">implements</span> <span class="title">MessagePrint</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;文件不存在！！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>condition条件类实现condition接口(用于进行条件判断)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, </span></span></span><br><span class="line"><span class="function"><span class="params">                           AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line">        		<span class="comment">//上下文.资源加载器.获取资源(&quot;资源名&quot;).是否存在</span></span><br><span class="line">        <span class="keyword">return</span> conditionContext.getResourceLoader().getResource(<span class="string">&quot;classpath:test.properties&quot;</span>).exists();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YourCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext,</span></span></span><br><span class="line"><span class="function"><span class="params">                           AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line">        		<span class="comment">//上下文.资源加载器.获取资源(&quot;资源名&quot;).是否存在</span></span><br><span class="line">        <span class="keyword">return</span> !conditionContext.getResourceLoader().getResource(<span class="string">&quot;classpath:test.properties&quot;</span>).exists();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>自动注入配置类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置类，表示注入ioc容器中，存在于配置文件的上下文</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//当MyCondition 判断为 true 的时候 向容器中注入 MyMessage</span></span><br><span class="line">    <span class="meta">@Conditional(MyCondition.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessagePrint <span class="title">myMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//当YourCondition 判断为 true 的时候 向容器中注入 YourMessage</span></span><br><span class="line">    <span class="meta">@Conditional(YourCondition.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessagePrint <span class="title">yourMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> YourMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//获取注解配置上下文</span></span><br><span class="line">      AnnotationConfigApplicationContext context;</span><br><span class="line">      <span class="comment">//获取条件配置类</span></span><br><span class="line">      context = <span class="keyword">new</span> AnnotationConfigApplicationContext(ConditionConfig.class);</span><br><span class="line">      <span class="comment">//获取接口类(这就是写接口的好处,不需要知道自定义类名是什么,只需要识别父类)</span></span><br><span class="line">      MessagePrint bean = context.getBean(MessagePrint.class);</span><br><span class="line">      System.out.println(bean.showMessage());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot(三):数据库连接池</title>
    <url>/2021/05/08/SpringBoot%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="🎡数据库连接池相关概念"><a href="#🎡数据库连接池相关概念" class="headerlink" title="🎡数据库连接池相关概念"></a>🎡数据库连接池相关概念</h1><ul>
<li><p><strong>什么是数据库连接池？</strong></p>
<p>​        数据库连接池可以用于管理对数据库的连接，用于存放和管理这些连接，当使用完这些连接之后会将连接还回池中而不是直接关闭掉，可以等待下次进行连接可以直接使用。</p>
</li>
<li><p><strong>为什么需要数据库连接池?</strong></p>
<p>​        在实际业务中，会存在对数据库的操作，如果每次操作都要进行一次数据库连接，那么消耗的内存和资源十分巨大，再加上高并发量，那么会导致性能下降，造成无法估计的损失.有了数据库连接池之后，可以动态的分配已经有的连接，可以动态控制连接数量，合理的分配连接，大大提高了使用率和运行效率.</p>
</li>
<li><p><strong>数据库连接池的底层原理？</strong></p>
<p>​        数据库连接池可以用 <code>Java</code> 中的集合对象来实现 ， 比如 <code>LinkedList</code> ，初始化数据库连接数为10个，依次加入 <code>LinkedList</code>  当需要执行 <code>SQL</code> 语句的时候，请求从集合中获得连接，先要判断目前是否有闲置的连接，如果有则返回给请求对象，本质就是将连接从集合中移除，使用完毕后重新加入集合等待请求也就是所谓的闲置状态，如果请求时恰好没有闲置的连接，则进入等待，超过等待时间后，抛出异常等待下一次请求.</p>
</li>
</ul>
<h1 id="🥽常见数据库连接池"><a href="#🥽常见数据库连接池" class="headerlink" title="🥽常见数据库连接池"></a>🥽常见数据库连接池</h1><p>常用的数据库连接池有如下四种：</p>
<table>
<thead>
<tr>
<th align="center">DBCP</th>
<th align="center">Tomcat内部集成</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>C3P0</strong></td>
<td align="center"><strong>性能较差架构复杂</strong></td>
</tr>
<tr>
<td align="center"><strong>Druid</strong></td>
<td align="center"><strong>SQL监控黑名单拦截性能卓越</strong></td>
</tr>
<tr>
<td align="center"><strong>HikariCP</strong></td>
<td align="center"><strong>性能最强稳定性较好screw内置使用</strong></td>
</tr>
</tbody></table>
<p>​        <code>SpringBoot</code>默认将<code>HikariCP</code>作为默认的数据库连接池.<code>Java</code> 常用于构建大型的 <code>Web</code> 项目，在存在高并发的情况下，必然要挑选一个性能极强的数据库连接池而<code>HikariCP</code>当之无愧为性能之王.</p>
<h1 id="✨SpringBoot中HikariCP配置"><a href="#✨SpringBoot中HikariCP配置" class="headerlink" title="✨SpringBoot中HikariCP配置"></a>✨SpringBoot中HikariCP配置</h1><p>1.<code>autoCommit</code><br>        自动提交从池中返回的连接，默认为<code>true</code>。</p>
<p>2.<code>connectionTimeout</code><br>        等待来自池的连接的最大毫秒数，默认为30000，如果小于250毫秒，则被重置回30秒。</p>
<p>3.<code>idleTimeout</code><br>        连接允许在池中闲置的最长时间，默认为600000，即10分钟。如果<code>idleTimeout</code>+1秒&gt;<code>maxLifetime</code> 且 <code>maxLifetime</code>&gt;0，则会被重置为0（代表永远不会退出）；如果<code>idleTimeout</code>!=0且小于10秒，则会被重置为10秒。只有当<code>minimumIdle</code>小于<code>maximumPoolSize</code>时，这个参数才生效，当空闲连接数超过<code>minimumIdle</code>，而且空闲时间超过<code>idleTimeout</code>，则会被移除。</p>
<p>4.<code>maxLifetime</code><br>        池中连接最长生命周期。默认为1800000，如果不等于0且小于30秒则会被重置回30分钟。</p>
<p>5.<code>minimumIdle</code><br>        控制连接池空闲连接的最小数量，当连接池空闲连接少于<code>minimumIdle</code>，而且总共连接数不大于<code>maximumPoolSize</code>时，<code>HikariCP</code>会尽力补充新的连接。为了性能考虑，不建议设置此值，而是让<code>HikariCP</code>把连接池当做固定大小的处理，默认<code>minimumIdle</code>与<code>maximumPoolSize</code>一样。当<code>minIdle</code>&lt;0或者<code>minIdle</code>&gt;<code>maxPoolSize</code>,则被重置为<code>maxPoolSize</code>，该值默认为10。</p>
<p>6.<code>maximumPoolSize</code><br>        池中最大连接数，包括闲置和使用中的连接。默认为10。如果<code>maxPoolSize</code>小于1，则会被重置。当<code>minIdle</code>&lt;=0被重置为<code>DEFAULT_POOL_SIZE</code>则为10;如果<code>minIdle</code>&gt;0则重置为<code>minIdle</code>的值。</p>
<p>7.<code>poolName</code><br>连接池的用户定义名称，主要出现在日志记录和JMX管理控制台中以识别池和池配置。默认为<code>HikariPool-1</code>。</p>
<p>8.<code>readOnly</code><br>从池中获取的连接是否默认处于只读模式。默认为<code>false</code>。</p>
<p>9.<code>connection-test-query</code><br>如果您的驱动程序支持<code>JDBC4</code>，我们强烈建议您不要设置此属性。这是针对不支持<code>JDBC4</code>的“传统”驱动程序<code>Connection.isValid() API</code>。这是在连接从池中获得连接以确认与数据库的连接仍然存在之前将要执行的查询。再一次，尝试运行没有此属性的池，如果您的驱动程序不符合<code>JDBC4</code>的要求，<code>HikariCP</code>将记录一个错误以告知您。 默认值：无</p>
<h1 id="🎊SpringBoot中Druid配置"><a href="#🎊SpringBoot中Druid配置" class="headerlink" title="🎊SpringBoot中Druid配置"></a>🎊SpringBoot中Druid配置</h1><p>1.纯配置文件配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 数据源配置</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment"># 连接池配置</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="comment"># 初始化大小，最小，最大</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment"># 配置获取连接等待超时的时间</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位毫秒</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 配置一个连接在池中最小生存时间</span></span><br><span class="line">      <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">sys_user</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 打开 PSCache，并且指定每个连接上 PSCache 的大小</span></span><br><span class="line">      <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment"># 配置监控统计拦截的 Filter，去掉后监控界面 SQL 无法统计，wall 用于防火墙</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">      <span class="comment"># 通过 connection-properties 属性打开 mergeSql 功能；慢 SQL 记录</span></span><br><span class="line">      <span class="attr">connection-properties:</span> <span class="string">druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000</span></span><br><span class="line">      <span class="comment"># 配置 DruidStatFilter</span></span><br><span class="line">      <span class="attr">web-stat-filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/*</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*</span></span><br><span class="line">      <span class="comment"># 配置 DruidStatViewServlet</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">        <span class="comment"># IP 白名单，没有配置或者为空，则允许所有访问</span></span><br><span class="line">        <span class="attr">allow:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">        <span class="comment"># IP 黑名单，若白名单也存在，则优先使用</span></span><br><span class="line">        <span class="attr">deny:</span> <span class="number">192.168</span><span class="number">.31</span><span class="number">.253</span></span><br><span class="line">        <span class="comment"># 禁用 HTML 中 Reset All 按钮</span></span><br><span class="line">        <span class="attr">reset-enable:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment"># 登录用户名/密码</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="number">123</span></span><br></pre></td></tr></table></figure>



<p>2.配置类版本：</p>
<p>​    配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="comment"># 数据源的其他配置</span></span><br><span class="line">        <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">        <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">        <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">        <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">        <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">        <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">        <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">        <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># 配置监控统计拦截的 filters，去掉后监控界面 sql 无法统计，&#x27;wall&#x27;用于防火墙</span></span><br><span class="line">        <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">        <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">        <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure>

<p>​    配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.WebStatFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">// 将所有前缀为spring.datasource下的配置项都加载DataSource中</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean&lt;Servlet&gt; <span class="title">druidServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 进行 druid 监控的配置处理</span></span><br><span class="line">        ServletRegistrationBean&lt;Servlet&gt; srb = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> StatViewServlet(), <span class="string">&quot;/druid/**&quot;</span>);</span><br><span class="line">        <span class="comment">// 白名单</span></span><br><span class="line">        srb.addInitParameter(<span class="string">&quot;allow&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        <span class="comment">// 黑名单</span></span><br><span class="line">        srb.addInitParameter(<span class="string">&quot;deny&quot;</span>, <span class="string">&quot;192.168.31.253&quot;</span>);</span><br><span class="line">        <span class="comment">// 用户名</span></span><br><span class="line">        srb.addInitParameter(<span class="string">&quot;loginUsername&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="comment">// 密码</span></span><br><span class="line">        srb.addInitParameter(<span class="string">&quot;loginPassword&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="comment">// 是否可以重置数据源</span></span><br><span class="line">        srb.addInitParameter(<span class="string">&quot;resetEnable&quot;</span>, <span class="string">&quot;false&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> srb;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean&lt;Filter&gt; <span class="title">filterRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean&lt;Filter&gt; frb = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">        frb.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">        <span class="comment">// 所有请求进行监控处理</span></span><br><span class="line">        frb.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        <span class="comment">// 排除名单</span></span><br><span class="line">        frb.addInitParameter(<span class="string">&quot;exclusions&quot;</span>, <span class="string">&quot;*.js,*.gif,*.jpg,*.css,/druid/*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> frb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动<code>SpringBoot</code>后可在 <code> http://localhost:8080/druid/login.html</code> 中查看监控信息.</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot(九):日志记录</title>
    <url>/2021/07/27/SpringBoot%EF%BC%88%E4%B9%9D%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Logback"><a href="#Logback" class="headerlink" title="Logback"></a>Logback</h1><p><code>logback</code> 与同类的日志框架相比效率似乎高将近 <code>10</code> 倍，有一说一，不管是否是，作为<code>SpringBoot</code>的御用日志框架，起码给予了<code>logback</code>性能一定的肯定的，后续也还会对其它常用的日志框架进行一定的了解.</p>
<ul>
<li><code>xml</code>配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒；当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- de<span class="doctag">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态，默认值为false。 --&gt;</span></span><br><span class="line">&lt;configuration</span><br><span class="line">        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">        xsi:noNamespaceSchemaLocation=&quot;http://www.padual.com/java/logback.xsd&quot;</span><br><span class="line">        debug=&quot;false&quot; scan=&quot;true&quot; scanPeriod=&quot;10 second&quot;&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置日志输出目录文件夹以及进行重命名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;ROOT&quot;</span> <span class="attr">value</span>=<span class="string">&quot;logs/&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置日志文件大小 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;FILESIZE&quot;</span> <span class="attr">value</span>=<span class="string">&quot;50MB&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置日志保留的时间，单位为天 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;MAXHISTORY&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 格式化输出日期 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">timestamp</span> <span class="attr">key</span>=<span class="string">&quot;DATETIME&quot;</span> <span class="attr">datePattern</span>=<span class="string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台打印 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 格式化日志输出：</span></span><br><span class="line"><span class="comment">             %-5level表示级别从左显示5个字符宽度，%d表示日期，%thread表示线程名，%m表示日志消息，%n是换行符</span></span><br><span class="line"><span class="comment">             %logger&#123;36&#125;表示logger是class的全名，36表示限制最长字符</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ERROR日志输出到文件  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ERROR&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %logger&#123;36&#125; - %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置当前日志文档输出的级别，只记录ERROR级别的日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置日志记录器的滚动策略，按日期和大小记录--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;ROOT&#125;%d/error.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;MAXHISTORY&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy</span><br><span class="line">                    class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>$&#123;FILESIZE&#125;<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- WARN日志输出到文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;WARN&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %logger&#123;36&#125; - %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>WARN<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;ROOT&#125;%d/warn.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;MAXHISTORY&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>$&#123;FILESIZE&#125;<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- INFO日志输出到文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;INFO&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %logger&#123;36&#125; - %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;ROOT&#125;%d/info.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;MAXHISTORY&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>$&#123;FILESIZE&#125;<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- DEBUG日志输出到文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;DEBUG&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %logger&#123;36&#125; - %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;ROOT&#125;%d/debug.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;MAXHISTORY&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy</span><br><span class="line">                    class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>$&#123;FILESIZE&#125;<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- TRACE日志输出到文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;TRACE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%-5level] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %logger&#123;36&#125; - %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>TRACE<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        &lt;rollingPolicy</span><br><span class="line">                class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;ROOT&#125;%d/trace.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>$&#123;MAXHISTORY&#125;<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy</span><br><span class="line">                    class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>$&#123;FILESIZE&#125;<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 输出sql相关日志，不需要可删除；additivity：是否向上级loger传递打印信息，默认是true--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis.spring&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.github.miemiedev.mybatis.paginator&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- logger设置输出到文件，输出级别为info --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;DEBUG&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ERROR&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;WARN&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;INFO&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;TRACE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>全局配置文件配置</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">classpath:logback.xml</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot(二):整合Mybatis</title>
    <url>/2021/05/06/SpringBoot%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="🎉SpringBoot-Mybatis整合"><a href="#🎉SpringBoot-Mybatis整合" class="headerlink" title="🎉SpringBoot-Mybatis整合"></a>🎉SpringBoot-Mybatis整合</h1><blockquote>
<p>前言：秉持着学技术先学会使用的再深入其底层原理的理念，接着上一篇文章的初体验，想必已经能够体会SpringBoot的强大了，接下来将接着继续体验了.</p>
</blockquote>
<p>​        值得一提的是，<code>SpringBoot</code> 的强大也在于可以跟各种框架或者插件整合，十分方便，大多只需要在 <code>pom.xml</code> 中引入坐标即可.当然了，这也是因为 <code>Java</code> 的生态太丰富了，什么样的工具都有，也正是因为这样，<code>Java</code> 程序员成长不容易啊，道阻且长.</p>
<p>接下来进入正题：</p>
<ul>
<li>创建项目，直接快进到对创建场景的选择</li>
</ul>
<img src="/2021/05/06/SpringBoot%EF%BC%88%E4%BA%8C%EF%BC%89/1.png" class title="create">



<ul>
<li><p>创建完毕后，不妨来看一下 <code>pom.xml</code> 中增加了哪里依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--JDBC--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--Mybatis-SpringBoot整合包，其中包含了Mybatis所需要的包--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">       <span class="comment">&lt;!--热部署工具--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">       <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>接下来规划项目目录</p>
</li>
</ul>
<img src="/2021/05/06/SpringBoot%EF%BC%88%E4%BA%8C%EF%BC%89/2.png" class title="create">



<ul>
<li>接下来先配置好数据库，先将 <code>IDEA</code> 与数据库连接一下，方便等等写实体类</li>
</ul>
<img src="/2021/05/06/SpringBoot%EF%BC%88%E4%BA%8C%EF%BC%89/3.png" class title="create">



<ul>
<li>配置数据库信息</li>
</ul>
<img src="/2021/05/06/SpringBoot%EF%BC%88%E4%BA%8C%EF%BC%89/4.png" class title="create">



<ul>
<li>在 <code>application.yml</code> 中配置数据库信息</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/bjpowernode?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">qwe123456</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#以下内容可以不配，就使用默认的数据库连接池也没有问题，这里只是为了顺带巩固一下druid的相关配置，以后会专门写文章来记录其配置信息</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="comment">#2.连接池配置</span></span><br><span class="line">      <span class="comment">#初始化连接池的连接数量 大小，最小，最大</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment">#配置获取连接等待超时的时间</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment">#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class="line">      <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">30000</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment"># 是否缓存preparedStatement，也就是PSCache  官方建议MySQL下建议关闭   个人建议如果想用SQL防火墙 建议打开</span></span><br><span class="line">      <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，&#x27;wall&#x27;用于防火墙</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">stat:</span></span><br><span class="line">          <span class="attr">merge-sql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">5000</span></span><br><span class="line">      <span class="comment">#3.基础监控配置</span></span><br><span class="line">      <span class="attr">web-stat-filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/*</span></span><br><span class="line">        <span class="comment">#设置不统计哪些URL</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;</span></span><br><span class="line">        <span class="attr">session-stat-enable:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">session-stat-max-count:</span> <span class="number">100</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">        <span class="attr">reset-enable:</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment">#设置监控页面的登录名和密码</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">qwe123456</span></span><br><span class="line">        <span class="comment">#deny: 192.168.1.100</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li><p>小Tips快速生成实体类</p>
<ul>
<li><p>选择需要创建实体类对应的表进行创建</p>
<img src="/2021/05/06/SpringBoot%EF%BC%88%E4%BA%8C%EF%BC%89/5.png" class title="create"></li>
</ul>
</li>
<li><p>创建好实体类后，接下来开始编写 <code>dao</code> 层</p>
</li>
</ul>
<p>这里直接使用了注解的方式，主要是因为 <code>SQL</code> 语句比较简单，如果有复杂查询，那么还是建议配置文件与注解相结合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.soucat.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.soucat.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里如果写@Repository则还要自己实现这个接口</span></span><br><span class="line"><span class="comment">//@Repository</span></span><br><span class="line"><span class="comment">//表明这是一个数据库操作对象接口类效果等价于写实现类</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from users&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from users where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="function">Users <span class="title">getUsersByID</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update users set name = #&#123;name&#125; , pwd = #&#123;pwd&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Integer <span class="title">updateUsers</span><span class="params">(Users users)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from users where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">Integer <span class="title">deleteUsersByID</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into users ( id , name , pwd ) values (#&#123;id&#125; , #&#123;name&#125; , #&#123;pwd&#125; )&quot;)</span></span><br><span class="line">    <span class="function">Integer <span class="title">insertUsers</span><span class="params">(Users users)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>那么 <code>dao</code> 层到此编写完毕.</p>
<ul>
<li><p>接下来开始编写 <code>Service </code> 层</p>
<p><code>sevice</code> 接口</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Users <span class="title">getUsersByID</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Integer <span class="title">updateUsers</span><span class="params">(Users users)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Integer <span class="title">deleteUsersByID</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Integer <span class="title">insertUsers</span><span class="params">(Users users)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>    sevice</code> 接口实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UsersService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UsersMapper usersMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Users&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> usersMapper.getUserList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Users <span class="title">getUsersByID</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> usersMapper.getUsersByID(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">updateUsers</span><span class="params">(Users users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> usersMapper.updateUsers(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">deleteUsersByID</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> usersMapper.deleteUsersByID(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">insertUsers</span><span class="params">(Users users)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> usersMapper.insertUsers(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>接下来编写 <code>controller</code> 层</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UsersService usersService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Users&gt; <span class="title">getUserList</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Users&gt; list = usersService.getUserList();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Users <span class="title">getUserByid</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> usersService.getUsersByID(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUsers</span><span class="params">(Users users)</span></span>&#123;</span><br><span class="line">        usersService.updateUsers(users);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Update Success!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        usersService.deleteUsersByID(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Delete Success!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/insert&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">insertUser</span><span class="params">(Users users)</span></span>&#123;</span><br><span class="line">        usersService.insertUsers(users);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Insert Success!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>到此就整合完毕咯，接下来就是进行测试了，当然了正常开发中还是得写一点测试一点，免得写完之后很难 <code>debug</code>.</p>
<p>经过测试，没有问题，全部正常运行，这里就不展示了hhh~~</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot(五):实现邮箱验证</title>
    <url>/2021/06/15/SpringBoot%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>前言：当下的业务背景中，存在许多需要保证用户数据安全的场景，在这些场景下，我们可以利用邮箱验证/手机短信验证的方式对用户身份进行审核，这大大提高了用户数据的安全性.在注册场景下，也可以利用这样的手段来阻止恶意注册.</p>
</blockquote>
<h1 id="🎃准备工作"><a href="#🎃准备工作" class="headerlink" title="🎃准备工作"></a>🎃准备工作</h1><p>再使用代码进行发送邮箱之前需要进行一些准备工作，具体如下：</p>
<h2 id="开启邮箱的功能服务"><a href="#开启邮箱的功能服务" class="headerlink" title="开启邮箱的功能服务"></a>开启邮箱的功能服务</h2><p>这里以QQ邮箱为例，我们需要开启<code>POP3/SMTP</code>服务、以及<code>IMAP/SMTP</code>服务.</p>
<img src="/2021/06/15/SpringBoot%EF%BC%88%E4%BA%94%EF%BC%89/1.png" class title="图片">

<img src="/2021/06/15/SpringBoot%EF%BC%88%E4%BA%94%EF%BC%89/2.png" class title="图片">

<p>开启过后，会告诉我们<strong>授权码</strong>，发送邮件时，我们需要通过这个授权码得到权限，从而发送邮件，保证邮箱的使用不被滥用侵犯，这个授权码要留着，等待后续使用.</p>
<h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><p>由于需要存储验证码，并且验证码存在时效性，于是这里使用了<code>Redis</code>来实现这个功能，于是也需要导入<code>Redis</code>的依赖.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--邮箱--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#  配置redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span> <span class="comment">#选择第一个数据库</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">xxxxxx</span> <span class="comment">#redis 服务器 ip 如果在本地就填 localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span> <span class="comment">#redis服务端口号默认 6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxxxxx</span> <span class="comment">#redis登录密码</span></span><br><span class="line"><span class="comment"># 配置邮箱</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span>  <span class="comment">#使用哪一个类型的邮箱的标识</span></span><br><span class="line">    <span class="attr">username:</span> <span class="number">3164297994</span><span class="string">@qq.com</span> <span class="comment">#发送者的邮箱</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxxxxxxxxxxx</span> <span class="comment">#POP3服务的授权码</span></span><br><span class="line">    <span class="attr">default-encoding:</span> <span class="string">utf-8</span> <span class="comment">#文本解析格式</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="🚘代码实现"><a href="#🚘代码实现" class="headerlink" title="🚘代码实现"></a>🚘代码实现</h1><ul>
<li>发送邮箱验证码的服务类编写</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//读取配置文件中的发件人</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span></span><br><span class="line">   	<span class="keyword">private</span> String from;</span><br><span class="line">    <span class="comment">//自动注入Java邮件发送对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender sender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送邮件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to 收信人邮箱</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title 信件标题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">(String to , String title , String code)</span></span>&#123;</span><br><span class="line">		SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">        message.setFrom(from); <span class="comment">//发件人邮箱</span></span><br><span class="line">        message.setTo(to); <span class="comment">//收件人邮箱</span></span><br><span class="line">        message.setSubject(title); <span class="comment">//邮件标题</span></span><br><span class="line">        message.setText(code);  <span class="comment">//邮件内容</span></span><br><span class="line">        sender.send(message);<span class="comment">//发送邮件</span></span><br><span class="line">        System.out.println(<span class="string">&quot;邮件发送成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>邮件发送的接口编写</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmailService emailService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/email&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">emailVertCode</span><span class="params">(<span class="meta">@RequestBody</span> JSONObject requestbody)</span></span>&#123;</span><br><span class="line">        JSONObject response = <span class="keyword">new</span> JSONObject(<span class="keyword">true</span>);</span><br><span class="line">        String username = requestbody.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String email = requestbody.getString(<span class="string">&quot;email&quot;</span>);</span><br><span class="line">        <span class="comment">//自定义的生成 6 位验证码的工具类</span></span><br><span class="line">        String code = VerificationCode.getCode();</span><br><span class="line">        emailService.sendSimple(email,<span class="string">&quot;验证码测试&quot;</span>,code);</span><br><span class="line">        <span class="comment">//将验证码存入redis</span></span><br><span class="line">        stringRedisTemplate.opsForHash().put( username , username ,code);</span><br><span class="line">        <span class="comment">//设置验证码的过期时间为 5 分钟</span></span><br><span class="line">        stringRedisTemplate.expire(username , <span class="number">5</span> ,TimeUnit.MINUTES);</span><br><span class="line">        response.put(<span class="string">&quot;code&quot;</span>,<span class="number">200</span>);</span><br><span class="line">        response.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;发送邮件成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> response.toJSONString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>附上自己写的验证码生成工具</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VerificationCode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> counts = <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">int</span> resCode = <span class="number">0</span>;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">while</span> (counts-- != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> i = random.nextInt(<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">while</span> (i == <span class="number">0</span> &amp;&amp; counts == <span class="number">5</span>) &#123;</span><br><span class="line">                i = random.nextInt(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) resCode *= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">else</span> resCode += (<span class="keyword">int</span>) (i * Math.pow(<span class="number">10</span>, <span class="number">5</span> - counts));</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">return</span> String.valueOf(resCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot(八):自定义starter</title>
    <url>/2021/06/24/SpringBoot%EF%BC%88%E5%85%AB%EF%BC%89/</url>
    <content><![CDATA[<h1 id="🚀SpringBoot-starter机制"><a href="#🚀SpringBoot-starter机制" class="headerlink" title="🚀SpringBoot starter机制"></a>🚀SpringBoot starter机制</h1><p><code>SpringBoot</code>中提供了大量开箱即用的<code>starter</code>，<code>starter</code>中配置了一定业务场景中所需要的依赖以及各种服务，让开发者摆脱了大量配置和依赖文件，让工程的整体结构更加优美而不臃肿，其具体实现依托于<code>SpringBoot</code>中自动配置原理，自动进行包扫描，既可以自定义配置，也可以使用默认配置.</p>
<h1 id="🏛自定义starter的命名规则"><a href="#🏛自定义starter的命名规则" class="headerlink" title="🏛自定义starter的命名规则"></a>🏛自定义starter的命名规则</h1><p><code>SpringBoot</code>提供的<code>starter</code>以<code>spring-boot-starter-xxx</code>的方式命名的。官方建议自定义的<code>starter</code>使用<code>xxx-spring-boot-starter</code>命名规则。以区分<code>SpringBoot</code>生态提供的<code>starter</code></p>
<h1 id="🎡自定义starter"><a href="#🎡自定义starter" class="headerlink" title="🎡自定义starter"></a>🎡自定义starter</h1><ul>
<li><p>创建一个<code>SpringBoot</code>项目</p>
<p>目录结构如下，删除<code>SpringBoot</code>启动类以及配置文件，可以选择性删掉<code>test</code>目录，再删除<code>pom.xml</code>中<code>plugins</code>，不然打包会报错.</p>
<p><img src="https://anthony-img-bed.oss-cn-beijing.aliyuncs.com/SpringBoot%EF%BC%88%E5%85%AB%EF%BC%89/2.png" alt="img"></p>
</li>
<li><p>引入相关依赖</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--拓展配置文件的格式--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!--必需--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>编写数据映射实体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以把.properties中获取.yaml中符号以下前缀的数据映射到本类中</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;com.anthony.starter&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String msg = <span class="string">&quot;默认值&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>编写service类: 用于对外提供服务</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>配置类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//向IOC容器中注册该类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//允许该类进行数据映射</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(MyProperties.class)</span></span><br><span class="line"><span class="comment">//当类路径下存在该类时再往IOC容器中进行注册</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(MyService.class)</span></span><br><span class="line"><span class="comment">//当配置文件中存在这些配置时，可以注入，如果未匹配到也可以注入，所以这一条写不写都行</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;com.anthony.starter&quot; , value = &quot;enabled&quot; , matchIfMissing = true )</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyProperties myProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyService <span class="title">myService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MyService myService = <span class="keyword">new</span> MyService()</span><br><span class="line">                .setMsg(myProperties.getMsg())</span><br><span class="line">                .setPassword(myProperties.getPassword())</span><br><span class="line">                .setUsername(myProperties.getUsername());</span><br><span class="line">        <span class="keyword">return</span> myService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>打包发布安装到本地仓库</li>
</ul>
<p><img src="https://anthony-img-bed.oss-cn-beijing.aliyuncs.com/SpringBoot%EF%BC%88%E5%85%AB%EF%BC%89/1.png" alt="img"></p>
<ul>
<li>引用时只需要像普通依赖一样引入就可以了，也可以直接复制当前项目中的项目坐标</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot(十):整合JWT</title>
    <url>/2021/08/09/SpringBoot%EF%BC%88%E5%8D%81%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>前言：断更了好几天，这几天在忙着搭建博客，这几天也十分难受，遇到了各种问题，不过都还是一一解决了，博客开发进度到了一个节点了，基本轮廓已经差不多了，于是今天打算重新开始更新了.  JWT 是个无状态的认证工具，所谓无状态就是无需使用<code>session</code> 在服务端进行存储认证信息进行认证，JWT其实很早就接触了，一直没有写，也用的少，这次写博客打算用一下，于是打算还是总结一下.</p>
</blockquote>
<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>起初博客的安全架构打算是使用<code>SpringSecurity</code> 以及 <code>Oauth2</code> 来进行认证和鉴权，但是<code>SpringSecurity</code> 的教程参差不齐，官方文档属实劝退，主要是我想要定制化一些自己的东西很难去实现，又是退而求其次，打算先使用<code>jwt</code>进行认证管理，后期打算自己手撸一个权限管理的框架，尝试自己写一个框架.</p>
<h1 id="为何使用JWT"><a href="#为何使用JWT" class="headerlink" title="为何使用JWT"></a>为何使用<code>JWT</code></h1><h2 id="基于传统的Session认证"><a href="#基于传统的Session认证" class="headerlink" title="基于传统的Session认证"></a>基于传统的Session认证</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.认证方式</span></span><br><span class="line"><span class="bullet">-</span> http协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie,以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了,这就是传统的基于session认证。</span><br><span class="line"><span class="section"># 2.认证流程</span></span><br></pre></td></tr></table></figure>

<img src="/2021/08/09/SpringBoot%EF%BC%88%E5%8D%81%EF%BC%89/1.png" class>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.暴露问题</span></span><br><span class="line"><span class="bullet">-</span> 1.每个用户经过应用认证之后，应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 2.用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上,这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 3.因为是基于cookie来进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 4.在前后端分离系统中就更加痛苦:如下图所示</span><br><span class="line"><span class="code">	也就是说前后端分离在应用解耦后增加了部署的复杂性。通常用户一次请求就要转发多次。如果用session 每次携带sessionid 到服务器，服务器还要查询用户信息。同时如果用户很多。这些信息存储在服务器内存中，给服务器增加负担。还有就是CSRF（跨站伪造请求攻	击）攻击，session是基于cookie进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。还有就是sessionid就是一个特征值，表达的信息不够丰富。不容易扩展。而且如果你后端应用是多节点部署。那么就需要实现session共享机制。不方便集群应用。</span></span><br></pre></td></tr></table></figure>

<img src="/2021/08/09/SpringBoot%EF%BC%88%E5%8D%81%EF%BC%89/2.png" class>

<h2 id="基于JWT认证"><a href="#基于JWT认证" class="headerlink" title="基于JWT认证"></a>基于JWT认证</h2><img src="/2021/08/09/SpringBoot%EF%BC%88%E5%8D%81%EF%BC%89/3.png" class>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.认证流程</span></span><br><span class="line"><span class="bullet">-</span> 首先，前端通过Web表单将自己的用户名和密码发送到后端的接口。这一过程一般是一个HTTP POST请求。建议的方式是通过SSL加密的传输（https协议），从而避免敏感信息被嗅探。</span><br><span class="line"><span class="bullet">-</span> 后端核对用户名和密码成功后，将用户的id等其他信息作为JWT Payload（负载），将其与头部分别进行Base64编码拼接后签名，形成一个JWT(Token)。形成的JWT就是一个形同lll.zzz.xxx的字符串。 token head.payload.singurater</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 后端将JWT字符串作为登录成功的返回结果返回给前端。前端可以将返回的结果保存在localStorage或sessionStorage上，退出登录时前端删除保存的JWT即可。</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 前端在每次请求时将JWT放入HTTP Header中的Authorization位。(解决XSS和XSRF问题) HEADER</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 后端检查是否存在，如存在验证JWT的有效性。例如，检查签名是否正确；检查Token是否过期；检查Token的接收方是否是自己（可选）。</span><br><span class="line"><span class="bullet">-</span> 验证通过后后端使用JWT中包含的用户信息进行其他逻辑操作，返回相应结果。</span><br><span class="line"></span><br><span class="line"><span class="section"># 2.jwt优势</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 简洁(Compact): 可以通过URL，POST参数或者在HTTP header发送，因为数据量小，传输速度也很快</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 自包含(Self-contained)：负载中包含了所有用户所需要的信息，避免了多次查询数据库</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 因为Token是以JSON加密的形式保存在客户端的，所以JWT是跨语言的，原则上任何web形式都支持。</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 不需要在服务端保存会话信息，特别适用于分布式微服务。</span><br></pre></td></tr></table></figure>

<h1 id="JWT的结构"><a href="#JWT的结构" class="headerlink" title="JWT的结构"></a>JWT的结构</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">token   string  ====&gt;  header.payload.singnature   token   </span><br><span class="line"></span><br><span class="line"><span class="section"># 1.令牌组成</span></span><br><span class="line"><span class="bullet">-</span> 1.标头(Header)</span><br><span class="line"><span class="bullet">-</span> 2.有效载荷(Payload)</span><br><span class="line"><span class="bullet">-</span> 3.签名(Signature)</span><br><span class="line"><span class="bullet">-</span> 因此，JWT通常如下所示:xxxxx.yyyyy.zzzzz   Header.Payload.Signature</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.Header</span></span><br><span class="line"><span class="bullet">-</span> 标头通常由两部分组成：令牌的类型（即JWT）和所使用的签名算法，例如HMAC SHA256或RSA。它会使用 Base64 编码组成 JWT 结构的第一部分。</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 注意:Base64是一种编码，也就是说，它是可以被翻译回原来的样子来的。它并不是一种加密过程。</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.Payload</span></span><br><span class="line"><span class="bullet">-</span> 令牌的第二部分是有效负载，其中包含声明。声明是有关实体（通常是用户）和其他数据的声明。同样的，它会使用 Base64 编码组成 JWT 结构的第二部分</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;admin&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 4.Signature</span></span><br><span class="line"><span class="bullet">-</span> 前面两部分都是使用 Base64 进行编码的，即前端可以解开知道里面的信息。Signature 需要使用编码后的 header 和 payload 以及我们提供的一个密钥，然后使用 header 中指定的签名算法（HS256）进行签名。签名的作用是保证 JWT 没有被篡改过</span><br><span class="line"><span class="bullet">-</span> 如:</span><br><span class="line"><span class="code">	HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload),secret);</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 签名目的</span></span><br><span class="line"><span class="code">- 最后一步签名的过程，实际上是对头部以及负载内容进行签名，防止内容被窜改。如果有人对头部以及负载的内容解码之后进行修改，再进行编码，最后加上之前的签名组合形成新的JWT的话，那么服务器端会判断出新的头部和负载形成的签名和JWT附带上的签名是不一样的。如果要对新的头部和负载进行签名，在不知道服务器加密时用的密钥的话，得出来的签名也是不一样的。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 信息安全问题</span></span><br><span class="line"><span class="code">- 在这里大家一定会问一个问题：Base64是一种编码，是可逆的，那么我的信息不就被暴露了吗？</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">- 是的。所以，在JWT中，不应该在负载里面加入任何敏感的数据。在上面的例子中，我们传输的是用户的User ID。这个值实际上不是什么敏	感内容，一般情况下被知道也是安全的。但是像密码这样的内容就不能被放在JWT中了。如果将用户的密码放在了JWT中，那么怀有恶意的第	三方通过Base64解码就能很快地知道你的密码了。因此JWT适合用于向Web应用传递一些非敏感信息。JWT还经常用于设计用户认证和授权系	统，甚至实现Web应用的单点登录。</span></span><br></pre></td></tr></table></figure>

<img src="/2021/08/09/SpringBoot%EF%BC%88%E5%8D%81%EF%BC%89/4.png" class>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 5.放在一起</span></span><br><span class="line"><span class="bullet">-</span> 输出是三个由点分隔的Base64-URL字符串，可以在HTML和HTTP环境中轻松传递这些字符串，与基于XML的标准（例如SAML）相比，它更紧凑。</span><br><span class="line"><span class="bullet">-</span> 简洁(Compact)</span><br><span class="line"><span class="code">	可以通过URL, POST 参数或者在 HTTP header 发送，因为数据量小，传输速度快</span></span><br><span class="line"><span class="code">- 自包含(Self-contained)</span></span><br><span class="line"><span class="code">	负载中包含了所有用户所需要的信息，避免了多次查询数据库</span></span><br></pre></td></tr></table></figure>



<h1 id="SpringBoot整合JWT"><a href="#SpringBoot整合JWT" class="headerlink" title="SpringBoot整合JWT"></a>SpringBoot整合JWT</h1><ul>
<li>引入依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入jwt--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.16.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>编写工具类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String TOKEN = <span class="string">&quot;xxxxxx&quot;</span>;</span><br><span class="line">    <span class="comment">//防止实例化工具类</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">JwtUtils</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  传入payload</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createToken</span><span class="params">(Map&lt;String,String&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建JWT生成类</span></span><br><span class="line">        JWTCreator.Builder builder = JWT.create();</span><br><span class="line">        <span class="comment">//添加payload用户信息</span></span><br><span class="line">        map.forEach((k,v)-&gt;&#123;</span><br><span class="line">            builder.withClaim(k,v);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//设置过期时间</span></span><br><span class="line">        Calendar instance = Calendar.getInstance();</span><br><span class="line">        instance.add(Calendar.MINUTE,<span class="number">60</span>);</span><br><span class="line">        builder.withExpiresAt(instance.getTime());</span><br><span class="line">        <span class="comment">//生成token</span></span><br><span class="line">        <span class="keyword">return</span> builder.sign(Algorithm.HMAC256(TOKEN)).toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证token并获取信息对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回携带的用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DecodedJWT <span class="title">verify</span><span class="params">(String token)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取解码后的JWT并返回可以获取payload的对象</span></span><br><span class="line">        DecodedJWT verify = JWT.require(Algorithm.HMAC256(TOKEN)).build().verify(token);</span><br><span class="line">        <span class="keyword">return</span> verify;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取JWT token中String信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verify 获取信息的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param 用户信息key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息value值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getTokenStrMsg</span><span class="params">(DecodedJWT verify , String param)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> verify.getClaim(param).asString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取JWT token中int信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verify 获取信息的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param 用户信息key值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息value值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTokenIntMsg</span><span class="params">(DecodedJWT verify,String param)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> verify.getClaim(param).asInt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>添加拦截器(用于对<code>token</code>进行验证)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtInterceptor</span> <span class="keyword">extends</span> <span class="title">WebContentInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;OPTIONS&quot;</span>.equals(request.getMethod().toUpperCase())) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Method:OPTIONS&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String token = request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;获取到的 token为: &#123;&#125;&quot;</span> , token);</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JwtUtils.verify(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException e) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;登录认证已经过期！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureVerificationException e)&#123;</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;签名错误!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlgorithmMismatchException e)&#123;</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;加密算法不匹配!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;无效认证权限!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>, <span class="number">500</span>);</span><br><span class="line">        map.put(<span class="string">&quot;state&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">        String json = <span class="keyword">new</span> ObjectMapper().writeValueAsString(map);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().println(json);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注册该拦截器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> JwtInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/util/**&quot;</span>,</span><br><span class="line">                                     <span class="string">&quot;/upload/image&quot;</span>,</span><br><span class="line">                                     <span class="string">&quot;/user/register&quot;</span>,</span><br><span class="line">                                     <span class="string">&quot;/user/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="前端设置默认请求头"><a href="#前端设置默认请求头" class="headerlink" title="前端设置默认请求头"></a>前端设置默认请求头</h1><ul>
<li>设置默认请求头(对应后端从请求头中拿出token)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装axios</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> http = axios.create(&#123;</span><br><span class="line">  <span class="comment">//请求url</span></span><br><span class="line">  baseURL: API.BASE_URL,</span><br><span class="line">  <span class="comment">//超时处理</span></span><br><span class="line">  timeout: <span class="number">3000</span>,</span><br><span class="line">  <span class="comment">// 默认请求头</span></span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">&#x27;Authorization&#x27;</span> : <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;token&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot(四):注解开发</title>
    <url>/2021/06/15/SpringBoot%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>可以说注解是SpringBoot的精髓，有着非常非常多的注解，这篇博客将持续更新我平时所用到的注解~~</p>
<p>当然了，这篇博客主要是为了作为一份备忘录，具体的底层解析，会另外写博客进行分析~</p>
</blockquote>
<h1 id="🎁类注解"><a href="#🎁类注解" class="headerlink" title="🎁类注解"></a>🎁类注解</h1><ul>
<li><code>@Component</code> ：当不明确类属于哪一层架构时，用于注册<code>Spring</code>组件.</li>
<li><code>@Repository</code> ：对应持久层即<code>Dao</code>层，主要用于数据库相关操作.</li>
<li><code>@Service</code> ：对应服务层，主要涉及一些复杂的逻辑，需要用到 <code>Dao </code>层.</li>
<li><code>@Controller</code> ：对应MVC 控制层，用户接受用户请求并调用 <code>Service </code>层返回数据给前端页面.</li>
<li><code>@RestController</code>：相较于<code>@Controller</code> 而言，限制了控制器中的方法返回值只能为<code>return</code>中内容本身</li>
<li><code>@SpringBootAplication</code>：用于标注SpringBoot启动类，也是启动自动配置扫描的注解</li>
<li><code>@SpringBootTest</code>：用于进行单元测试</li>
<li><code>@Configuration</code>：用于声明某个类为配置类，多用于<code>Spring</code>应用中，相当于在全局配置文件中进行相关配置</li>
<li><code>@SpringBootConfiguration</code>：更多的用于<code>SpringBoot</code>应用中，效果同<code>@Configuration</code></li>
<li><code>@ComponentScan</code>：使<code>SpringBoot</code>应用自动扫描<code>@SpringBootApplication</code>所在类的同级包以及它的子包中的配置</li>
<li><code>@EnableAutoConfiguration</code>：使<code>SpringBoot</code>根据当前应用项目的依赖进行相关的配置</li>
<li><code>@ConfigurationProperties(prefix = &quot;xxxx&quot;)</code>：用于读取配置文件中的数据</li>
<li><code>@PropertySource</code>：可以指定需要加载的配置文件，可以一个也可以多个(多个使用{}括起来即可)，读取数据需要使用<code>@Value</code></li>
</ul>
<h1 id="🎫方法注解"><a href="#🎫方法注解" class="headerlink" title="🎫方法注解"></a>🎫方法注解</h1><ul>
<li><code>@RequestMapping</code>：请求映射路径</li>
<li><code>@GetMapping</code>：<code>get</code>请求映射路径，只接受<code>get</code>请求</li>
<li><code>@PostMapping</code>: <code>post</code>请求映射路径，只接受<code>post</code>请求</li>
<li><code>@ResponseBody</code>: 当使用<code>@controller</code>的时候，在方法上加次注解等价于使用<code>@RestController</code></li>
<li><code>@Test</code>：标注测试方法，让方法可以独立运行</li>
</ul>
<h1 id="🎨属性注解"><a href="#🎨属性注解" class="headerlink" title="🎨属性注解"></a>🎨属性注解</h1><ul>
<li><code>@Value</code> : 用于读取配置文件中值</li>
<li><code>@Autowired</code>：用于自动注入<code>Spring IOC</code> 容器中的对象</li>
<li><code>@RequestBody</code>：只能用于获取<code>Post</code>请求中的请求体</li>
<li><code>@PathVarible</code>：用于获取<code>RESTful</code>风格的<code>get</code>请求参数</li>
<li><code>@RequestParam</code>：用于获取<code>post/get</code>请求方式的请求体中的数据，如果变量名不一致，可以手动配置</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud(一):核心概念及其架构</title>
    <url>/2021/07/29/SpringCloud%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="何为微服务"><a href="#何为微服务" class="headerlink" title="何为微服务"></a>何为微服务</h1><ul>
<li><a href="https://www.martinfowler.com/articles/microservices.html">官网</a></li>
</ul>
<p>In short, the microservice architectural(架构) style is an approach to developing a single application as <code>a suite(系列) of small services</code>, each <code>running in its own process(进程)</code> and communicating with lightweight mechanisms, often an HTTP resource API. These services are <code>built around business(业务) capabilities(单元)</code> and <code>independently(独立) deployable(部署)</code> by fully automated deployment machinery. <code>There is a bare(基于) minimum of centralized(分布式) management(管理) of these services</code>, which may be written in different programming languages and use different data storage technologies.                        —–[摘自官网]</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> a suite of small services                      				--一系列微小服务</span><br><span class="line"><span class="bullet">-</span> running in its own process                                    --运行在自己的进程里</span><br><span class="line"><span class="bullet">-</span> built around business capabilities                            --围绕自己的业务开发</span><br><span class="line"><span class="bullet">-</span> independently deployable                                      --独立部署</span><br><span class="line"><span class="bullet">-</span> bare minimum of centralized management of these services      --基于分布式管理</span><br></pre></td></tr></table></figure>

<ul>
<li>官方定义:<strong>微服务就是由一系列围绕自己业务开发的微小服务构成,他们独立部署运行在自己的进程里,基于分布式的管理</strong></li>
<li>通俗定义:<strong>微服务是一种架构，这种架构是将单个的整体应用程序分割成更小的项目关联的独立的服务。一个服务通常实现一组独立的特性或功能，包含自己的业务逻辑和适配器。各个微服务之间的关联通过暴露api来实现。这些独立的微服务不需要部署在同一个虚拟机，同一个系统和同一个应用服务器中。</strong></li>
</ul>
<h1 id="微服务的解决方案"><a href="#微服务的解决方案" class="headerlink" title="微服务的解决方案"></a>微服务的解决方案</h1><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.Dubbo (阿里系)</span></span><br><span class="line"><span class="bullet">-</span> 初出茅庐:2011年末，阿里巴巴在GitHub上开源了基于Java的分布式服务治理框架Dubbo，之后它成为了国内该类开源项目的佼佼者，许多开发者对其表示青睐。同时，先后有不少公司在实践中基于Dubbo进行分布式系统架构，目前在GitHub上，它的fork、star数均已破万。Dubbo致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案，使得应用可通过高性能RPC实现服务的输出、输入功能和Spring框架无缝集成。Dubbo包含远程通讯、集群容错和自动发现三个核心部分。</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 停止维护:从2012年10月23日Dubbo 2.5.3发布后，在Dubbo开源将满一周年之际，阿里基本停止了对Dubbo的主要升级。只在之后的2013年和2014年更新过2次对Dubbo 2.4的维护版本，然后停止了所有维护工作。Dubbo对Srping的支持也停留在了Spring 2.5.6版本上。</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 死而复生:多年漫长的等待，随着微服务的火热兴起，在国内外开发者对阿里不再升级维护Dubbo的吐槽声中，阿里终于开始重新对Dubbo的升级和维护工作。在2017年9月7日，阿里发布了Dubbo的2.5.4版本，距离上一个版本2.5.3发布已经接近快5年时间了。在随后的几个月中，阿里Dubbo开发团队以差不多每月一版本的速度开始快速升级迭代，修补了Dubbo老版本多年来存在的诸多bug，并对Spring等组件的支持进行了全面升级。</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 2018年1月8日，Dubbo创始人之一梁飞在Dubbo交流群里透露了Dubbo 3.0正在动工的消息。Dubbo 3.0内核与Dubbo 2.0完全不同，但兼容Dubbo 2.0。Dubbo 3.0将以Streaming为内核，不再是Dubbo 时代的RPC，但是RPC会在Dubbo 3.0中变成远程Streaming对接的一种可选形态。从Dubbo新版本的路线规划上可以看出，新版本的Dubbo在原有服务治理的功能基础上，将全面拥抱微服务解决方案。</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 结论:当前由于RPC协议、注册中心元数据不匹配等问题，在面临微服务基础框架选型时Dubbo与Spring Cloud是只能二选一，这也是为什么大家总是拿Dubbo和Spring Cloud做对比的原因之一。Dubbo之后会积极寻求适配到Spring Cloud生态，比如作为Spring Cloud的二进制通信方案来发挥Dubbo的性能优势，或者Dubbo通过模块化以及对http的支持适配到Spring Cloud。</span><br></pre></td></tr></table></figure>

<img src="/2021/07/29/SpringCloud%EF%BC%88%E4%B8%80%EF%BC%89/1.png" class>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Spring Cloud:</span></span><br><span class="line"><span class="bullet">-</span> Spring Cloud NetFlix  </span><br><span class="line"><span class="code">	基于美国Netflix公司开源的组件进行封装,提供了微服务一栈式的解决方案。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">- Spring Cloud alibaba</span></span><br><span class="line"><span class="code">	在Spring cloud netflix基础上封装了阿里巴巴的微服务解决方案。</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">- Spring Cloud Spring</span></span><br><span class="line"><span class="code">	目前spring官方趋势正在逐渐吸收Netflix组件的精华,并在此基础进行二次封装优化,打造spring专有的解决方案</span></span><br></pre></td></tr></table></figure>

<h1 id="何为SpringCloud"><a href="#何为SpringCloud" class="headerlink" title="何为SpringCloud"></a>何为SpringCloud</h1><h2 id="官方定义"><a href="#官方定义" class="headerlink" title="官方定义"></a>官方定义</h2><ul>
<li>官方网址: <a href="https://cloud.spring.io/spring-cloud-static/Hoxton.SR5/reference/html/">https://cloud.spring.io/spring-cloud-static/Hoxton.SR5/reference/html/</a></li>
</ul>
<p><strong>Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems</strong> (e.g. <code>configuration management</code>,<code> service discovery</code>, <code>circuit breakers, intelligent routing, micro-proxy, control bus</code>). Coordination of distributed systems leads to boiler plate patterns, and using Spring Cloud developers can quickly stand up services and applications that implement those patterns.  ——-[摘自官网]</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.翻译</span></span><br><span class="line"><span class="bullet">-</span> springcloud为开发人员提供了在分布式系统中快速构建一些通用模式的工具（例如配置管理、服务发现、断路器、智能路由、微代理、控制总线）。分布式系统的协调导致了锅炉板模式，使用springcloud开发人员可以快速地建立实现这些模式的服务和应用程序。</span><br><span class="line"></span><br><span class="line"><span class="section"># 2.通俗理解</span></span><br><span class="line"><span class="bullet">-</span> springcloud是一个含概多个子项目的开发工具集,集合了众多的开源框架,他利用了Spring Boot开发的便利性实现了很多功能,如服务注册,服务注册发现,负载均衡等.SpringCloud在整合过程中主要是针对Netflix(耐非)开源组件的封装.SpringCloud的出现真正的简化了分布式架构的开发。NetFlix 是美国的一个在线视频网站,微服务业的翘楚,他是公认的大规模生产级微服务的杰出实践者,NetFlix的开源组件已经在他大规模分布式微服务环境中经过多年的生产实战验证,因此Spring Cloud中很多组件都是基于NetFlix</span><br><span class="line">spring netflix 维护  闭源</span><br></pre></td></tr></table></figure>

<h2 id="核心架构及其组件"><a href="#核心架构及其组件" class="headerlink" title="核心架构及其组件"></a>核心架构及其组件</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.核心组件说明</span></span><br><span class="line"><span class="bullet">-</span> eurekaserver、consul、nacos  	 服务注册中心组件</span><br><span class="line"><span class="bullet">-</span> rabbion &amp; openfeign  			  服务负载均衡 和 服务调用组件</span><br><span class="line"><span class="bullet">-</span> hystrix &amp; hystrix dashboard     服务断路器  和  服务监控组件</span><br><span class="line"><span class="bullet">-</span> zuul、gateway 					 服务网关组件</span><br><span class="line"><span class="bullet">-</span> config 						  统一配置中心组件</span><br><span class="line"><span class="bullet">-</span> bus                             消息总线组件</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<img src="/2021/07/29/SpringCloud%EF%BC%88%E4%B8%80%EF%BC%89/2.png" class>

<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="版本命名"><a href="#版本命名" class="headerlink" title="版本命名"></a>版本命名</h2><ul>
<li>官网地址:<a href="https://spring.io/projects/spring-cloud">https://spring.io/projects/spring-cloud</a></li>
</ul>
<p>Spring Cloud is an umbrella(伞) project consisting of independent projects with, in principle, different release cadences. To manage the portfolio a BOM (Bill of Materials) is published with a curated set of dependencies on the individual project (see below). The release trains have names, not versions, to avoid confusion with the sub-projects. The names are an alphabetic sequence (so you can sort them chronologically) with names of London Tube stations (“Angel” is the first release, “Brixton” is the second). When point releases of the individual projects accumulate to a critical mass, or if there is a critical bug in one of them that needs to be available to everyone, the release train will push out “service releases” with names ending “.SRX”, where “X” is a number.     —[摘自官网]</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.翻译</span></span><br><span class="line"><span class="bullet">-</span> springcloud是一个由众多独立子项目组成的大型综合项目，原则每个子项目上有不同的发布节奏,都维护自己发布版本号。为了更好的管理springcloud的版本,通过一个资源清单BOM(Bill of Materials),为避免与子项目的发布号混淆，所以没有采用版本号的方式，而是通过命名的方式。这些名字是按字母顺序排列的。如伦敦地铁站的名称（“天使”是第一个版本，“布里斯顿”是第二个版本,&quot;卡姆登&quot;是第三个版本）。当单个项目的点发布累积到一个临界量，或者其中一个项目中有一个关键缺陷需要每个人都可以使用时，发布序列将推出名称以“.SRX”结尾的“服务发布”，其中“X”是一个数字。</span><br><span class="line"></span><br><span class="line"><span class="section"># 2.伦敦地铁站名称 </span></span><br><span class="line"><span class="bullet">-</span> Angel、Brixton、Camden、Dalston、Edgware、Finchley、Greenwich、Hoxton</span><br></pre></td></tr></table></figure>

<h2 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.版本选择官方建议 https://spring.io/projects/spring-cloud</span></span><br><span class="line"><span class="bullet">-</span> Angel 										版本基于springboot1.2.x版本构建与1.3版本不兼容</span><br><span class="line"><span class="bullet">-</span> Brixton										版本基于springboot1.3.x版本构建与1.2版本不兼容</span><br><span class="line"><span class="code">	`2017年Brixton and Angel release官方宣布报废</span></span><br><span class="line"><span class="code">- Camden      							版本基于springboot1.4.x版本构建并在1.5版本通过测试</span></span><br><span class="line"><span class="code">	`2018年Camden release官方宣布报废</span></span><br><span class="line"><span class="code">- Dalston、Edgware 				 版本基于springboot1.5.x版本构建目前不能再springboot2.0.x版本中使用</span></span><br><span class="line"><span class="code">	`Dalston(达尔斯顿)将于2018年12月官方宣布报废。Edgware将遵循Spring Boot 1.5.x的生命周期结束。</span></span><br><span class="line"><span class="code">- Finchley 									版本基于springboot2.0.x版本进行构建,不能兼容1.x版本</span></span><br><span class="line"><span class="code">- Greenwich									版本基于springboot2.1.x版本进行构建,不能兼容1.x版本</span></span><br><span class="line"><span class="code">- Hoxton									版本基于springboot2.2.x版本进行构建</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">Spring Cloud Dalston, Edgware, Finchley, and Greenwich have all reached end of life status and are no longer supported.</span></span><br></pre></td></tr></table></figure>

<img src="/2021/07/29/SpringCloud%EF%BC%88%E4%B8%80%EF%BC%89/3.png" class>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot(六):解决前后端分离跨域</title>
    <url>/2021/06/18/SpringBoot%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    <content><![CDATA[<h1 id="🚀什么是跨域？"><a href="#🚀什么是跨域？" class="headerlink" title="🚀什么是跨域？"></a>🚀什么是跨域？</h1><ul>
<li><strong>url的一般格式</strong>：</li>
</ul>
<p><font color="skyblue">协议 + 域名（子域名 + 主域名） + 端口号 + 资源地址</font></p>
<ul>
<li><strong>示例</strong>：</li>
</ul>
<p><a href="https://www.dustyblog.cn:8080/say/Hello">https://www.dustyblog.cn:8080/say/Hello</a> 是由</p>
<p>https + www + dustyblog.cn + 8080 + say/Hello组成。</p>
<blockquote>
<p>只要<font color="red">协议，子域名，主域名，端口号这四项组成部分中有一项不同</font>就可以认为是不同的域，不同的域之间互相访问资源，就被称之为跨域。</p>
</blockquote>
<p>前后端分离项目中，前端项目后端项目分别占用不同的端口号(这里只是针对个人开发而言，实际业务中不一定)从而导致了跨域问题</p>
<h1 id="🚑解决方案"><a href="#🚑解决方案" class="headerlink" title="🚑解决方案"></a>🚑解决方案</h1><p><strong>注意</strong>：解决方案既可以在前端解决也可以在后端解决，这里只讨论后端的解决方案.</p>
<h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><blockquote>
<p>解决跨域问题有多种全局配置的方案，接下来一一列举</p>
</blockquote>
<h3 id="配置方案一"><a href="#配置方案一" class="headerlink" title="配置方案一"></a>配置方案一</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsConfiguration <span class="title">corsConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CorsConfiguration corsConfiguration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">//实际请求中允许携带的首部字段</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//允许那些域跨域访问</span></span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//允许那些请求方法</span></span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> corsConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">(CorsConfiguration corsConfiguration)</span> </span>&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, corsConfiguration); <span class="comment">// 4</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="配置方案二"><a href="#配置方案二" class="headerlink" title="配置方案二"></a>配置方案二</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAllowConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//添加访问什么路径时需要配置跨域</span></span><br><span class="line">        <span class="comment">//此处配置所有路径</span></span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>) <span class="comment">//允许谁跨域,vue开启服务默认跑在8080</span></span><br><span class="line">                .allowedOrigins(<span class="string">&quot;http://localhost:8080&quot;</span>, <span class="string">&quot;null&quot;</span>)  <span class="comment">//允许谁跨域,vue开启服务默认跑在8080</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;GET&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>, <span class="string">&quot;DELETE&quot;</span>) <span class="comment">//设置需要进行配置的http请求方法</span></span><br><span class="line">                .maxAge(<span class="number">3600</span>) <span class="comment">//设置最大相应时间</span></span><br><span class="line">                .allowCredentials(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="CrossOrigin"><a href="#CrossOrigin" class="headerlink" title="@CrossOrigin"></a>@CrossOrigin</h2><p><code>@CrossOrigin</code> 用于<code>controller</code>类上，使用相对较为简单.</p>
<p>但是有坑：<code>CROS</code>复杂请求时会首先发送一个<code>OPTIONS</code>请求做嗅探，来测试服务器是否支持本次请求，请求成功后才会发送真实的请求；而<code>OPTIONS</code>请求不会携带任何数据，导致这个请求不符合我们拦截器的校验规则被拦截了，直接返回了状态码，响应头中也没携带解决跨域需要的头部信息，进而出现了跨域问题.</p>
<p>只需要重写<code>handler</code>中<code>preHandlr</code>并且加上下方代码即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">&quot;OPTIONS&quot;</span>.equals(request.getMethod().toUpperCase())) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Method:OPTIONS&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud(二):服务注册中心</title>
    <url>/2021/08/02/SpringCloud%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="服务注册中心"><a href="#服务注册中心" class="headerlink" title="服务注册中心"></a>服务注册中心</h1><p>所谓服务注册中心就是在整个的微服务架构中单独提出一个服务，这个服务不完成系统的任何的业务功能，仅仅用来完成对整个微服务系统的服务注册和服务发现，以及对服务健康状态的监控和管理功能。</p>
<img src="/2021/08/02/SpringCloud%EF%BC%88%E4%BA%8C%EF%BC%89/1.png" class>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.服务注册中心</span></span><br><span class="line"><span class="bullet">-</span> 可以对所有的微服务的信息进行存储，如微服务的名称、IP、端口等</span><br><span class="line"><span class="bullet">-</span> 可以在进行服务调用时通过服务发现查询可用的微服务列表及网络地址进行服务调用</span><br><span class="line"><span class="bullet">-</span> 可以对所有的微服务进行心跳检测，如发现某实例长时间无法访问，就会从服务注册表移除该实例。</span><br></pre></td></tr></table></figure>

<h2 id="常用的注册中心"><a href="#常用的注册中心" class="headerlink" title="常用的注册中心"></a>常用的注册中心</h2><p>springcloud支持的多种注册中心Eureka、Consul、Zookeeper、以及阿里巴巴推出Nacos。这些注册中心在本质上都是用来管理服务的注册和发现以及服务状态的检查的。</p>
<h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><h3 id="服务端搭建"><a href="#服务端搭建" class="headerlink" title="服务端搭建"></a>服务端搭建</h3><ul>
<li><strong>利用父项目进行依赖版本管理</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringCloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--继承springBoot父项目--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--控制版本号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.cloud-version</span>&gt;</span>2020.0.3<span class="tag">&lt;/<span class="name">spring.cloud-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用父项目来约束版本号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--springCloud--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.cloud-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span> <span class="comment">&lt;!--用于标识 springCloud中所用工具的版本--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>子模块引入依赖</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入服务注册中心 服务端依赖 EurekaServer--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>全局配置文件进行配置</strong></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#注册中心默认端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8761</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#服务注册中心地址 </span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone :</span> <span class="string">http://localhost:8761/eureka</span></span><br><span class="line">    <span class="comment"># 表示自己就是注册中心，不用注册自己</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 表示自己就是注册中心，不用去注册中心获取其他服务的地址,搭建注册中心集群时需要为 true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务名不区分大小写 不能用下划线</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Eureka-Server-01</span></span><br></pre></td></tr></table></figure>

<ul>
<li>开启<code>Eureka</code>服务端服务</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//开启当前服务为服务注册中心的服务端</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="客户端搭建"><a href="#客户端搭建" class="headerlink" title="客户端搭建"></a>客户端搭建</h3><p>**提示:**配置大多都相同，以下只列举不一样的</p>
<ul>
<li>依赖引入</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Eureka 客户端依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>配置文件中只需要将 <code>service-url中defaultZone</code>改为对应的服务端地址即可，如果是集群，使用 <code>,</code> 分隔写多个地址即可</p>
</li>
<li><p>开启<code>Eureka</code>客户端服务</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaClientApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="服务端集群搭建"><a href="#服务端集群搭建" class="headerlink" title="服务端集群搭建"></a>服务端集群搭建</h3><p>假如存在三个服务端，则需要将其中任何一个服务注册中心的服务地址注册到其它服务中心上即可，客户端若需要使用，则需要将所有注册中心的地址都进行注册.</p>
<h2 id="Consul"><a href="#Consul" class="headerlink" title="Consul"></a>Consul</h2><h3 id="安装下载"><a href="#安装下载" class="headerlink" title="安装下载"></a>安装下载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开发模式启动服务</span></span><br><span class="line">$ consul agent -dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定数据中心启动</span></span><br><span class="line">$ consul agent -dev -datacenter=consul</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启过后 localhost:8500 访问其ui界面</span></span><br><span class="line"><span class="comment"># 启动后默认会将服务本身进行注册</span></span><br></pre></td></tr></table></figure>



<h3 id="客户端编写"><a href="#客户端编写" class="headerlink" title="客户端编写"></a>客户端编写</h3><ul>
<li>引入依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Consul--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--检测心跳所需依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>全局属性配置</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8082</span></span><br><span class="line"><span class="comment">#指定注册中心ip</span></span><br><span class="line"><span class="meta">spring.cloud.consul.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="comment">#指定端口号</span></span><br><span class="line"><span class="meta">spring.cloud.consul.port</span>=<span class="string">8500</span></span><br><span class="line"><span class="comment">#指定服务注册时的名字</span></span><br><span class="line"><span class="meta">spring.cloud.consul.discovery.service-name</span>=<span class="string">consul-client-01</span></span><br><span class="line"><span class="comment">#健康检查</span></span><br><span class="line"><span class="meta">spring.cloud.consul.discovery.register-health-check</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#项目名字</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">consul_client</span></span><br></pre></td></tr></table></figure>

<ul>
<li>配置启动类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//开启注册服务中心服务 ， 通用注解</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConsulClientApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloud05ConsulClientApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="微服务间通信"><a href="#微服务间通信" class="headerlink" title="微服务间通信"></a>微服务间通信</h3><h4 id="使用RestTemplate"><a href="#使用RestTemplate" class="headerlink" title="使用RestTemplate"></a><strong>使用<code>RestTemplate</code></strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/demo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">product</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">        String res = restTemplate.getForObject(<span class="string">&quot;http://localhost:8082/demo&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">&quot;User Service调用 Product Service 结果为:&quot;</span> + res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>问题</strong>：</p>
<ol>
<li>地址写死，无法适配集群服务，无法实现负载均衡</li>
<li>如果服务端地址更改，客户端也需要更改，无法动态获取保持一致</li>
</ol>
<h4 id="RestTemplate负载均衡"><a href="#RestTemplate负载均衡" class="headerlink" title="RestTemplate负载均衡"></a><strong><code>RestTemplate</code>负载均衡</strong></h4><h5 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h5><ul>
<li><strong>使用 <code>Ribbon</code> 进行客户端负载均衡</strong></li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 使用restTemplate + ribbon进行服务调用</span></span><br><span class="line"><span class="bullet">-</span> 使用discovery client  进行客户端调用</span><br><span class="line"><span class="bullet">-</span> 使用loadBalanceClient 进行客户端调用</span><br><span class="line"><span class="bullet">-</span> 使用@loadBalanced     进行客户端调用</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.1 使用discovery Client形式调用</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取服务列表</span></span><br><span class="line">List&lt;ServiceInstance&gt; products = discoveryClient.getInstances(<span class="string">&quot;服务ID&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (ServiceInstance product : products) &#123;</span><br><span class="line">  log.info(<span class="string">&quot;服务主机:[&#123;&#125;]&quot;</span>,product.getHost());</span><br><span class="line">  log.info(<span class="string">&quot;服务端口:[&#123;&#125;]&quot;</span>,product.getPort());</span><br><span class="line">  log.info(<span class="string">&quot;服务地址:[&#123;&#125;]&quot;</span>,product.getUri());</span><br><span class="line">  log.info(<span class="string">&quot;====================================&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.2 使用loadBalance Client形式调用</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> LoadBalancerClient loadBalancerClient;</span><br><span class="line"><span class="comment">//根据负载均衡策略选取某一个服务调用</span></span><br><span class="line">ServiceInstance product = loadBalancerClient.choose(<span class="string">&quot;服务ID&quot;</span>);</span><br><span class="line">log.info(<span class="string">&quot;服务主机:[&#123;&#125;]&quot;</span>,product.getHost());</span><br><span class="line">log.info(<span class="string">&quot;服务端口:[&#123;&#125;]&quot;</span>,product.getPort());</span><br><span class="line">log.info(<span class="string">&quot;服务地址:[&#123;&#125;]&quot;</span>,product.getUri());</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.3 使用@loadBalanced</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.整合restTemplate + ribbon</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.调用服务位置注入RestTemplate</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"><span class="comment">//3.调用</span></span><br><span class="line">String forObject = restTemplate.getForObject(<span class="string">&quot;http://服务ID/hello/hello?name=&quot;</span> + name, String.class);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Ribbon负载均衡策略</strong></li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.ribbon负载均衡算法</span></span><br><span class="line"><span class="bullet">-</span> RoundRobinRule         		轮训策略	按顺序循环选择 Server</span><br><span class="line"><span class="bullet">-</span> RandomRule             		随机策略	随机选择 Server</span><br><span class="line"><span class="bullet">-</span> AvailabilityFilteringRule 可用过滤策略</span><br><span class="line"> 	`会先过滤由于多次访问故障而处于断路器跳闸状态的服务，还有并发的连接数量超过阈值的服务，然后对剩余的服务列表按照轮询策略进行访问</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> WeightedResponseTimeRule  响应时间加权策略   </span><br><span class="line"><span class="code">	`根据平均响应的时间计算所有服务的权重，响应时间越快服务权重越大被选中的概率越高，刚启动时如果统计信息不足，则使用		</span></span><br><span class="line"><span class="code">		RoundRobinRule策略，等统计信息足够会切换到</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">- RetryRule                 重试策略          </span></span><br><span class="line"><span class="code">	`先按照RoundRobinRule的策略获取服务，如果获取失败则在制定时间内进行重试，获取可用的服务。</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">- BestAviableRule           最低并发策略     </span></span><br><span class="line"><span class="code">	`会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务  </span></span><br></pre></td></tr></table></figure>

<img src="/2021/08/02/SpringCloud%EF%BC%88%E4%BA%8C%EF%BC%89/2.png" class>

<ul>
<li><strong>修改服务的默认负载均衡策略</strong></li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.修改服务默认随机策略</span></span><br><span class="line"><span class="bullet">-</span> 服务id.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule</span><br><span class="line"><span class="code">	`下面的products为服务的唯一标识</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">products.ribbon.NFLoadBalancerRuleClassName</span>=<span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure>

<img src="/2021/08/02/SpringCloud%EF%BC%88%E4%BA%8C%EF%BC%89/3.png" class>



<h4 id="使用OpenFeign"><a href="#使用OpenFeign" class="headerlink" title="使用OpenFeign"></a>使用OpenFeign</h4><ul>
<li>思考: 使用RestTemplate+ribbon已经可以完成对端的调用，为什么还要使用feign？</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String restTemplateForObject = restTemplate.getForObject(<span class="string">&quot;http://服务名/url?参数&quot;</span> + name, String.class);</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 存在问题:</span></span><br><span class="line"><span class="bullet">-</span> 1.每次调用服务都需要写这些代码,存在大量的代码冗余</span><br><span class="line"><span class="bullet">-</span> 2.服务地址如果修改,维护成本增高</span><br><span class="line"><span class="bullet">-</span> 3.使用时不够灵活</span><br></pre></td></tr></table></figure>

<h3 id="OpenFeign-组件"><a href="#OpenFeign-组件" class="headerlink" title="OpenFeign 组件"></a>OpenFeign 组件</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 0.说明</span></span><br><span class="line"><span class="bullet">-</span> https://cloud.spring.io/spring-cloud-openfeign/reference/html/</span><br><span class="line"><span class="bullet">-</span> Feign是一个声明式的伪Http客户端，它使得写Http客户端变得更简单。使用Feign，只需要创建一个接口并注解。它具有可插拔的注解特性(可以使用springmvc的注解)，可使用Feign 注解和JAX-RS注解。Feign支持可插拔的编码器和解码器。Feign默认集成了Ribbon，默认实现了负载均衡的效果并且springcloud为feign添加了springmvc注解的支持。</span><br></pre></td></tr></table></figure>

<h4 id="openFeign-服务调用"><a href="#openFeign-服务调用" class="headerlink" title="openFeign 服务调用"></a>openFeign 服务调用</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.服务调用方 引入依赖OpenFeign依赖</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Open Feign依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.入口类加入注解开启OpenFeign支持</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TagsApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TagsApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 3.创建一个客户端调用接口</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//value属性用来指定:调用服务名称</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CategoryService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/category&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">category</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 4. 相应的服务提供端需要存在相应接口</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/category&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">category</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请求以接入~~&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CategoryService Starter !&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/category1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findCategoryById</span><span class="params">(<span class="meta">@RequestParam</span> Integer id)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;id:&#123;&#125;&quot;</span> , id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;findCategoryById :&quot;</span> + id + <span class="string">&quot; 提供服务！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/category&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findCategory</span><span class="params">(<span class="meta">@RequestBody</span> JSONObject request)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;JSONObject &#123;&#125;&quot;</span> , request);</span><br><span class="line">        JSONObject response = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        response.put(<span class="string">&quot;code&quot;</span>, <span class="number">200</span>);</span><br><span class="line">        response.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;获取类别消息成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/category1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findCategoryByBean</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Category &#123;&#125;&quot;</span> , category.toString());</span><br><span class="line">        JSONObject response = <span class="keyword">new</span> JSONObject();</span><br><span class="line"></span><br><span class="line">        response.put(<span class="string">&quot;code&quot;</span>, <span class="number">200</span>);</span><br><span class="line">        response.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;获取类别消息成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Get请求"><a href="#Get请求" class="headerlink" title="Get请求"></a>Get请求</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.携带参数（注意 路径传参 和 问号后传参 均需要加上注解！）</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;CategoryService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/category1&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">category1</span><span class="params">(<span class="meta">@RequestParam</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/categoryList/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">categoryList</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Post请求"><a href="#Post请求" class="headerlink" title="Post请求"></a>Post请求</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.携带参数( 需要加上@RequestBody )</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;CategoryService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/category&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">category2</span><span class="params">(<span class="meta">@RequestBody</span> JSONObject request)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/category1&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">category3</span><span class="params">(<span class="meta">@RequestBody</span> Category category)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="OpenFeign超时设置"><a href="#OpenFeign超时设置" class="headerlink" title="OpenFeign超时设置"></a>OpenFeign超时设置</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 0.超时说明</span></span><br><span class="line"><span class="bullet">-</span> 默认情况下,openFiegn在进行服务调用时,要求服务提供方处理业务逻辑时间必须在1S内返回,如果超过1S没有返回则OpenFeign会直接报错,不会等待服务执行,但是往往在处理复杂业务逻辑是可能会超过1S,因此需要修改OpenFeign的默认服务调用超时时间。</span><br><span class="line"><span class="bullet">-</span> 调用超时会出现如下错误：</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.修改OpenFeign默认超时时间</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">feign.client.config.PRODUCTS.connectTimeout</span>=<span class="string">5000  		#配置指定服务连接超时</span></span><br><span class="line"><span class="meta">feign.client.config.PRODUCTS.readTimeout</span>=<span class="string">5000		  	#配置指定服务等待超时</span></span><br><span class="line"><span class="comment">#feign.client.config.default.connectTimeout=5000  		#配置所有服务连接超时</span></span><br><span class="line"><span class="comment">#feign.client.config.default.readTimeout=5000			#配置所有服务等待超时</span></span><br></pre></td></tr></table></figure>

<h4 id="OpenFeign调用详细日志展示"><a href="#OpenFeign调用详细日志展示" class="headerlink" title="OpenFeign调用详细日志展示"></a>OpenFeign调用详细日志展示</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 0.说明</span></span><br><span class="line"><span class="bullet">-</span> 往往在服务调用时我们需要详细展示feign的日志,默认feign在调用是并不是最详细日志输出,因此在调试程序时应该开启feign的详细日志展示。feign对日志的处理非常灵活可为每个feign客户端指定日志记录策略，每个客户端都会创建一个logger默认情况下logger的名称是feign的全限定名需要注意的是，feign日志的打印只会DEBUG级别做出响应。</span><br><span class="line"><span class="bullet">-</span> 我们可以为feign客户端配置各自的logger.lever对象，告诉feign记录那些日志logger.lever有以下的几种值</span><br><span class="line"><span class="code">	`NONE  不记录任何日志</span></span><br><span class="line"><span class="code">	`BASIC 仅仅记录请求方法，url，响应状态代码及执行时间</span></span><br><span class="line"><span class="code">	`HEADERS 记录Basic级别的基础上，记录请求和响应的header</span></span><br><span class="line"><span class="code">	`FULL 记录请求和响应的header，body和元数据</span></span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 1.开启日志展示</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">feign.client.config.PRODUCTS.loggerLevel</span>=<span class="string">full  #开启指定服务日志展示</span></span><br><span class="line"><span class="comment">#feign.client.config.default.loggerLevel=full  #全局开启服务日志展示</span></span><br><span class="line"><span class="meta">logging.level.com.baizhi.feignclients</span>=<span class="string">debug    #指定feign调用客户端对象所在包,必须是debug级别</span></span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 2.测试服务调用查看日志</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC：流程分析概览</title>
    <url>/2021/05/06/SpringMVC%EF%BC%9A%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90%E6%A6%82%E8%A7%88/</url>
    <content><![CDATA[<h1 id="🎈SpringMVC简介"><a href="#🎈SpringMVC简介" class="headerlink" title="🎈SpringMVC简介"></a>🎈SpringMVC简介</h1><p>​        <code>SpringMVC</code> 显然是由 <code>Spring</code> 以及 <code>MVC</code> 俩部分组成，先说说 <code>Spring</code> 那当然就是指 <code>Spring Framework</code> 框架了，前面的文章已经介绍过了相关的基础知识，这里就相当于在 <code>Spring</code> 中使用<code>MVC</code> 架构，当然了这里讨论应用于在 <code>Web</code> 开发之中.</p>
<p>​        接下来简单介绍一下 <code>MVC</code> 架构以及 <code>Web </code> 开发中的三层架构，也可能是我理解浅显，在我看我 <code>MVC</code> 架构与 <code>Web</code> 中经典的三层结构十分相似，目的都是为了代码解耦合、以及高可维护性.</p>
<ul>
<li><p><code>MVC(MODEL-VIEW-CONTROLLER)</code> 即 模型-视图-控制</p>
<ul>
<li><p><code>MODEL</code> : 属于处理业务逻辑的部分，相当于三层架构中的 <code>service、dao</code> 层，可以对数据库进行直接操作，储存业务核心逻辑.</p>
</li>
<li><p><code>VIEW</code> : 属于向用户展示的部分, <code>MODEL</code> 层处理完之后返回的数据交给 <code>CONTROLLER </code> 层，再交由 <code>VIEW</code> 层，从而呈现相应的页面.</p>
</li>
<li><p><code>CONTROLLER</code> ：属于连接<code>MODEL</code> 与 <code>VIEW</code> 的部分，相当于<code>Servlet</code> 中的存储的映射关系，起到了<code>Servlet</code>的作用，将<code>MODLE</code> 与</p>
<p><code>VIEW</code> 解耦合.</p>
</li>
</ul>
</li>
</ul>
<p>用一张图来概括：</p>
<p>​                                        <img src="https://img-blog.csdnimg.cn/20181030204359635.png" alt="MVC"></p>
<p>​        而 <code>SpringMVC</code> 简化了 <code>JavaWeb</code> 的开发，将<code>Servlet</code> 的相关配置简化了许多 ，只需要配置一个 <code>请求转发控制器DispatcherServlet</code> 以及 <code>资源视图解析器ResourceViewResolver</code> 即可，有效提高了开发效率.</p>
<hr>
<h1 id="✨SpringMVC执行概览"><a href="#✨SpringMVC执行概览" class="headerlink" title="✨SpringMVC执行概览"></a>✨SpringMVC执行概览</h1><img src="/2021/05/06/SpringMVC%EF%BC%9A%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90%E6%A6%82%E8%A7%88/1.png" class title="流程图">



<p>流程分析：</p>
<ol>
<li>用户发起请求，通过web容器中通过 <code>DispathcerServlet</code> 的映射路径将请求交给 <code>DispathcerServlet</code> 处理.</li>
<li><code>DispatcherServlet</code>通过处理器映射器（ <code>HandlerMapping</code> ）获取请求信息对应的处理器执行链.</li>
<li><code>DispatcherServlet</code> 将执行链交给处理器适配器（ <code>HandlerAdapter</code> ）然后其调用相应的处理器（<code>Handler </code>）执行</li>
<li>最终返回处理结果到 <code>DispatcherServlet</code></li>
<li><code>DispatcherServlet</code> 将结果交给视图解析器（<code>ViewResolver</code>）解析视图，随后返回解析后的View对象</li>
<li><code>DispatcherServlet</code>再将View对象进行视图渲染最后返回给用户呈现出页面</li>
</ol>
<blockquote>
<h2 id="组件说明："><a href="#组件说明：" class="headerlink" title="组件说明："></a>组件说明：</h2><ul>
<li><h3 id="DispatcherServlet：前端控制器"><a href="#DispatcherServlet：前端控制器" class="headerlink" title="DispatcherServlet：前端控制器"></a><code>DispatcherServlet</code>：前端控制器</h3></li>
</ul>
<p>​      <strong>用户请求到达前端控制器，它就相当于<code>mvc</code>模式中的<code>c</code>，<code>dispatcherServlet</code>是整个流程控制的中心，</strong></p>
<p>​      <strong>由它调用其它组件处理用户的请求，<code>dispatcherServlet</code>的存在降低了组件之间的耦合性。</strong></p>
<ul>
<li><h3 id="HandlerMapping：处理器映射器"><a href="#HandlerMapping：处理器映射器" class="headerlink" title="HandlerMapping：处理器映射器"></a><code>HandlerMapping</code>：处理器映射器</h3></li>
</ul>
<p>　　　<code>HandlerMapping</code>负责根据用户请求<code>url</code>找到<code>Handler</code>即处理器，<code>springmvc</code>提供了不同的映射器实现不同的映射方式，</p>
<p>　　  <strong>例如：配置文件方式，实现接口方式，注解方式等。</strong></p>
<ul>
<li><h3 id="Handler：处理器"><a href="#Handler：处理器" class="headerlink" title="Handler：处理器"></a><code>Handler</code>：处理器</h3></li>
</ul>
<p>　　 <strong><code>Handler</code> 是继 <code>DispatcherServlet </code>前端控制器的后端控制器，在 <code>DispatcherServlet </code>的控制下 <code>Handler</code>对具体的用户请求进行处理。</strong></p>
<p>​    <strong>由于 <code>Handler </code>涉及到具体的用户业务请求，所以一般情况需要程序员根据业务需求开发Handler。</strong></p>
<ul>
<li><h3 id="HandlAdapter-：处理器适配器"><a href="#HandlAdapter-：处理器适配器" class="headerlink" title="HandlAdapter ：处理器适配器"></a><code>HandlAdapter </code>：处理器适配器</h3></li>
</ul>
<p>　　<strong>通过<code>HandlerAdapter</code>对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</strong></p>
<ul>
<li><h3 id="ViewResolver：视图解析器"><a href="#ViewResolver：视图解析器" class="headerlink" title="ViewResolver：视图解析器"></a><code>ViewResolver</code>：视图解析器</h3></li>
</ul>
<p>　　<strong>View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，</strong></p>
<p>　　<strong>再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。</strong></p>
<ul>
<li><h3 id="View：视图"><a href="#View：视图" class="headerlink" title="View：视图"></a><code>View</code>：视图</h3></li>
</ul>
<p>　　<strong><code>springmvc</code>框架提供了很多的View视图类型的支持，包括：<code>jstlView、freemarkerView、pdfView</code>等。我们最常用的视图就是<code>jsp</code>。</strong></p>
<p>　　一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity(一):访问认证与身份授权</title>
    <url>/2021/07/10/SpringSecurity%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>前言：好久没有更新了，忙完了期末考试然后背好了行囊回了家，现在终于可以好好的更新一下博客了，毕竟需要整理的东西还有很多没有整理，果然程序员这条道路就是，越学越觉得自己越菜，活到老，学到老hhh.</p>
</blockquote>
<h1 id="🚓SpringSecurity简介"><a href="#🚓SpringSecurity简介" class="headerlink" title="🚓SpringSecurity简介"></a>🚓SpringSecurity简介</h1><p>&emsp;&emsp;<code>spring security </code>是基于<code>spring </code>的安全框架。它提供全面的安全性解决方案，同时在Web请求级和方法调用级处理身份确认和授权。在<code>Spring Framework</code>基础上,<code>spring security </code>充分利用了依赖注入（DI )和面向切面编程（AOP)功能，为应用系统提供声明式的安全访问控制功能，减少了为企业系统安全控制编写大量重复代码的工作。是一个轻量级的安全框架。它与<code>Spring MVC</code>有很好地集成.</p>
<h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><p>( 1 ) <strong>认证</strong>（你是谁，用户/设备/系统)</p>
<p>( 2 ) <strong>验证</strong>（你能干什么，也叫权限控制/授权，允许执行的操作)</p>
<h2 id="基本实现原理"><a href="#基本实现原理" class="headerlink" title="基本实现原理"></a>基本实现原理</h2><p>基于 <code>Filter</code> , <code>Servlet</code> ,<code>AOP</code> 实现身份认证和权限验证.</p>
<h1 id="🏰配置文件中配置用户"><a href="#🏰配置文件中配置用户" class="headerlink" title="🏰配置文件中配置用户"></a>🏰配置文件中配置用户</h1><ul>
<li>在<code>application.properties</code>中配置</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.security.user.name</span>=<span class="string">xxx</span></span><br><span class="line"><span class="meta">spring.security.user.password</span>=<span class="string">xxxx</span></span><br></pre></td></tr></table></figure>

<h2 id="关闭登陆认证"><a href="#关闭登陆认证" class="headerlink" title="关闭登陆认证"></a>关闭登陆认证</h2><p>在启动类注解中将自动配置去除加载即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//关闭安全验证</span></span><br><span class="line"><span class="meta">@SpringBootApplication(exclude = SecurityAutoConfiguration.class)</span></span><br></pre></td></tr></table></figure>



<h1 id="🛰内存中配置用户"><a href="#🛰内存中配置用户" class="headerlink" title="🛰内存中配置用户"></a>🛰内存中配置用户</h1><ul>
<li><p>继承<code>WebSecurityConfigurerAdapter</code></p>
<ul>
<li><p>重写 <code>protected void configure(AuthenticationManagerBuilder auth)</code>.</p>
</li>
<li><p>开启方法级别授权<code>@EnableGlobalMethodSecurity(prePostEnabled = true)</code></p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="comment">//  启用方法级别的认证</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder; <span class="comment">//用于对密码进行加密(必须的，否则无法存储到内容中)</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .password(passwordEncoder.encode(<span class="string">&quot;123456&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;normal&quot;</span>);</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">                .password(passwordEncoder.encode(<span class="string">&quot;123&quot;</span>))</span><br><span class="line">                .roles(<span class="string">&quot;normal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>添加<code>@PreAuthorize(value = &quot;hasAnyRole(&#39;admin&#39; , &#39;normal&#39;)&quot;)</code> 进行授权绑定</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="meta">@PreAuthorize(value = &quot;hasAnyRole(&#x27;admin&#x27; , &#x27;normal&#x27;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloWorld</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Spring Security&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="⛵数据库中用户授权"><a href="#⛵数据库中用户授权" class="headerlink" title="⛵数据库中用户授权"></a>⛵数据库中用户授权</h1><ul>
<li>实体类创建</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>dao</code>层创建</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserInfoMapper</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">UserInfo</span> , <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">UserInfo <span class="title">findByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>service</code>层创建</li>
</ul>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserInfoService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserInfoMapper userInfoMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">UserInfo <span class="title">findByUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> userInfoMapper.<span class="title">findByUsername</span><span class="params">(username)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>service</code>实现类创建</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserInfoService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserInfoMapper userInfoMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserInfo <span class="title">findByUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userInfoMapper.findByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>配置认证（实现 <code>UserDetailsService</code>）</p>
<p><font color="red">注意:</font>用户权限前面必须加上 <code>ROLE_</code> </p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;MyUserDetailService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUserDetailService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserInfoMapper userInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">null</span>;</span><br><span class="line">        UserInfo userInfo = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(username != <span class="keyword">null</span>)&#123;</span><br><span class="line">            userInfo = userInfoMapper.findByUsername(username);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(userInfo != <span class="keyword">null</span>)&#123;</span><br><span class="line">            List&lt;GrantedAuthority&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            GrantedAuthority authority = <span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">&quot;ROLE_&quot;</span>+userInfo.getRole());</span><br><span class="line">            list.add(authority);</span><br><span class="line">            user  = <span class="keyword">new</span> User(userInfo.getUsername(),userInfo.getPassword(),list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>初始化数据库数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcInit</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserInfoMapper userInfoMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        PasswordEncoder encoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">        UserInfo u = <span class="keyword">new</span> UserInfo();</span><br><span class="line">        u.setPassword(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line">        u.setUsername(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        u.setRole(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        userInfoMapper.save(u);</span><br><span class="line"></span><br><span class="line">        u = <span class="keyword">new</span> UserInfo();</span><br><span class="line">        u.setRole(<span class="string">&quot;normal&quot;</span>);</span><br><span class="line">        u.setUsername(<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">        u.setPassword(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;normal&quot;</span>));</span><br><span class="line">        userInfoMapper.save(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建配置类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="comment">//  启用方法级别的认证</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;MyUserDetailService&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//此处加密方式必须与初始化时数据库的加密方式相同</span></span><br><span class="line">        auth.userDetailsService(userDetailsService).passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity(三):自定义登录页面</title>
    <url>/2021/07/13/SpringSecurity%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="登录验证的两种模式"><a href="#登录验证的两种模式" class="headerlink" title="登录验证的两种模式"></a>登录验证的两种模式</h1><p>很显然分为俩种模式，一种为前后端不分离的开发模式，另一种则是当下盛行的前后端分离的开发模式，对于这俩种开发模式，自定义登录页面有俩种不同的处理方式，但对于后端来讲，这两者在实现<code>UserDetails、UserDetailsService</code>是一致的，接下来逐一说明其不一样的部分.</p>
<h2 id="前后端不分离的开发模式下"><a href="#前后端不分离的开发模式下" class="headerlink" title="前后端不分离的开发模式下"></a>前后端不分离的开发模式下</h2><ul>
<li>在<code>resource</code>目录下 <code>static</code> 中创建 <code>login.html</code>，方便演示，这里只编写了较为简单的表单</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>验证访问<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/login.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">VALUE</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>继承<code>WebSecurityConfigurerAdapter</code><ul>
<li>重写<code>protected void configure(HttpSecurity http)</code></li>
<li>重写<code>protected void configure(WebSecurity web)</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    web.ignoring().antMatchers(<span class="string">&quot;/js/**&quot;</span>, <span class="string">&quot;/css/**&quot;</span>,<span class="string">&quot;/images/**&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and() <span class="comment">//表示一段配置的结束</span></span><br><span class="line">            .formLogin()</span><br><span class="line">            .loginPage(<span class="string">&quot;/login.html&quot;</span>)</span><br><span class="line">        	<span class="comment">//放行如上请求</span></span><br><span class="line">            .permitAll() </span><br><span class="line">            .and()</span><br><span class="line">            .csrf().disable();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li><code>web.ignoring() </code>用来配置忽略掉的 URL 地址，一般对于静态文件，我们可以采用此操作。</li>
<li>如果我们使用<code>XML</code>来配置 <code>Spring Security</code> ，里边会有一个重要的标签 <code>&lt;http&gt;</code>，<code>HttpSecurity</code> 提供的配置方法 都对应了该标签。</li>
<li><code>authorizeRequests</code> 对应了 <code>&lt;intercept-url&gt;</code>。</li>
<li><code>formLogin</code> 对应了 <code>&lt;formlogin&gt;</code>。</li>
<li><code>and</code> 方法表示结束当前标签，上下文回到<code>HttpSecurity</code>，开启新一轮的配置。</li>
<li><code>permitAll</code> 表示登录相关的页面/接口不要被拦截。</li>
<li>最后记得关闭 <code>csrf </code></li>
</ol>
<p>当我们定义了登录页面为 <code>/login.html </code>的时候，<code>Spring Security </code>也会帮我们自动注册一个 <code>/login.html </code>的接口，这个接口是 <code>POST </code>请求，用来处理登录逻辑。</p>
<ol start="8">
<li>如果想要自定义登录接口名，<code>SpringSecurity</code>也提供的相关的方式，使用 <code>loginProcessingUrl(url)</code>进行设置，<code>action</code>处同步更改即可</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/doLogin&quot;</span>)</span><br><span class="line">            .loginPage(<span class="string">&quot;/login.html&quot;</span>)</span><br><span class="line">            .permitAll()</span><br><span class="line">            .and()</span><br><span class="line">            .csrf().disable();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="前后端分离的开发模式下"><a href="#前后端分离的开发模式下" class="headerlink" title="前后端分离的开发模式下"></a>前后端分离的开发模式下</h2><p>&emsp;&emsp;这种情况下，我们只需将<code>SpringSecurity</code>的接口提供给前端调用即可，我们只需要处理我们自己后端的业务逻辑即可，当然了前后端还是依旧需要<code>Json</code>数据进行交互的，此时作为后端不需要管理成功和失败后如何跳转，只需要返回状态码和信息，该怎么跳转直接甩给前端进行判断.</p>
<blockquote>
<p>前后端分离之前：</p>
</blockquote>
<p>处理登录成功的配置依托于: <code>defaultSuccessUrl</code> ，<code>successForwardUrl</code></p>
<blockquote>
<p>前后端分离后：</p>
</blockquote>
<p>显然这样做已经不实际了 ，那么就需要 <code>successHandler</code>了</p>
<ul>
<li><code>successHandler</code>（登录成功）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.authorizeRequests()</span><br><span class="line">               .anyRequest().authenticated()</span><br><span class="line">               .and()</span><br><span class="line">               .formLogin()</span><br><span class="line">               .loginProcessingUrl(<span class="string">&quot;/doLogin&quot;</span>)</span><br><span class="line">               .successHandler((req,resp,authentication)-&gt;&#123;</span><br><span class="line">                   <span class="comment">//获取用户信息</span></span><br><span class="line">                   Object principal = authentication.getPrincipal();</span><br><span class="line">                   <span class="comment">//定义响应体数据格式</span></span><br><span class="line">                   resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                   <span class="comment">//获取IO输出流</span></span><br><span class="line">                   PrintWriter out = resp.getWriter();</span><br><span class="line">                   <span class="comment">//将数据写入响应体</span></span><br><span class="line">                   out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(principal));</span><br><span class="line">                   <span class="comment">//确保将输出流中数据全部取出</span></span><br><span class="line">                   out.flush();、</span><br><span class="line">                   <span class="comment">//关闭输出流</span></span><br><span class="line">                   out.close();</span><br><span class="line">               &#125;)</span><br><span class="line">               .permitAll()</span><br><span class="line">               .and()</span><br><span class="line">               .csrf().disable();</span><br></pre></td></tr></table></figure>

<p><code>successHandler</code> 方法的参数是一个 <code>AuthenticationSuccessHandler </code>对象，这个对象中我们要实现的方法是 <code>onAuthenticationSuccess</code></p>
<p><code>onAuthenticationSuccess </code>方法有三个参数，分别是：</p>
<ul>
<li><code>HttpServletRequest</code></li>
<li><code>HttpServletResponse</code></li>
<li><code>Authentication</code></li>
</ul>
<p>有了前两个参数，我们就可以在这里随心所欲的返回数据了。利用<code> HttpServletRequest</code> 我们可以做服务端跳转，利用 <code>HttpServletResponse</code> 我们可以做客户端跳转，当然，也可以返回 <code>JSON</code> 数据。</p>
<p>第三个 <code>Authentication</code> 参数则保存了我们刚刚登录成功的用户信息。</p>
<blockquote>
<p>利用<code>postman</code>进行接口测试，成功返回数据</p>
</blockquote>
<p><img src="https://anthony-img-bed.oss-cn-beijing.aliyuncs.com/SpringSecurity%EF%BC%88%E4%B8%89%EF%BC%89/1.png" alt="image-20210713042108311"></p>
<ul>
<li><code>failureHandler</code>(登录失败)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.failureHandler((req, resp, e) -&gt; &#123;</span><br><span class="line">                    resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                    PrintWriter out = resp.getWriter();</span><br><span class="line">                    String msg = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> LockedException) &#123;</span><br><span class="line">                        msg = <span class="string">&quot;账户被锁定，请联系管理员!&quot;</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> CredentialsExpiredException) &#123;</span><br><span class="line">                        msg = <span class="string">&quot;密码过期，请联系管理员!&quot;</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AccountExpiredException) &#123;</span><br><span class="line">                        msg = <span class="string">&quot;账户过期，请联系管理员!&quot;</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> DisabledException) &#123;</span><br><span class="line">                        msg = <span class="string">&quot;账户被禁用，请联系管理员!&quot;</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> BadCredentialsException) &#123;</span><br><span class="line">                        msg = <span class="string">&quot;用户名或者密码输入错误，请重新输入!&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(Result.failure(msg)));</span><br><span class="line">                    out.flush();</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125;)</span><br></pre></td></tr></table></figure>



<h3 id="未登录提示"><a href="#未登录提示" class="headerlink" title="未登录提示"></a>未登录提示</h3><p>如果用户没有登录就访问一个需要认证后才能访问的页面，这个时候，我们不应该让用户重定向到登录页面，而是给用户一个尚未登录的提示，前端收到提示之后，再自行决定页面跳转。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.exceptionHandling() <span class="comment">//额外的处理</span></span><br><span class="line">.authenticationEntryPoint((req, resp, authException) -&gt; &#123;</span><br><span class="line">            resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">            PrintWriter out = resp.getWriter();</span><br><span class="line">            out.write(<span class="string">&quot;尚未登录，请先登录&quot;</span>);</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<h2 id="注销登录"><a href="#注销登录" class="headerlink" title="注销登录"></a>注销登录</h2><p>注销登录我们前面说过，按照前面的配置，注销登录之后，系统自动跳转到登录页面，这也是不合适的，如果是前后端分离项目，注销登录成功后返回 JSON 即可，配置如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.and()</span><br><span class="line">.logout()</span><br><span class="line">.logoutUrl(<span class="string">&quot;/logout&quot;</span>)</span><br><span class="line">.logoutSuccessHandler((req, resp, authentication) -&gt; &#123;</span><br><span class="line">    resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">    PrintWriter out = resp.getWriter();</span><br><span class="line">    out.write(<span class="string">&quot;注销成功!&quot;</span>);</span><br><span class="line">    out.flush();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;)</span><br><span class="line">.permitAll()</span><br><span class="line">.and()</span><br></pre></td></tr></table></figure>



<h2 id="前后端分离模式下的配置总览"><a href="#前后端分离模式下的配置总览" class="headerlink" title="前后端分离模式下的配置总览"></a>前后端分离模式下的配置总览</h2><p>总体上来说配置还是比较多的，但是这些东西只要写一次，以后使用就可以直接照搬了hhh</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">            .anyRequest().authenticated()</span><br><span class="line">            .and()</span><br><span class="line">            .formLogin()</span><br><span class="line">            .loginProcessingUrl(<span class="string">&quot;/doLogin&quot;</span>)</span><br><span class="line">            <span class="comment">//登录成功处理类</span></span><br><span class="line">            .successHandler((req,resp,authentication)-&gt;&#123;</span><br><span class="line">                Object principal = authentication.getPrincipal();</span><br><span class="line">                resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                PrintWriter out = resp.getWriter();</span><br><span class="line">                out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(principal));</span><br><span class="line">                out.flush();</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">//登录失败处理类</span></span><br><span class="line">            .failureHandler((req, resp, e) -&gt; &#123;</span><br><span class="line">                resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                PrintWriter out = resp.getWriter();</span><br><span class="line">                String msg = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="keyword">if</span> (e <span class="keyword">instanceof</span> LockedException) &#123;</span><br><span class="line">                    msg = <span class="string">&quot;账户被锁定，请联系管理员!&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> CredentialsExpiredException) &#123;</span><br><span class="line">                    msg = <span class="string">&quot;密码过期，请联系管理员!&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AccountExpiredException) &#123;</span><br><span class="line">                    msg = <span class="string">&quot;账户过期，请联系管理员!&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> DisabledException) &#123;</span><br><span class="line">                    msg = <span class="string">&quot;账户被禁用，请联系管理员!&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> BadCredentialsException) &#123;</span><br><span class="line">                    msg = <span class="string">&quot;用户名或者密码输入错误，请重新输入!&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(Result.failure(msg)));</span><br><span class="line">                out.flush();</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;)</span><br><span class="line">            .permitAll()</span><br><span class="line">            .and()</span><br><span class="line">        	<span class="comment">//避免伪造跨域请求</span></span><br><span class="line">            .csrf().disable()</span><br><span class="line">            <span class="comment">//额外处理类</span></span><br><span class="line">            .exceptionHandling()</span><br><span class="line">            .authenticationEntryPoint((req, resp, authException) -&gt; &#123;</span><br><span class="line">                        resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                        PrintWriter out = resp.getWriter();</span><br><span class="line">                        out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(Result.failure(<span class="string">&quot;尚未登录，清先登录！&quot;</span>)));</span><br><span class="line">                        out.flush();</span><br><span class="line">                        out.close();</span><br><span class="line">                    &#125;</span><br><span class="line">            )</span><br><span class="line">            .and()</span><br><span class="line">            <span class="comment">//登出注销操作部分</span></span><br><span class="line">            .logout()</span><br><span class="line">            .logoutUrl(<span class="string">&quot;/logout&quot;</span>)</span><br><span class="line">            .logoutSuccessHandler((req, resp, authentication) -&gt; &#123;</span><br><span class="line">                resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                PrintWriter out = resp.getWriter();</span><br><span class="line">                out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(Result.failure(<span class="string">&quot;注销成功！&quot;</span>)));</span><br><span class="line">                out.flush();</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;)</span><br><span class="line">            .permitAll()</span><br><span class="line">            .and();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity(二):整合mybatis</title>
    <url>/2021/07/12/SpringSecurity%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="构建数据库表"><a href="#构建数据库表" class="headerlink" title="构建数据库表"></a>构建数据库表</h1><ul>
<li>用户表:<code>sys_user</code><ul>
<li>其中 <code>is_enable</code> 、 <code>is_lock</code> 、<code>is_credentials</code> 、<code>is_expired</code> 来源于<code>SpringSecurity</code>中用户抽象类中的四个属性，本质上，这张表也是基于用户抽象类进行自定义实现的.</li>
</ul>
</li>
</ul>
<p><img src="https://anthony-img-bed.oss-cn-beijing.aliyuncs.com/SpringSecurity%EF%BC%88%E4%BA%8C%EF%BC%89/1.png"></p>
<ul>
<li>权限表: <code>sys_role</code></li>
</ul>
<p><img src="https://anthony-img-bed.oss-cn-beijing.aliyuncs.com/SpringSecurity%EF%BC%88%E4%BA%8C%EF%BC%89/2.png" alt="image-20210712205655520"></p>
<ul>
<li>用户-权限中间表：<code>sys_user_role</code></li>
</ul>
<p><img src="https://anthony-img-bed.oss-cn-beijing.aliyuncs.com/SpringSecurity%EF%BC%88%E4%BA%8C%EF%BC%89/3.png" alt="image-20210712205805311"></p>
<h1 id="构建项目、引入Mybatis依赖"><a href="#构建项目、引入Mybatis依赖" class="headerlink" title="构建项目、引入Mybatis依赖"></a>构建项目、引入Mybatis依赖</h1><p>此步骤就不再进行过多赘述.</p>
<p><font color="red"> 注意：</font> <code>mybatis</code>并没有自动开启驼峰命名与下划线之间的转换，需要手动开启(用习惯了<code>mybatis-plus</code> 导致找这个bug找了半天QAQ)，同时也要记得在启动类处加上<code>@MapperScan</code>这个注解.</p>
<h1 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h1><ul>
<li>用户类实现 <code>UserDetails</code> 类，并重写方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUser</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String realName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isEnable;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isLock;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isCredentials;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isExpired;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Date loginTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;GrantedAuthority&gt; authorities;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isExpired;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isLock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isCredentials;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isEnable;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>权限类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysRole</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> String roleMemo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoleName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleName</span><span class="params">(String roleName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleName = roleName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoleMemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roleMemo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoleMemo</span><span class="params">(String roleMemo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleMemo = roleMemo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="创建数据库操作接口"><a href="#创建数据库操作接口" class="headerlink" title="创建数据库操作接口"></a>创建数据库操作接口</h1><ul>
<li><code>SysUserMappper</code>、<code>xml</code>文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysUserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(SysUser user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">SysUser <span class="title">selectAllUsers</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.anthony.dao.SysUserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> &gt;</span></span><br><span class="line">        insert into sys_user</span><br><span class="line">            (username, password, real_name, is_enable, is_lock, is_credentials, create_time, login_time)</span><br><span class="line">        values</span><br><span class="line">            (#&#123;username&#125;,#&#123;password&#125;,#&#123;realName&#125;,#&#123;isEnable&#125;,#&#123;isLock&#125;,#&#123;isCredentials&#125;,#&#123;createTime&#125;,#&#123;loginTime&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllUsers&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.anthony.entity.SysUser&quot;</span>&gt;</span></span><br><span class="line">        select * from sys_user where username = #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>SysRoleMapper</code> 、<code>xml</code>文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysUserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(SysUser user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">SysUser <span class="title">selectAllUsers</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.anthony.dao.SysRoleMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.anthony.entity.SysRole&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.Integer&quot;</span> &gt;</span></span><br><span class="line">        select r.role_memo ,r.role_name</span><br><span class="line">        from sys_role r , sys_user_role ur</span><br><span class="line">        where ur.user_id = #&#123;id&#125; and ur.role_id = r.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="实现业务层"><a href="#实现业务层" class="headerlink" title="实现业务层"></a>实现业务层</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUserDetailService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysRoleMapper sysRoleMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserMapper sysUserMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//通过用户名查询用户</span></span><br><span class="line">        SysUser sysUsers = sysUserMapper.selectAllUsers(username);</span><br><span class="line">        System.out.println(<span class="string">&quot;=======&quot;</span>+ sysUsers.toString());</span><br><span class="line">        <span class="comment">//创建权限集合</span></span><br><span class="line">        List&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(sysUsers != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Role查询开始！&quot;</span> + sysUsers.getId());</span><br><span class="line">            <span class="comment">//查询用户权限</span></span><br><span class="line">            SysRole sysRole = sysRoleMapper.selectAll(sysUsers.getId());</span><br><span class="line">            <span class="keyword">if</span>(sysRole == <span class="keyword">null</span>) System.out.println(<span class="string">&quot; =============null===========&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Role查询完成！&quot;</span> + sysRole.getRoleName());</span><br><span class="line">            <span class="comment">//注册权限信息</span></span><br><span class="line">            GrantedAuthority grantedAuthority = <span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">&quot;ROLE_&quot;</span>+sysRole.getRoleName());</span><br><span class="line">            System.out.println(<span class="string">&quot;建立权限成功！&quot;</span>+ grantedAuthority.toString());</span><br><span class="line">            authorities.add(grantedAuthority);</span><br><span class="line">            System.out.println(<span class="string">&quot;权限名&quot;</span>+ sysRole.getRoleName()+<span class="string">&quot;权限描述&quot;</span>+ sysRole.getRoleMemo());</span><br><span class="line">            <span class="comment">//设置权限信息</span></span><br><span class="line">            sysUsers.setAuthorities(authorities);</span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">//返回</span></span><br><span class="line">        <span class="keyword">return</span> sysUsers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="编写配置类"><a href="#编写配置类" class="headerlink" title="编写配置类"></a>编写配置类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService service;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//super.configure(auth);</span></span><br><span class="line">        <span class="comment">//填入自定义的用户类与密码加密方式</span></span><br><span class="line">        auth.userDetailsService(service).passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//super.configure(http);</span></span><br><span class="line">        <span class="comment">//发送授权请求时</span></span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">            	<span class="comment">//当访问接口 /index</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/index&quot;</span>)</span><br><span class="line">            	<span class="comment">//允许访问不需要登录</span></span><br><span class="line">                .permitAll()</span><br><span class="line">            	<span class="comment">//访问如下接口，需要具有后面的身份信息</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/access/user/**&quot;</span>).hasRole(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/access/admin/**&quot;</span>).hasRole(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">            	<span class="comment">//所有请求都需要认证授权</span></span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">            	<span class="comment">//使用表单登录</span></span><br><span class="line">                .formLogin();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="控制层"><a href="#控制层" class="headerlink" title="控制层"></a>控制层</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toIndexHtml</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//跳转页面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/index.html&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/access/user&quot;, produces = &quot;text/html;charset=utf-8&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hiUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello User!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/access/admin&quot;,produces = &quot;text/html;charset=utf-8&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hiAdmin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello admin!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity(四):结合Vue实现异步登录</title>
    <url>/2021/07/16/SpringSecurity%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="🏁问题分析"><a href="#🏁问题分析" class="headerlink" title="🏁问题分析"></a>🏁问题分析</h1><p>&emsp;&emsp;使用异步<code>axios</code>请求的方式进行登录与直接使用 <code>postman</code> 发送 <code>post</code> 请求进行测试 ，提交数据的方式似乎不太一样，<code>postman</code>能跑通，而使用<code>axios</code> ，后台<code>loadUserByusername</code>获取不到用户名，这就很奇怪，奈何看不太懂源码，主要是各种设计模式没学过以及底层的封装层数太多了，看的使人心累，于是开始逛论坛以及开源网站看别人的代码，后来才发现，<code>axios</code>提交的参数是存放在请求体当中的，而<code>SpringSecurity</code>中的处理逻辑使用了 <code>request.getParameter</code> 进行参数获取，有过原始表单或者 <code>servlet</code> 开发经验的人都知道 ， 此方法只能获取到类似于 <code>get</code>请求 以及 以原始表单格式提交的<code>post</code> 数据 ， 然而尝试过后发现 ，利用<code>axios</code>请求，将请求头设置一下，即<code>Content-Type: application/x-www-form-urlencoded``;charset=utf-8</code> ， 安全框架仍然解析不到<code>username</code>，此时心态已经崩了，然而就在此时，翻到一篇博客，记述到可以将传统原生的表单提交格式更改为 <code>get</code> 提交数据的数据格式，当然了只是更改了数据格式，并没有更改请求方式哈.</p>
<h1 id="😎解决方案"><a href="#😎解决方案" class="headerlink" title="😎解决方案"></a>😎解决方案</h1><p>利用<code>qs</code> 包 中的 <code>stringify</code> 方法格式化数据.</p>
<p>具体：</p>
<ul>
<li>先安装该包 <code>npm install qs --save</code></li>
<li>修改前端提交数据的格式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> http.request(&#123;</span><br><span class="line">    method: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">    data: qs.stringify(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试过后可以请求成功，狂喜~</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue(一):介绍与起步使用</title>
    <url>/2021/06/01/Vue%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Vue-js介绍"><a href="#Vue-js介绍" class="headerlink" title="Vue.js介绍"></a>Vue.js介绍</h1><p>​        Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href="https://cn.vuejs.org/v2/guide/single-file-components.html">现代化的工具链</a>以及各种<a href="https://github.com/vuejs/awesome-vue#libraries--plugins">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动，并且采用了<code>SPA</code>的设计思想来对页面进行开发，让开发十分便携且可维护性得到提高.</p>
<h1 id="引入Vue"><a href="#引入Vue" class="headerlink" title="引入Vue"></a>引入Vue</h1><p>​        尝试 Vue.js 最简单的方法是使用 <a href="https://codesandbox.io/s/github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-hello-world">Hello World 例子</a>。你可以在浏览器新标签页中打开它，跟着例子学习一些基础用法。或者你也可以<a href="https://github.com/vuejs/vuejs.org/blob/master/src/v2/examples/vue-20-hello-world/index.html">创建一个 <code>.html</code> 文件</a>，然后通过如下方式引入 Vue：</p>
<p><code>CDN</code>引入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 生产环境版本，优化了尺寸和速度 --&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<p>本地引入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;!--进入网站，下载文件到本地，在本地引入即可 --&gt;</span><br><span class="line">https:<span class="comment">//cdn.jsdelivr.net/npm/vue/dist/vue.js</span></span><br></pre></td></tr></table></figure>





<h1 id="Vue实例"><a href="#Vue实例" class="headerlink" title="Vue实例"></a>Vue实例</h1><p>​        使用 <code>Vue</code> 开发，遵循只有一个<code>Vue</code>实例的原则，这一点在以后使用了<code>vue-cli</code>以后会更加明了，这里先不做赘述.</p>
<p><strong>创建一个<code>Vue</code>实例</strong></p>
<p>先大致了解下一个 <code>Vue</code> 实例能写哪些东西先大致上认识熟悉一下，以后会慢慢介绍，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="comment">//挂载html元素,使用id进行挂载绑定，因为id具有唯一性</span></span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span> ,</span><br><span class="line">    <span class="comment">//声明数据</span></span><br><span class="line">    data: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//编写函数</span></span><br><span class="line">    methods: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//用于注册组件</span></span><br><span class="line">    components: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//计算方法</span></span><br><span class="line">    computed: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//以下均是Vue实例的生命周期钩子，后面会慢慢讲到</span></span><br><span class="line">    beforeCreate: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    created: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    beforeMount: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    mounted: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    beforeUpdate: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    updated: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>Vue</code>实例当中的 <code>data</code>  可以通过声明 <code>js</code> 对象的方式，在外部赋值，在内部使用变量直接使用.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    name : <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h1 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h1><p>​        Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML，所以能被遵循规范的浏览器和 HTML 解析器解析。</p>
<p>在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，Vue 能够智能地计算出最少需要重新渲染多少组件，并把 DOM 操作次数减到最少。</p>
<p>如果你熟悉虚拟 DOM 并且偏爱 JavaScript 的原始力量，你也可以不用模板，<a href="https://cn.vuejs.org/v2/guide/render-function.html">直接写渲染 (render) 函数</a>，使用可选的 JSX 语法。</p>
<h2 id="Mustache语法"><a href="#Mustache语法" class="headerlink" title="Mustache语法"></a><strong>Mustache语法</strong></h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>文本数据绑定经常使用到的双大括号绑定：<code>&#123;&#123; msg &#125;&#125;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注意外层需要用 id = app 的块级元素进行包裹--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这样就可以从实例中取出值,并且渲染在页面上--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果加入了 v-once 那么这个值就不会随着 实例中参数值的变化而变化了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在<code>vue</code>实例当中声明这个数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">    name : <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>​    **注意:**如果<code>data</code>中的属性值中有<code>html</code> 标签，如果想要解析这个标签，需要在使用数据的标签上加上 <code>v-html</code>这个属性.</p>
<h3 id="使用JavaScript表达式"><a href="#使用JavaScript表达式" class="headerlink" title="使用JavaScript表达式"></a>使用<code>JavaScript表达式</code></h3><p>​        迄今为止，在我们的模板中，我们一直都只绑定简单的 property 键值。但实际上，对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;&#123; number + <span class="number">1</span> &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; ok ? <span class="string">&#x27;YES&#x27;</span> : <span class="string">&#x27;NO&#x27;</span> &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; message.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>) &#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​        这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含<strong>单个表达式</strong>，所以下面的例子都<strong>不会</strong>生效。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 这是语句，不是表达式 --&gt;</span><br><span class="line">&#123;&#123; <span class="keyword">var</span> a = <span class="number">1</span> &#125;&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span><br><span class="line">&#123;&#123; <span class="keyword">if</span> (ok) &#123; <span class="keyword">return</span> message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>



<h2 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h2><p>​        通常情况下，页面中的数据并不是永远不会变的，可能在触发某些时间过后会实时更新数据，当然了，这里不是指<code>&#123;&#123; &#125;&#125;</code>中的数据，因为这里面的数据本身就由<code>vue</code>来管理来进行动态更新的.这里的动态绑定指的是标签的属性值，我们可以进行动态的更新. </p>
<h3 id="v-bind-的使用"><a href="#v-bind-的使用" class="headerlink" title="**v-bind**的使用"></a>**<code>v-bind</code>**的使用</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">  //当对 h2 标签不进行任何处理 是无法读取到ids 我们需要将 id属性交给 vue去管理就可以读取到了</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">       &lt;h2 id =&quot;ids&quot;&gt;&lt;/h2&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       let app = new Vue(&#123;</span><br><span class="line">           //挂载html元素,使用id进行挂载绑定，因为id具有唯一性</span><br><span class="line">           el: &#x27;#app&#x27; ,</span><br><span class="line">           //声明数据</span><br><span class="line">           data: &#123;</span><br><span class="line">               ids: &quot;test&quot;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>正确的方式只需要修改一下即可：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-bind:id</span> = <span class="string">&quot;ids&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--或者--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:id</span> = <span class="string">&quot;ids&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="v-on的使用"><a href="#v-on的使用" class="headerlink" title="v-on的使用"></a><strong><code>v-on</code>的使用</strong></h3><p>如果需要使用<code>vue </code> 实例当中的 <code>methods</code> 同样的，我们需要把触发事件交给 <code>vue </code>去管理 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;test&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--或者--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;test&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--或者 动态绑定事件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @[<span class="attr">event</span>]=<span class="string">&quot;test&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>vue</code>中的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      <span class="comment">//挂载html元素,使用id进行挂载绑定，因为id具有唯一性</span></span><br><span class="line">      el: <span class="string">&#x27;#app&#x27;</span> ,</span><br><span class="line">      <span class="comment">//声明数据</span></span><br><span class="line">      data: &#123;</span><br><span class="line">          ids: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">          event: <span class="string">&quot;click&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">    	methods: &#123;</span><br><span class="line">          <span class="comment">//ES5写法</span></span><br><span class="line">          test: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              </span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">//ES6写法</span></span><br><span class="line">          <span class="function"><span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              </span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue(三):Vuex刷新初始化</title>
    <url>/2021/08/09/Vue%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>这个问题是非常普遍的，于是我上 <code>StackOverFlow</code>上逛了一圈，发现国外友人推荐了好几种解决方案，我从中挑选了一下，选择了一种十分简单的方式，那就是使用<code>Vuex</code>插件，这里简单记录一下安装和使用以及其提供的API</p>
</blockquote>
<h1 id="vuex-persistedstate"><a href="#vuex-persistedstate" class="headerlink" title="vuex-persistedstate"></a>vuex-persistedstate</h1><p><code>GitHub</code>地址：<a href="https://github.com/robinvdvleuten/vuex-persistedstate/tree/master">点这里</a></p>
<ul>
<li>利用<code>npm</code> 进行安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save vuex-persistedstate</span><br></pre></td></tr></table></figure>

<ul>
<li>在使用了<code>vuex</code>的<code>js</code>文件中导入</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> createPersistedState <span class="keyword">from</span> <span class="string">&quot;vuex-persistedstate&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    isLogin: <span class="literal">false</span>,</span><br><span class="line">    userInfo: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="function"><span class="title">updateInfo</span>(<span class="params">state , payload</span>)</span>&#123;</span><br><span class="line">      state.isLogin = <span class="literal">true</span></span><br><span class="line">      <span class="built_in">Object</span>.assign(state.userInfo,payload.userinfo)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [createPersistedState(&#123;</span><br><span class="line">    <span class="comment">// 存储时 key的值为 state</span></span><br><span class="line">    key: <span class="string">&quot;state&quot;</span>,</span><br><span class="line">    <span class="comment">//需要存储哪些属性，如果不写，则默认存储全部，空数组则不存</span></span><br><span class="line">    <span class="comment">//如果使用了module 则需要 在前面加 module名</span></span><br><span class="line">    path:[<span class="string">&#x27;isLogin&#x27;</span>],</span><br><span class="line">    <span class="comment">//更改 vuex state 存储位置 默认 localStorage (永久存储)</span></span><br><span class="line">    storage: <span class="built_in">window</span>.sessionStorage,</span><br><span class="line">  &#125;)]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p><code>createPersistedState([options])</code></p>
<p>Creates a new instance of the plugin with the given options. The following options can be provided to configure the plugin for your specific needs:</p>
<ul>
<li><code>key &lt;String&gt;</code>: The key to store the persisted state under. Defaults to <code>vuex</code>.</li>
<li><code>paths &lt;Array&gt;</code>: An array of any paths to partially persist the state. If no paths are given, the complete state is persisted. If an empty array is given, no state is persisted. Paths must be specified using dot notation. If using modules, include the module name. eg: “auth.user” Defaults to <code>undefined</code>.</li>
<li><code>reducer &lt;Function&gt;</code>: A function that will be called to reduce the state to persist based on the given paths. Defaults to include the values.</li>
<li><code>subscriber &lt;Function&gt;</code>: A function called to setup mutation subscription. Defaults to <code>store =&gt; handler =&gt; store.subscribe(handler)</code>.</li>
<li><code>storage &lt;Object&gt;</code>: Instead of (or in combination with) <code>getState</code> and <code>setState</code>. Defaults to localStorage.</li>
<li><code>getState &lt;Function&gt;</code>: A function that will be called to rehydrate a previously persisted state. Defaults to using <code>storage</code>.</li>
<li><code>setState &lt;Function&gt;</code>: A function that will be called to persist the given state. Defaults to using <code>storage</code>.</li>
<li><code>filter &lt;Function&gt;</code>: A function that will be called to filter any mutations which will trigger <code>setState</code> on storage eventually. Defaults to <code>() =&gt; true</code>.</li>
<li><code>overwrite &lt;Boolean&gt;</code>: When rehydrating, whether to overwrite the existing state with the output from <code>getState</code> directly, instead of merging the two objects with <code>deepmerge</code>. Defaults to <code>false</code>.</li>
<li><code>arrayMerger &lt;Function&gt;</code>: A function for merging arrays when rehydrating state. Defaults to <code>function (store, saved) &#123; return saved &#125;</code> (saved state replaces supplied state).</li>
<li><code>rehydrated &lt;Function&gt;</code>: A function that will be called when the rehydration is finished. Useful when you are using Nuxt.js, which the rehydration of the persisted state happens asynchronously. Defaults to <code>store =&gt; &#123;&#125;</code></li>
<li><code>fetchBeforeUse &lt;Boolean&gt;</code>: A boolean indicating if the state should be fetched from storage before the plugin is used. Defaults to <code>false</code>.</li>
<li><code>assertStorage &lt;Function&gt;</code>: An overridable function to ensure storage is available, fired on plugins’s initialization. Default one is performing a Write-Delete operation on the given Storage instance. Note, default behaviour could throw an error (like <code>DOMException: QuotaExceededError</code>).</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue(二):整合mavon-editor</title>
    <url>/2021/07/22/Vue%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>前言：不得不说我还是太懒了，前端部分的文章一直没有写，不知道为什么没有什么兴致写，现在趁着有时间还是写写吧，Vue最近也算是用的有点感觉了，组件化思想有一说一，对于个人开发者而言，开发小型项目还是用后端模板写前端比较方便hhh.</p>
</blockquote>
<h1 id="🚀下载安装-mavon-editor"><a href="#🚀下载安装-mavon-editor" class="headerlink" title="🚀下载安装 mavon-editor"></a>🚀下载安装 mavon-editor</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install mavon-editor --save</span><br></pre></td></tr></table></figure>



<h1 id="🛰使用-mavon-editor"><a href="#🛰使用-mavon-editor" class="headerlink" title="🛰使用 mavon-editor"></a>🛰使用 mavon-editor</h1><h2 id="在需要的组件中使用"><a href="#在需要的组件中使用" class="headerlink" title="在需要的组件中使用"></a>在需要的组件中使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;mavon-editor v-model&#x3D;&quot;content&quot; </span><br><span class="line">                  :codeStyle&#x3D;&quot;codeStyle&quot;</span><br><span class="line">                  &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; mavonEditor &#125; from &#39;mavon-editor&#39;</span><br><span class="line">import &#39;mavon-editor&#x2F;dist&#x2F;css&#x2F;index.css&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;MavonEditor&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      content: &#39;&#39;,</span><br><span class="line">      codeStyle: &#39;主题&#39;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    mavonEditor</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>注意：<code>content</code> 保存的为md语法，<code>codeStyle</code>属性可以更换代码块的主题，具体有哪些主题可以参考一下  <a href="https://github.com/hinesboy/mavonEditor/blob/HEAD/src/lib/core/hljs/lang.hljs.css.js"><font color="red">可选主题表</font></a>  , 每一种主题的样式可以参考<a href="https://highlightjs.org/static/demo/"> <code>highlight.js</code>demo文档</a>  ， 更多相关的设置可以参考文档 : <a href="https://www.npmjs.com/package/mavon-editor">mavon-editor参考文档</a> </p>
<h2 id="实现编辑器中实时图片上传"><a href="#实现编辑器中实时图片上传" class="headerlink" title="实现编辑器中实时图片上传"></a>实现编辑器中实时图片上传</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;mavon-editor ref&#x3D;md @imgAdd&#x3D;&quot;imgAdd&quot; @imgDel&#x3D;&quot;$imgDel&quot;&gt;&lt;&#x2F;mavon-editor&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    exports default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        &#x2F;&#x2F; 绑定@imgAdd event</span><br><span class="line">        imgAdd(pos, $file)&#123;</span><br><span class="line">		   let _this &#x3D; this</span><br><span class="line">            &#x2F;&#x2F; 第一步.将图片上传到服务器.</span><br><span class="line">           var formdata &#x3D; new FormData();</span><br><span class="line">           formdata.append(&#39;image&#39;, $file);</span><br><span class="line">           axios(&#123;</span><br><span class="line">               url: &#39;图片上传api路径&#39;,</span><br><span class="line">               method: &#39;post&#39;,</span><br><span class="line">               data: formdata,</span><br><span class="line">               headers: &#123; &#39;Content-Type&#39;: &#39;multipart&#x2F;form-data&#39; &#125;,</span><br><span class="line">           &#125;).then((url) &#x3D;&gt; &#123;</span><br><span class="line">               _this.$refs.md.$img2Url(pos, url);</span><br><span class="line">           &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>上述的写法比较固定，按着如上方式写即可.</p>
<p>注意替换的方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将返回的url替换到文本原位置![...](0) -&gt; ![...](url)  替换方式为: $vm.$img2Url(pos , url)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * $vm 指为mavonEditor实例，可以通过如下两种方式获取</span></span><br><span class="line"><span class="comment"> * 1. 通过引入对象获取: `import &#123;mavonEditor&#125; from ...` 等方式引入后，`$vm`为`mavonEditor`</span></span><br><span class="line"><span class="comment"> * 2. 通过$refs获取: html声明ref : `&lt;mavon-editor ref=md &gt;&lt;/mavon-editor&gt;，`$vm`为`this.$refs.md`</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>代码版本管理工具Git</title>
    <url>/2021/04/09/%E4%BB%A3%E7%A0%81%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Git/</url>
    <content><![CDATA[<h1 id="🍔前言"><a href="#🍔前言" class="headerlink" title="🍔前言"></a>🍔前言</h1><p>&emsp;&emsp;在学习的 <code>Vue-Cli</code> 过程中涉及到<code>Git</code>的配置，由此才开始，虽然以前了解过 <code>Git</code> 但是并不知道 <code>Git</code> 具体能帮助我干什么，现在想来当时还是太年轻了哈，总的来说还是挺好用的。😁确信，也正是由此让我搭建了自己的博客····</p>
<h1 id="🎉Git的相关介绍"><a href="#🎉Git的相关介绍" class="headerlink" title="🎉Git的相关介绍"></a>🎉Git的相关介绍</h1><p><strong>了解 <code>Git</code> 之前先来了解一下什么是版本控制？</strong></p>
<blockquote>
<p>&emsp;&emsp;版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。     </p>
</blockquote>
<ul>
<li>实现跨区域多人协同开发</li>
<li>追踪和记载一个或者多个文件的历史记录</li>
<li>组织和保护你的源代码和文档</li>
<li>统计工作量</li>
<li>并行开发、提高开发效率</li>
<li>跟踪记录整个软件的开发过程</li>
<li>减轻开发人员的负担，节省时间，同时降低人为错误</li>
</ul>
<p>&emsp;&emsp;简单说就是用于管理多人协同开发项目的技术。</p>
<p>&emsp;&emsp;没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全性，以及软件的整合等问题。</p>
<p>&emsp;&emsp;无论是工作还是学习，或者是自己做笔记，都经历过这样一个阶段！我们就迫切需要一个版本控制工具！</p>
<p>版本控制器有如下这些：</p>
<ul>
<li><strong>Git</strong></li>
<li><strong>SVN</strong>（Subversion）</li>
<li><strong>CVS</strong>（Concurrent Versions System）</li>
<li><strong>VSS</strong>（Micorosoft Visual SourceSafe）</li>
<li><strong>TFS</strong>（Team Foundation Server）</li>
<li>Visual Studio Online</li>
</ul>
<p>版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在影响力最大且使用最广泛的是Git与SVN.</p>
<p><strong>1、集中版本控制  SVN</strong></p>
<p>&emsp;&emsp;所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改，所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：SVN、CVS、VSS</p>
<p><strong>2、分布式版本控制  Git</strong></p>
<p>&emsp;&emsp;每个人都拥有全部的代码！安全隐患！</p>
<p>&emsp;&emsp;所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用，不会因为服务器损坏或者网络问题，造成不能工作的情况！</p>
<p><strong>3.Git与SVN的主要区别</strong></p>
<p>&emsp;&emsp;SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p>
<p>&emsp;&emsp;Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。Git可以直接看到更新了哪些代码和文件！</p>
<p><strong>Git是目前世界上最先进的分布式版本控制系统。</strong></p>
<h1 id="🎈Git的安装"><a href="#🎈Git的安装" class="headerlink" title="🎈Git的安装"></a>🎈Git的安装</h1><p>&emsp;&emsp;通常情况下载 <a href="https://git-scm.com/"><code>Git</code></a> (点击跳转)在官网下载，由于属于国外网站，虽然文件小，但是下载速度极其慢，于是推荐使用 <a href="http://npm.taobao.org/mirrors/git-for-windows/"><code>淘宝镜像</code></a> (点击跳转)下载，是不是会疑惑什么是 <code>淘宝镜像</code> ？通俗的来讲，就是淘宝把国外网站的东西下好了放在国内的网站中，这样可以让我们高速下载，类似的还有 <code>阿里镜像</code> 也十分常用.</p>
<p>&emsp;&emsp;回到正题，下载好之后，有一说一除了更改安装路径外，其余的都点next即可~~  安装的时候会帮助你配置好<code>环境变量</code>，其实 <code>Git</code> 的运行陪不配置都行，配置了之后只是让你在计算机的任意位置，鼠标右键进行选择可以使用 <code>Git Bash / Git GUI</code> .</p>
<p>&emsp;&emsp;在进行进一步配置之前，建议先注册一个 <a href="https://gitee.com/"><code>Gitee/GitHub</code></a>  (点击跳转)的账号(此处以 <code>Gitee</code> 为例，没错就是因为 <code>Gitee</code> 是国内的访问比较快)，建议用英文名且全部小写不含空格的那种，用大写过后配置代码托管大概率会出问题，谁踩坑谁知道.</p>
<p>&emsp;&emsp;接下来给出一些 <code>Git</code> 的常见命令(在 <code>Git Bash</code> 中使用)：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">#查看系统config</span><br><span class="line">git config --system --list</span><br><span class="line">　　</span><br><span class="line">#查看当前用户（global）配置</span><br><span class="line">git config --global  --list</span><br><span class="line"></span><br><span class="line">#设置用户昵称要与Gitee的用户名一致</span><br><span class="line">git config --global user.name &quot;username&quot; </span><br><span class="line"></span><br><span class="line">#设置用户邮箱,如果Gitee绑定了，也用一样的就行</span><br><span class="line">git config --global user.email &quot;youremail&quot;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 进入 C:\Users\Administrator\.ssh 目录 如果没有自己就建一个</span><br><span class="line"># 生成公钥,过后会在.ssh中生成一个 id_rsa 以及 id_rsa.pub  分别为私人秘钥和公开秘钥 ，公开秘钥可以解密为私钥</span><br><span class="line">#我们过后配置托管仓库会用到 公钥</span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p>&emsp;&emsp;至此安装和相关配置已经完成，接下来会介绍Linux的常用命令</p>
<h1 id="✨常用Linux命令"><a href="#✨常用Linux命令" class="headerlink" title="✨常用Linux命令"></a>✨常用Linux命令</h1><p>常用命令如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1）、cd : 改变目录。</span><br><span class="line"></span><br><span class="line">2）、cd . . 回退到上一个目录，直接cd进入默认目录</span><br><span class="line"></span><br><span class="line">3）、pwd : 显示当前所在的目录路径。</span><br><span class="line"></span><br><span class="line">4）、ls(ll):  都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。</span><br><span class="line"></span><br><span class="line">5）、touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。</span><br><span class="line"></span><br><span class="line">6）、rm:  删除一个文件, rm index.js 就会把index.js文件删除。</span><br><span class="line"></span><br><span class="line">7）、mkdir:  新建一个目录,就是新建一个文件夹。</span><br><span class="line"></span><br><span class="line">8）、rm -r :  删除一个文件夹, rm -r src 删除src目录</span><br><span class="line"></span><br><span class="line">rm -rf / 切勿在Linux中尝试！删除电脑中全部文件！</span><br><span class="line"></span><br><span class="line">9）、mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。</span><br><span class="line"></span><br><span class="line">10）、reset 重新初始化终端/清屏。</span><br><span class="line"></span><br><span class="line">11）、clear 清屏。</span><br><span class="line"></span><br><span class="line">12）、history 查看命令历史。</span><br><span class="line"></span><br><span class="line">13）、help 帮助。</span><br><span class="line"></span><br><span class="line">14）、exit 退出。</span><br><span class="line"></span><br><span class="line">15）、#表示注释</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="🎄Git的工作流程"><a href="#🎄Git的工作流程" class="headerlink" title="🎄Git的工作流程"></a>🎄Git的工作流程</h1><p>下面将给出Git的工作流程图：</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2015/02/git-process.png" alt="工作流程"></p>
<p>接下来理解下 Git 工作区、暂存区和版本库概念：</p>
<ul>
<li><strong>工作区：</strong>就是你在电脑里能看到的目录。</li>
<li><strong>暂存区：</strong>英文叫 stage 或 index。一般存放在 <strong>.git</strong> 目录下的 index 文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li>
<li><strong>版本库：</strong>工作区有一个隐藏目录 <strong>.git</strong>，这个不算工作区，而是 Git 的版本库。</li>
</ul>
<p>下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2015/02/1352126739_7909.jpg" alt="img"></p>
<ul>
<li>图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage/index），标记为 “master” 的是 master 分支所代表的目录树。</li>
<li>图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个”游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。</li>
<li>图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下，里面包含了创建的各种对象及内容。</li>
<li>当对工作区修改（或新增）的文件执行 <strong>git add</strong> 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。</li>
<li>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</li>
</ul>
<p><strong>主要流程</strong>：</p>
<p>&emsp;&emsp;1<code>.git</code> 同文件工作区在 <code>Git Bash</code> 中  通过 <code>git add (.git目录下文件名/. )</code> 向暂存区中添加文件</p>
<p>&emsp;&emsp;2. 再通过 <code>git commit -m &quot;备注信息(必须写)&quot;</code>将暂存区中的文件提交到版本库中</p>
<p>&emsp;&emsp;3. 如果有配置远程的仓库，则需要最后通过 <code>git push -u origin 分支名</code> 进行远程和本地的代码同步</p>
<h1 id="📮搭建远程仓库"><a href="#📮搭建远程仓库" class="headerlink" title="📮搭建远程仓库"></a>📮搭建远程仓库</h1><p>&emsp;&emsp;现在终于要用到那个秘钥了：</p>
<blockquote>
<p>生成公钥,过后会在.ssh中生成一个 id_rsa 以及 id_rsa.pub  分别为私人秘钥和公开秘钥 ，公开秘钥可以解密为私钥</p>
</blockquote>
<p>&emsp;&emsp;<strong>1. 首先在Gitee上创建自己仓库，选择语言以及初始化条件，推荐选择README，具体可以自行研究</strong></p>
<p>&emsp;&emsp;<strong>2. 复制<code>id_rsa.pub</code> 中的内容，然后在Gitee中：设置 —&gt; SSH公钥 —&gt; 添加公钥 —&gt;粘贴 (标题自填) —&gt; 保存</strong></p>
<p>总的来说远程仓库已经搭建完毕，现在就需要进行下一步，将本地仓库与远程仓库进行连接.</p>
<p><strong>初始化本地仓库</strong></p>
<p>&emsp;&emsp;初始化的方式分为2种，一种为本地在 <code>Git Bash</code> 中使用 <code>git init</code> 进行初始化；</p>
<p>&emsp;&emsp;第二种方式为在 <code>Git Bash</code> 中对远程仓库进行克隆 ，命令为 <code>git clone URL(克隆/下载中的https链接)</code></p>
<p><strong>本地仓库与远程仓库建立连接</strong></p>
<p>&emsp;&emsp;进行如下命令前别忘记了对本地工作区目录进行 <code>add</code> 以及 <code>commit</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">$ git remote add origin SSH链接  //为远程Git更名为origin，SSH链接在Gitee中的仓库里选择 克隆/下载 复制SSH链接即可</span><br><span class="line"></span><br><span class="line">$ git pull --rebase origin master//如果远程仓库初始化了readme文件，需要拉下来同步代码</span><br><span class="line"></span><br><span class="line">$ git push -u origin master //推送此次修改,后面再次提交就可以直接git push </span><br></pre></td></tr></table></figure>

<hr>
<p><strong>注意：如若在新的本地仓库中提交新文件，需要将远程仓库的代码  <code>git pull --rebase origin master</code>  拉下来然后再进行 <code>push</code> 即可 ， 不然会报错，至于原因，假设本地仓库只有一个文件，远程仓库有很多文件，如果直接提交，总不能拿一个文件直接覆盖掉远程仓库的所有文件吧，会造成文件缺失，这个机制还是非常人性化的哈.</strong></p>
<h1 id="⚽IDE中集成Git"><a href="#⚽IDE中集成Git" class="headerlink" title="⚽IDE中集成Git"></a>⚽IDE中集成Git</h1><p>&emsp;&emsp;我只在 <code>Jetbrains</code> 家中的 <code>IDE</code> 进行了测试，所以就用其中的 <code>idea</code> 来举例说明， 只需要将你初始化本地仓库创建的 <code>.git</code> 文件复制到该工程下，如下图所示，即可</p>
<img src="/2021/04/09/%E4%BB%A3%E7%A0%81%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Git/1.png" class title="示例1">



<p>&emsp;&emsp;或者直接在该路径下，在 <code>Git Bash</code> 中输入命令 <code>git init</code> 进行初始化，也可以产生 <code>.git</code> 文件 ， 过后就可以在  <code>idea</code> 中的终端输入命令进行操作，就跟在 <code>Git Bash</code> 中的操作一样</p>
<img src="/2021/04/09/%E4%BB%A3%E7%A0%81%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7Git/2.png" class title="示例2">



<p>如上图，这是IDE中终端的打开方式~~</p>
<h1 id="待后续更新-Git中的分支操作-以及更多细节部分······"><a href="#待后续更新-Git中的分支操作-以及更多细节部分······" class="headerlink" title="待后续更新 Git中的分支操作 以及更多细节部分······"></a>待后续更新 Git中的分支操作 以及更多细节部分······</h1>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题(一):快速排序</title>
    <url>/2021/06/11/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="🚡快速排序"><a href="#🚡快速排序" class="headerlink" title="🚡快速排序"></a>🚡快速排序</h1><blockquote>
<p>​        快速排序由C. A. R. Hoare在1962年提出。它的基本思想是:通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以<a href="https://baike.so.com/doc/5725016-5937752.html">递归</a>进行，以此达到整个数据变成有序序列。</p>
</blockquote>
<p>快速排序简称快排，是基本的排序方法之一，快排在最好的情况下的时间复杂度为<code>O(nlogn)</code> ，最坏的情况下为 O(n<sup>2</sup>)，总体来说还算可以了，有一说一.</p>
<h2 id="思路解析"><a href="#思路解析" class="headerlink" title="思路解析"></a>思路解析</h2><p>快速排序属于典型的<code>分治+递归</code>实现的算法，所谓分治，就是分而治之，然后对每一块进行同样的操作处理从而达到排序的效果.具体分析就是，我们<font color="red">选定一个基准值，然后将一个数组通过某些操作划分为俩个区间（分治），区间的值<code>&gt;=</code>基准值 ， 一个区间的值 <code>&lt;=</code> 基准值 ，也就是将比基准值小的值放到其左边，大的值放到其右边， 这样再分别对这俩个小区间进行同样的操作(递归)，最终将数组排成有序的.</font></p>
<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><img src="/2021/06/11/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/1.png" class title="题目">

<p>题目来源于：Acwing</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义数组长度</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="comment">//用于接收需要排序的数组</span></span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> l , <span class="keyword">int</span> r , <span class="keyword">int</span> s[])</span></span>&#123;</span><br><span class="line">    <span class="comment">//如果区间中只有一个值或者没有值，则递归结束</span></span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">	<span class="comment">// 取中间点为基准值</span></span><br><span class="line">    <span class="keyword">int</span> x = s[(l+r) &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="comment">//为了配合下方循环的形式，故做了一定坐标的偏移</span></span><br><span class="line">    <span class="keyword">int</span> i = l<span class="number">-1</span> , j = r+<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//当左端点 小于 右端点的时候继续循环</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">        <span class="comment">//当值小于基准值的时候一直向右端移动</span></span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span>(s[i] &lt; x);</span><br><span class="line">        <span class="comment">//当值大于基准值的时候一直向左端移动</span></span><br><span class="line">        <span class="keyword">do</span> j--; <span class="keyword">while</span>(s[j] &gt; x);</span><br><span class="line">        <span class="comment">//如果 i 小于 j 则交换这两处的值</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) <span class="built_in">swap</span>(s[i],s[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//分别对基准值左右俩个区间进行分别排序</span></span><br><span class="line">    <span class="built_in">quick_sort</span>(l , j , s),<span class="built_in">quick_sort</span>(j+<span class="number">1</span> , r , s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//传入初始坐标,末尾坐标,需要排序的数组</span></span><br><span class="line">    <span class="built_in">quick_sort</span>(<span class="number">0</span> , m<span class="number">-1</span> , a);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; m ; i++)&#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul>
<li><strong>使用Scanner读入</strong>：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//Java没有自带的交换函数,同时想要高交换效率</span></span><br><span class="line">    <span class="comment">//在别人的博客中学到了这一种高效率的交换方式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        nums[i] ^= nums[j];</span><br><span class="line">        nums[j] ^= nums[i];</span><br><span class="line">        nums[i] ^= nums[j];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> l , <span class="keyword">int</span> r , <span class="keyword">int</span> q[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt;= r ) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> x = q[l+r&gt;&gt;<span class="number">1</span>],i = l-<span class="number">1</span> , j = r+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">do</span> i++; <span class="keyword">while</span>(q[i] &lt; x);</span><br><span class="line">            <span class="keyword">do</span> j--; <span class="keyword">while</span>(q[j] &gt; x);</span><br><span class="line">            <span class="keyword">if</span>(i &lt; j) swap(q,i,j);</span><br><span class="line">        &#125;</span><br><span class="line">        quick_sort(l , j , q);</span><br><span class="line">        quick_sort(j+<span class="number">1</span> , r , q);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> [] a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; n ; j++) a[j] = sc.nextInt() ;</span><br><span class="line">        </span><br><span class="line">        quick_sort(<span class="number">0</span>,n-<span class="number">1</span>,a);</span><br><span class="line">        </span><br><span class="line">      	<span class="keyword">for</span>(<span class="keyword">int</span> i : a) System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><strong>使用BufferRead进行读入</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] swap(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j) &#123;</span><br><span class="line">        nums[i] ^= nums[j];</span><br><span class="line">        nums[j] ^= nums[i];</span><br><span class="line">        nums[i] ^= nums[j];</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> l , <span class="keyword">int</span> r , <span class="keyword">int</span> q[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt;= r ) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> x = q[l+r&gt;&gt;<span class="number">1</span>],i = l-<span class="number">1</span> , j = r+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">do</span> i++; <span class="keyword">while</span>(q[i] &lt; x);</span><br><span class="line">            <span class="keyword">do</span> j--; <span class="keyword">while</span>(q[j] &gt; x);</span><br><span class="line">            <span class="keyword">if</span>(i &lt; j) swap(q,i,j);</span><br><span class="line">        &#125;</span><br><span class="line">        quick_sort(l , j , q);</span><br><span class="line">        quick_sort(j+<span class="number">1</span> , r , q);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(reader.readLine());</span><br><span class="line">        <span class="keyword">int</span> [] a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        String [] str = reader.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; str.length ; j++) a[j] = Integer.parseInt(str[j]);</span><br><span class="line">        </span><br><span class="line">        quick_sort(<span class="number">0</span>,n-<span class="number">1</span>,a);</span><br><span class="line">        </span><br><span class="line">       	<span class="keyword">for</span>(<span class="keyword">int</span> i : a) System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        reader.close();</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>注意：俩种不同的方式读入差距还是比较大的，推荐使用<code>BufferedReader</code>读入</p>
<img src="/2021/06/11/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/2.png" class title="比较">



<h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><img src="/2021/06/11/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/3.png" class title="图解">

<img src="/2021/06/11/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/4.png" class title="图解">

<img src="/2021/06/11/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/5.png" class title="图解">

<img src="/2021/06/11/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/6.png" class title="图解">

<img src="/2021/06/11/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/7.png" class title="图解">

<img src="/2021/06/11/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/8.png" class title="图解">



<p><strong>有一说一</strong>：画图真的好累，要不是没有找到比较好的图解，也不至于自己画，2333.</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>微信公众号后端开发(一):access_token以及OpenID</title>
    <url>/2021/05/24/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="🎑基本概念"><a href="#🎑基本概念" class="headerlink" title="🎑基本概念"></a>🎑基本概念</h1><p>​    </p>
<p><strong><code>access_token</code></strong></p>
<p>​        <code>access_token</code>是公众号的全局唯一接口调用凭据，公众号调用各接口时都需使用<code>access_token</code>。开发者需要进行妥善保存。<code>access_token</code>的存储至少要保留512个字符空间。<code>access_token</code>的有效期目前为2个小时，需定时刷新，重复获取将导致上次获取的<code>access_token</code>失效。</p>
<p><strong><code>OpenID</code></strong></p>
<p>​        为了识别用户，每个用户针对每个公众号会产生一个安全的<code>OpenID</code>，如果需要在多公众号、移动应用之间做用户共通，则需前往微信开放平台，将这些公众号和应用绑定到一个开放平台账号下，绑定后，一个用户虽然对多个公众号和应用有多个不同的<code>OpenID</code>，但他对所有这些同一开放平台账号下的公众号和应用，只有一个<code>UnionID</code>，可以在用户管理-获取用户基本信息（<code>UnionID</code>机制）文档了解详情。</p>
<h1 id="✨获取access-token"><a href="#✨获取access-token" class="headerlink" title="✨获取access_token"></a>✨获取access_token</h1><p><strong>接口调用请求说明</strong></p>
<blockquote>
<p>https请求方式: GET</p>
<p> <code>https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&#123;&#123;appid&#125;&#125;&amp;secret=&#123;&#123;appsecret&#125;&#125;</code></p>
</blockquote>
<p><strong>参数说明</strong></p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必须</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">grant_type</td>
<td align="left">是</td>
<td align="left">获取access_token填写client_credential</td>
</tr>
<tr>
<td align="left">appid</td>
<td align="left">是</td>
<td align="left">第三方用户唯一凭证</td>
</tr>
<tr>
<td align="left">secret</td>
<td align="left">是</td>
<td align="left">第三方用户唯一凭证密钥，即appsecret</td>
</tr>
</tbody></table>
<p><strong>返回说明</strong></p>
<p>正常情况下，微信会返回下述JSON数据包给公众号：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;access_token&quot;</span>:<span class="string">&quot;ACCESS_TOKEN&quot;</span>,<span class="attr">&quot;expires_in&quot;</span>:<span class="number">7200</span>&#125;</span><br></pre></td></tr></table></figure>

<p><strong>参数说明</strong></p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">access_token</td>
<td align="left">获取到的凭证</td>
</tr>
<tr>
<td align="left">expires_in</td>
<td align="left">凭证有效时间，单位：秒</td>
</tr>
</tbody></table>
<p>错误时微信会返回错误码等信息，JSON数据包示例如下（该示例为AppID无效错误）:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;errcode&quot;</span>:<span class="number">40013</span>,<span class="attr">&quot;errmsg&quot;</span>:<span class="string">&quot;invalid appid&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p><strong>返回码说明</strong></p>
<table>
<thead>
<tr>
<th align="left">返回码</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-1</td>
<td align="left">系统繁忙，此时请开发者稍候再试</td>
</tr>
<tr>
<td align="left">0</td>
<td align="left">请求成功</td>
</tr>
<tr>
<td align="left">40001</td>
<td align="left">AppSecret错误或者AppSecret不属于这个公众号，请开发者确认AppSecret的正确性</td>
</tr>
<tr>
<td align="left">40002</td>
<td align="left">请确保grant_type字段值为client_credential</td>
</tr>
<tr>
<td align="left">40164</td>
<td align="left">调用接口的IP地址不在白名单中，请在接口IP白名单中进行设置。（小程序及小游戏调用不要求IP地址在白名单内。）</td>
</tr>
<tr>
<td align="left">89503</td>
<td align="left">此IP调用需要管理员确认,请联系管理员</td>
</tr>
<tr>
<td align="left">89501</td>
<td align="left">此IP正在等待管理员确认,请联系管理员</td>
</tr>
<tr>
<td align="left">89506</td>
<td align="left">24小时内该IP被管理员拒绝调用两次，24小时内不可再使用该IP调用</td>
</tr>
<tr>
<td align="left">89507</td>
<td align="left">1小时内该IP被管理员拒绝调用一次，1小时内不可再使用该IP调用</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>微信公众号</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题(七):动态规划</title>
    <url>/2021/07/27/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%B8%83%EF%BC%89/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/2021/07/27/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%B8%83%EF%BC%89/1.png" class>

<p>原题连接: <a href="https://leetcode-cn.com/problems/house-robber/">点这里</a></p>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>看到这题，很明显能感觉到要用动态规划，实际上，拿草稿纸试了一试能写出递推，果然可以用动态规划，当然了我们需要先确定状态方程的含义，<code>dp[i] </code> 表示前<code>i</code> 间房子能偷的最大金额(这一点也需要想清楚，这是因为本质上，最大金额是由局部最大叠加导致的，即保证前面能取到最大，相应的后面的也取最大就能保证这一段区间内取到最大，即dp[i] 的值取决于 dp[i-1] ，dp[i-2]等等的值的大小)，这里粘上大佬画的图(白嫖怪狂喜)</p>
<img src="/2021/07/27/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%B8%83%EF%BC%89/2.png" class>

<p>我们可以从只有 1 间房子 和 只有 2 间房子然后再只要 3 间房子乃至 4、5····依次手动计算一下，然后可以慢慢的写出表达式，写的表达式要具有普遍性，纯理论分析的话就如下图这般，动态规划问题本质上就是能将问题抽象成递推关系，如何找出递推关系就是动态规划的难点.</p>
<img src="/2021/07/27/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%B8%83%EF%BC%89/3.png" class>



<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (nums.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">//只有一间的时候</span></span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义vector数组</span></span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; dp = vector&lt;<span class="keyword">int</span>&gt;(size, <span class="number">0</span>);</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="comment">//递推表达式</span></span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">2</span>] + nums[i], dp[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[size - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> [] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">5</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = Math.max(nums[<span class="number">0</span>],nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span> ; i &lt; n ; i++)&#123;</span><br><span class="line">          dp[i] = Math.max(dp[i-<span class="number">2</span>]+nums[i],dp[i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><p>十分想吐槽一下<code>Go</code>的<code>Api</code> , 数学类的<code>api</code>形参类型也太局限了，还不支持 三目表达式，确实很有效的统一了编码风格hhh</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rob</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    dp := <span class="built_in">make</span>([]<span class="keyword">int</span> , n+<span class="number">5</span>)</span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">    dp[<span class="number">1</span>] = max(nums[<span class="number">0</span>] , nums[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">2</span> ; i &lt; n ; i++ &#123;</span><br><span class="line">        dp[i] = max(dp[i<span class="number">-2</span>]+nums[i],dp[i<span class="number">-1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n<span class="number">-1</span>];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(x , y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>每日一题</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题(三):双指针算法</title>
    <url>/2021/06/15/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h1 id="🚠双指针算法"><a href="#🚠双指针算法" class="headerlink" title="🚠双指针算法"></a>🚠双指针算法</h1><p>范式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; i &amp;&amp; <span class="built_in">check</span>(i, j)) j ++ ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 具体问题的逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><img src="/2021/06/15/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%B8%89%EF%BC%89/1.png" class title="题目">

<p>原题链接：<a href="https://www.acwing.com/problem/content/801/">最长连续不重复子序列</a></p>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>利用双指针，形成数的连续区间，指针<code>j</code>位于区间头部，<code>i</code>位于区间尾部，当指针<code>i</code> 不断向后遍历的时候，如果区间中存在相同的数，则指针<code>j</code>向前移动直到区间内没有重复的数字，指针<code>j</code> 最远移动到和指针<code>i</code>重合的位置，那么不重复的连续区间长度即指针<code>i</code>与指针<code>j</code>之间的距离.</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="comment">//q数组用于记录原来的数组</span></span><br><span class="line"><span class="comment">//s数组用于记录指针区间内q数组中每个数的出现次数</span></span><br><span class="line"><span class="keyword">int</span> q[N], s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) cin &gt;&gt; q[i];</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//s数组存储的是q数组中每个数的出现次数</span></span><br><span class="line">        s[q[i]] ++ ;</span><br><span class="line">        <span class="comment">//当指针i在向右进行扫描的时候出现了重复的数字则s数组中对应的值必然大于 1</span></span><br><span class="line">        <span class="comment">//如果出现 区间 出现重复的数字，先将指针j处指向的数组数字出现次数 -1 (s数组记录的是两个指针之间的数字的出现的次数)</span></span><br><span class="line">        <span class="comment">//再将指针 j 向后移动(出现重复数字必然是指针j处和指针i处的值)</span></span><br><span class="line">        <span class="keyword">while</span> (j &lt; i &amp;&amp; s[q[i]] &gt; <span class="number">1</span>) s[q[j]]-- , j++ ;</span><br><span class="line">        <span class="comment">//获取区间长度</span></span><br><span class="line">        res = <span class="built_in">max</span>(res, i - j + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[N], perSum = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">static</span> BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        n = Integer.parseInt(reader.readLine());</span><br><span class="line">        String[] arrStrs = reader.readLine().split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            arr[i] = Integer.parseInt(arrStrs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            perSum[arr[i]]++;</span><br><span class="line">            <span class="keyword">while</span>(perSum[arr[i]] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                perSum[arr[j]]--;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            count = Math.max(count, i - j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        reader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题(二):双指针算法</title>
    <url>/2021/06/12/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="🎃双指针算法"><a href="#🎃双指针算法" class="headerlink" title="🎃双指针算法"></a>🎃双指针算法</h1><p>何为双指针？其实在算法中是一种技巧性的东西，这个指针也并非如同<code>C语言</code> 那种指针，只是一种标识，用于表示状态，很凑巧，在上一篇每日一题中的快速排序就使用了双指针算法,十分经典，并且属于对撞指针（通俗的讲就是相向扫描），当然了，既然有相向扫描，也肯定有同向扫描，比较常用于字符串比对，分治之中.</p>
<p>突然有个不错的想法，每日一题连续更新同一类型的题目，这样有便于全面掌握一种算法.</p>
<p>这里附上上一篇文章的链接以供复习.</p>
<p><a href="https://soul-pe.gitee.io/shdsoul/2021/06/11/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/">每日一题(一):快速排序</a></p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><img src="/2021/06/12/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/1.png" class title="题目">

<p>题目来源：Acwing：<a href="https://www.acwing.com/problem/content/description/773/">原题链接</a></p>
<h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>我们只需要，遍历每一个字符，然后将字符与后方的字符逐一比较，相同则继续向后比较并记录连续次数，不同则停止比较，继续向后方遍历即可.</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//用于接收输入的字符串</span></span><br><span class="line">    string str;</span><br><span class="line">    <span class="comment">//用于接收输入的字符串数量</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">//当 n 为 0 的时候停止输入</span></span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        cin &gt;&gt; str;</span><br><span class="line">        <span class="comment">//定义最大长度为 -1</span></span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">//记录最多重复的字符</span></span><br><span class="line">        string maxs;</span><br><span class="line">        <span class="comment">//指针i :遍历输入的字符</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; str.<span class="built_in">size</span>() ; i++)&#123;</span><br><span class="line">            <span class="comment">//指针j :用于字符串比较</span></span><br><span class="line">            <span class="keyword">int</span> j = i; <span class="comment">//由于要求连续,所以默认开始扫描的地方为 指针i 的位置,只需要遍历后面，不需要管前面</span></span><br><span class="line">            <span class="keyword">int</span> nums = <span class="number">0</span>;<span class="comment">//用于记录连续次数</span></span><br><span class="line">            <span class="comment">//当指针j指向的值与指针i指向的值相同的时候,并且j指针没有越界的时候</span></span><br><span class="line">            <span class="keyword">while</span>(str[j] == str[i] &amp;&amp; j &lt; str.<span class="built_in">size</span>())</span><br><span class="line">                <span class="comment">//指针j向后移动,连续次数自增1</span></span><br><span class="line">                j++ , nums++;</span><br><span class="line">            <span class="comment">//如果连续次数大于最大值则进行记录,并且记录当前字符    </span></span><br><span class="line">            <span class="keyword">if</span>(nums &gt; max)</span><br><span class="line">                max = nums,maxs = str[i];</span><br><span class="line">            <span class="comment">//当指针j停止移动时,[i,j)区间中必然全是相同的字符,此时 i只需要从j的位置开始继续遍历即可</span></span><br><span class="line">            i = j <span class="number">-1</span>;<span class="comment">//这里减1,是为了抵消掉循环中的 i++</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; nums &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; max;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">int</span> n = Integer.parseInt(reader.readLine());</span><br><span class="line">        <span class="keyword">while</span>(n-- != <span class="number">0</span>)&#123;</span><br><span class="line">            String s = reader.readLine();</span><br><span class="line">            <span class="keyword">char</span> c = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            <span class="keyword">int</span> max = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; s.length() ; i++)&#123;</span><br><span class="line">                <span class="keyword">int</span> j = i;</span><br><span class="line">                <span class="keyword">int</span> nums = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(j &lt; s.length() &amp;&amp; s.charAt(i) == s.charAt(j))&#123; </span><br><span class="line">                    j++;</span><br><span class="line">                    nums++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(nums &gt; max)&#123;</span><br><span class="line">                    max = nums ;</span><br><span class="line">                    c = s.charAt(i);</span><br><span class="line">                &#125;</span><br><span class="line">                i = j - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(c + <span class="string">&quot; &quot;</span> + max);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题(九):动态规划</title>
    <url>/2021/07/28/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%B9%9D%EF%BC%89/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/2021/07/28/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%B9%9D%EF%BC%89/1.png" class>

<p>原题链接：<a href="https://leetcode-cn.com/problems/maximum-subarray/">点这里</a></p>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p><strong>方案一：</strong>  暴力求解</p>
<p>利用双重循环进行遍历，比较记录最大值，返回即可.</p>
<p><strong>方案二：</strong>动态规划</p>
<p>采用动态规划的思想，拆分成子问题，当只有 <code>[-2,-1]</code>的时候，此时总共有三种情况，分别是<code>[-2] 、[-1] 、[-2,-1]</code> 我们只需要进行大小比较即可，显然 <code>[-1]</code> 更大，为了得到状态方程，我们需要确定<code>dp数组</code>的作用，为了建立递推关系，显然我们可以将<code>[-2,-1]</code>的数组看成由 <code>[-2]</code> 单个数组，后来增加了<code>[-1]</code>，那么对于 <code>-2</code> 单数组而言其最大和为 <code>-2</code> ，不妨设<code>dp[i]</code> 为 数组中下标<code>[0,i]</code>的连续子串的最大和，于是对于<code>[-2,-1]</code> 而言，需要对于 <code>( -2 + -1 ) 与 -1</code> 进行比较，<strong>注意 <code>dp[i]</code>的值是一定与<code>原数组[i]</code>有关系的，但不一定是最大和</strong>，于是我们需要用一个变量去实时记录这个最大值，于是很容易就可以写出状态转移方程.</p>
<p><code>dp[i] = max(dp[i-1]+nums[i] , nums[i])</code></p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span></span><br><span class="line"><span class="function">        <span class="keyword">int</span> vector&lt;<span class="keyword">int</span>&gt; dp </span>= vector&lt;<span class="keyword">int</span>&gt;(nums.<span class="built_in">size</span>(),<span class="number">0</span>);</span><br><span class="line">    	<span class="comment">//记录最大值</span></span><br><span class="line">    	<span class="keyword">int</span> maxAns = nums[<span class="number">0</span>];</span><br><span class="line">    	dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; nums.<span class="built_in">size</span>() ; i++ ) &#123;</span><br><span class="line">            dp[i]= <span class="built_in">max</span>(dp[i<span class="number">-1</span>] + nums[i], nums[i]);</span><br><span class="line">            maxAns = <span class="built_in">max</span>(maxAns, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxAns;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> [] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">int</span> ans = nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; nums.length ; i++)&#123;</span><br><span class="line">            dp[i] = Math.max(dp[i-<span class="number">1</span>] + nums[i] , nums[i]);</span><br><span class="line">            ans = ans &gt;= dp[i] ? ans : dp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSubArray</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    dp := <span class="built_in">make</span>([]<span class="keyword">int</span> , <span class="built_in">len</span>(nums))</span><br><span class="line">    ans := nums[<span class="number">0</span>]</span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span> ; i &lt; <span class="built_in">len</span>(nums) ; i++ &#123;</span><br><span class="line">        dp[i] = max(dp[i<span class="number">-1</span>] + nums[i] , nums[i])</span><br><span class="line">        <span class="keyword">if</span> ans &lt; dp[i] &#123;</span><br><span class="line">            ans = dp[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">( x , y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>每日一题</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题(八):动态规划</title>
    <url>/2021/07/27/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E5%85%AB%EF%BC%89/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/2021/07/27/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E5%85%AB%EF%BC%89/1.png" class>

<p>原题链接：<a href="https://leetcode-cn.com/problems/delete-and-earn/">点这里</a></p>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>删除数组中数值为<code>i</code> 的数，那么则需要同时删除所有数值为 <code>i-1</code> 和 <code>i+1</code> 的值，并且同时获得所删除的数值大小的点数，可以操作多次，这就让人想到打家劫舍中的一个设定，不能偷相邻的俩家，这俩个设定有点如出一辙，我们不妨将原数组进行变换，我们将数组中的<code>数值</code>作为下标，<code>数值 * 出现次数</code> 作为对应的值，这样以来就完全变成了<code>打家劫舍</code>，唯一不同的是，新的数组中并不是连续的，存在数值为 0 的值存在，正因为是 0 所以并不影响计算，状态表达式：</p>
<p><code>dp[i] = max(dp[i-2]+trans[i] , dp[i-1])</code></p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; dp = vector&lt;<span class="keyword">int</span>&gt;(size , <span class="number">0</span>);</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>], dp[<span class="number">1</span>] = <span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; size; i++) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i<span class="number">-2</span>]+nums[i] , dp[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[size<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteAndEarn</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxVal = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//取最大值便于确定数组长度,也可以直接开巨大</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> val : nums) &#123;</span><br><span class="line">            maxVal = <span class="built_in">max</span>(maxVal, val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">sum</span><span class="params">(maxVal + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="comment">//将原数组进行转换</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> val : nums) &#123;</span><br><span class="line">            sum[val] += val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//后面跟打家劫舍是一样的了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rob</span>(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteAndEarn</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] trans = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10005</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; nums.length ; i++)</span><br><span class="line">            trans[nums[i]] += nums[i];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10005</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = trans[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = Math.max(trans[<span class="number">0</span>] , trans[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span> ; i &lt; dp.length ; i++)</span><br><span class="line">            dp[i] = Math.max(dp[i-<span class="number">2</span>]+trans[i],dp[i-<span class="number">1</span>]);</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> dp[dp.length-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteAndEarn</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    maxVal:=<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _,val:=<span class="keyword">range</span> nums&#123;</span><br><span class="line">        maxVal=max(maxVal,val)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// sum[v] 代表 序号为v的 和，也就是nums中所有的v的和</span></span><br><span class="line">    sum:=<span class="built_in">make</span>([]<span class="keyword">int</span>,maxVal+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> _,v:=<span class="keyword">range</span> nums&#123;</span><br><span class="line">        sum[v]+=v </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rob(sum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rob</span><span class="params">(nums []<span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="comment">//dp[i] 代表 第i个 删除的时候的所有的和</span></span><br><span class="line">    dp:=<span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="built_in">len</span>(nums))</span><br><span class="line">    dp[<span class="number">0</span>]=nums[<span class="number">0</span>]</span><br><span class="line">    dp[<span class="number">1</span>]=max(dp[<span class="number">0</span>],nums[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">2</span>;i&lt;<span class="built_in">len</span>(nums);i++ &#123;</span><br><span class="line">        dp[i]=max(dp[i<span class="number">-1</span>],dp[i<span class="number">-2</span>]+nums[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="built_in">len</span>(nums)<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(a,b <span class="keyword">int</span>)</span><span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; b &#123;</span><br><span class="line">        <span class="keyword">return</span> a </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题(十一):动态规划</title>
    <url>/2021/07/30/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/2021/07/30/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89/1.png" class>

<p>原题链接:<a href="https://leetcode-cn.com/problems/best-sightseeing-pair/">点这里</a></p>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>只需要将 <code>values[i] + values[j] + i - j</code>  ===&gt; <code>values[i]  + i + values[j] - j</code>  如此就可以看成求俩个数的最大和了，只需动态的记录最大值即可.</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxScoreSightseeingPair</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> leftMax = values[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; values.<span class="built_in">size</span>() ; i++)&#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res , leftMax + values[i] - i);</span><br><span class="line">            leftMax = <span class="built_in">max</span>(leftMax , values[i] + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxScoreSightseeingPair</span><span class="params">(<span class="keyword">int</span>[] values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> leftMax = values[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; values.length ; i ++)&#123;</span><br><span class="line">            res = Math.max(res , leftMax + values[i] - i);</span><br><span class="line">            leftMax = Math.max(leftMax , values[i] + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxScoreSightseeingPair</span><span class="params">(values []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    res := <span class="number">-1</span></span><br><span class="line">    leftMax := values[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span> ; i &lt; <span class="built_in">len</span>(values) ; i++ &#123;</span><br><span class="line">        res = max(res , leftMax + values[i] - i)</span><br><span class="line">        leftMax = max(leftMax , values[i] + i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(x , y <span class="keyword">int</span>)</span><span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>每日一题</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题(十二):动态规划</title>
    <url>/2021/08/09/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/2021/08/09/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89/1.png" class>



<p>原题链接:<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/">点这里</a></p>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>这一道题和上一道题几乎一模一样，我们只需要一直维护左边的最小值即可，动态计算能获取的最大收益，由于利润的最小值为 0 , 所以在给结果赋初始值的时候直接赋值 0 即可.</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> leftMin = values[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; values.<span class="built_in">size</span>() ; i++)&#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res ,values[i] - leftMin);</span><br><span class="line">            leftMin = <span class="built_in">min</span>(leftMin , values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> leftMin = values[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; values.length ; i ++)&#123;</span><br><span class="line">            res = Math.max(res , values[i] - leftMin);</span><br><span class="line">            leftMin = Math.min(leftMin , values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxProfit</span><span class="params">(values []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    res := <span class="number">0</span></span><br><span class="line">    leftMin := values[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span> ; i &lt; <span class="built_in">len</span>(values) ; i++ &#123;</span><br><span class="line">        res = max(res ,values[i] - leftMin)</span><br><span class="line">        leftMin = min(leftMin , values[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(x , y <span class="keyword">int</span>)</span><span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(x , y <span class="keyword">int</span>)</span><span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &lt; y &#123;</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>每日一题</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题(十):动态规划</title>
    <url>/2021/07/29/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E5%8D%81%EF%BC%89/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/2021/07/29/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E5%8D%81%EF%BC%89/1.png" class>

<p>原题链接：<a href="https://leetcode-cn.com/problems/maximum-sum-circular-subarray/">点这里</a></p>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>这道题和上一道题很像，就是多了一种情况，那就是取边界值，这种情况下可以通过求子数组的最小值然后通过数组值总和减去这个最小值即可.</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubarraySumCircular</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>() == <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">max</span>(nums[<span class="number">0</span>] , nums[<span class="number">1</span>]);</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; dp = vector&lt;<span class="keyword">int</span>&gt;(nums.<span class="built_in">size</span>(),<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">int</span> maxValue = nums[<span class="number">0</span>] , minValue = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> sum = nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//求最大值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; nums.<span class="built_in">size</span>() ; i++)&#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            dp[i] = nums[i] + <span class="built_in">max</span>(<span class="number">0</span> , dp[i<span class="number">-1</span>]);</span><br><span class="line">            maxValue = <span class="built_in">max</span>(dp[i] , maxValue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//求最小值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span> ; i++)&#123;</span><br><span class="line">            dp[i] = nums[i] + <span class="built_in">min</span>(<span class="number">0</span> , dp[i<span class="number">-1</span>]);</span><br><span class="line">             minValue = <span class="built_in">min</span>(dp[i] ,  minValue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(sum- minValue , maxValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubarraySumCircular</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">1</span>) <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">2</span>) <span class="keyword">return</span> Math.max(nums[<span class="number">0</span>] ,nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">//分别开俩个数组分别求最大子串和最小子串，这个地方也可以优化为一个数组</span></span><br><span class="line">        <span class="comment">//只是需要把 for 要拆成 2 个进行计算</span></span><br><span class="line">        <span class="keyword">int</span> [] dpMax = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length]; </span><br><span class="line">        <span class="keyword">int</span> [] dpMin = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length]; </span><br><span class="line">        dpMax[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        dpMin[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> max = nums[<span class="number">0</span>] , min = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; nums.length ; i++)&#123;</span><br><span class="line">            dpMax[i] = Math.max(dpMax[i-<span class="number">1</span>]+nums[i] , nums[i]);</span><br><span class="line">            dpMin[i] = Math.min(dpMin[i-<span class="number">1</span>]+nums[i] , nums[i]);</span><br><span class="line">            max = Math.max(dpMax[i] , max);</span><br><span class="line">            min = Math.min(dpMin[i] , min);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : nums)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//用一个 for 循环的弊端就是 取的最小值 是全部数组中的 而不是 掐头去尾的子串</span></span><br><span class="line">        <span class="comment">//所以这个地方还需要判断一下</span></span><br><span class="line">        <span class="keyword">if</span>(max &lt; <span class="number">0</span>) <span class="keyword">return</span> max;</span><br><span class="line">        <span class="keyword">return</span> Math.max(sum-min , max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">maxSubarraySumCircular</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> max(nums[<span class="number">0</span>],nums[<span class="number">1</span>])</span><br><span class="line">    &#125;</span><br><span class="line">    dp := <span class="built_in">make</span>([]<span class="keyword">int</span> , <span class="built_in">len</span>(nums) + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">var</span> maxValue , minValue , sum <span class="keyword">int</span></span><br><span class="line">    maxValue = nums[<span class="number">0</span>]</span><br><span class="line">    minValue = nums[<span class="number">0</span>]</span><br><span class="line">    sum = nums[<span class="number">0</span>]</span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求最大值</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span> ; i &lt; <span class="built_in">len</span>(nums) ; i++ &#123;</span><br><span class="line">        sum += nums[i]</span><br><span class="line">        dp[i] = nums[i] + max(<span class="number">0</span> , dp[i<span class="number">-1</span>])</span><br><span class="line">        maxValue = max(maxValue , dp[i])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求最小值</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span> ; i &lt; <span class="built_in">len</span>(nums) - <span class="number">1</span> ; i++ &#123;</span><br><span class="line">        dp[i] = nums[i] + min(<span class="number">0</span> , dp[i<span class="number">-1</span>])</span><br><span class="line">        minValue = min(minValue , dp[i])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max( sum - minValue , maxValue)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(x , y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">max</span><span class="params">(x , y <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> x &gt; y &#123;</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>每日一题</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题(六):动态规划</title>
    <url>/2021/07/25/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E5%85%AD%EF%BC%89/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><img src="/2021/07/25/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E5%85%AD%EF%BC%89/1.png" class>

<p>​    原题链接：<a href="https://leetcode-cn.com/problems/climbing-stairs/">点这里</a></p>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><h2 id="方案一：暴力递归"><a href="#方案一：暴力递归" class="headerlink" title="方案一：暴力递归"></a>方案一：暴力递归</h2><p>看到这一道题 ，我直接想到了使用<code>DFS</code>暴力递归，然而，还是我太年轻了，用<code>Java</code>写用例测到 44 的时候超时了  ， 然而我以为是 <code>Java</code> 执行效率太低导致的，于是用 <code>C++</code> 重写了一波，发现同样超时，果然这题就不是能用 <code>DFS</code> 能写的.这里还是稍微分析一下.</p>
<p>爬 <code>n</code> 层阶梯，我们只需要从最开始  ， 慢慢尝试 ， 比如先走 1 步 ， 后面再走 2 步 又或者是 先走 2 步 再走 2 步 ， 这分为很多种情况，于是我们可以使用 <code>DFS</code> 针对一种情况一直递归到走到底，也就是 <code>dfs(curr + 1 , target),dfs(curr + 2 , target);</code> 针对每一次选择都进行递归，递归结束条件呢？那当然是达终点 <code>curr == target</code> , 此时就可以将方法数 <code>res += 1</code> ， 又或者是 <code>curr &gt; target</code> 此时明显超过了，走多了，就不算为一种方式直接 <code>return</code> 即可.</p>
<h2 id="方案二：动态规划"><a href="#方案二：动态规划" class="headerlink" title="方案二：动态规划"></a>方案二：动态规划</h2><p>利用 <code>dp[n]</code> 数组来计算到达第 n 阶楼梯的方案数量，由于每一次能走 1 步 或者 2 步 ， 则到达 第 <code>n</code> 阶的方案数量取决于到达前面俩阶楼梯的方案数之和，即到达<code>n-1 、 n-2</code> 阶楼梯数的方案之和，因为此时无论在 <code>n-1 / n-2</code> 都可以通过走 1 步 或者 走 2 步到达终点.</p>
<p>于是可以得到状态表达式： <code>dp[i] = dp[i-1] + dp[i-2]</code>  我们只需要依靠一个循环计算这个数组即可.</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><h3 id="暴力递归"><a href="#暴力递归" class="headerlink" title="暴力递归"></a>暴力递归</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//记录答案</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span> ;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从第 0 层开始 ，到达第 n 层</span></span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span> , n );</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> curr , <span class="keyword">int</span> target )</span></span>&#123;</span><br><span class="line">        <span class="comment">// 如果到达则 答案数 + 1</span></span><br><span class="line">        <span class="keyword">if</span>(curr == target ) ans +=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 如果超过了 直接结束本次递归</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (curr &gt; target) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//走一步</span></span><br><span class="line">        <span class="built_in">dfs</span>(curr + <span class="number">1</span> , target);</span><br><span class="line">        <span class="comment">//走二步</span></span><br><span class="line">        <span class="built_in">dfs</span>(curr + <span class="number">2</span> , target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//优化版本</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//由于只需要用到第 i 、 i-1 、i-2 层 的数据 ， 所以只需要三个变量进行动态更新即可 最后返回方案和即可</span></span><br><span class="line">        <span class="comment">// 				r     q    p</span></span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>, q = <span class="number">0</span>, r = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            p = q; </span><br><span class="line">            q = r; </span><br><span class="line">            r = p + q;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通版本</span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n; <span class="comment">// 因为下面直接对dp[2]操作了，防止空指针</span></span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123; <span class="comment">// 注意i是从3开始的</span></span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="暴力递归-1"><a href="#暴力递归-1" class="headerlink" title="暴力递归"></a>暴力递归</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义方案数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从 0 层开始到达第 n 层</span></span><br><span class="line">       	dfs(<span class="number">0</span>,n);</span><br><span class="line">        <span class="comment">//返回结果</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> curr , <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 当前层数 等于 目标层数 方案数 + 1</span></span><br><span class="line">        <span class="keyword">if</span>(curr == target ) res += <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//超过了直接结束递归</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(curr &gt; target) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//走一步</span></span><br><span class="line">        dfs(curr + <span class="number">1</span> , target);</span><br><span class="line">        <span class="comment">//走二步</span></span><br><span class="line">        dfs(curr + <span class="number">2</span> , target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="动态规划-1"><a href="#动态规划-1" class="headerlink" title="动态规划"></a>动态规划</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通版本</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//优化版本</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>, q = <span class="number">0</span>, r = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            p = q; </span><br><span class="line">            q = r; </span><br><span class="line">            r = p + q;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><h3 id="动态规划-2"><a href="#动态规划-2" class="headerlink" title="动态规划"></a>动态规划</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">climbStairs</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    &#125;</span><br><span class="line">    dp := <span class="built_in">make</span>([]<span class="keyword">int</span>, n+<span class="number">1</span>)</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    dp[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">3</span> ; i &lt;= n ; i++ &#123;</span><br><span class="line">        dp[i] = dp[i<span class="number">-1</span>] + dp[i<span class="number">-2</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>每日一题</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题(四):滑动窗口</title>
    <url>/2021/07/14/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://anthony-img-bed.oss-cn-beijing.aliyuncs.com/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E5%9B%9B%EF%BC%89/1.png" alt="image-20210714161119231"></p>
<p>原题链接：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">无重复字符的最长子串</a> —-leetcode</p>
<h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>最常见的莫过于双重循环的暴力解法，但是时间复杂度过高了. </p>
<p>对于子串问题还有一种比较常用的解法，双指针算法，于是考虑使用双指针来进行分析.</p>
<ul>
<li>定义一个<code> map</code> 数据结构存储<code> (k, v)</code>，其中 <code>key</code> 值为字符，<code>value</code> 值为字符位置</li>
<li>我们定义不重复子串的开始位置为 <code>start</code>，结束位置为<code> end</code></li>
<li>随着 <code>end</code> 不断遍历向后，会遇到与 [start, end] 区间内字符相同的情况，此时将字符作为 <code>key</code> 值，获取其 <code>value</code> 值，并更新<code>start</code>，此时<code> [start, end]</code> 区间内不存在重复字符</li>
<li>无论是否更新<code> star</code>t，都会更新其 <code>map</code> 数据结构和结果 <code>ans</code>。</li>
<li>时间复杂度：O(n)</li>
</ul>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义map集合</span></span><br><span class="line">        Map&lt;Character,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//获取字符串长度</span></span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="comment">//定义结果</span></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 头指针 以及 尾指针</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> start = <span class="number">0</span> , end = <span class="number">0</span> ; end &lt; n ; end++)&#123;</span><br><span class="line">            <span class="comment">//取出 字符串中的位于尾指针处的字符</span></span><br><span class="line">            Character element = s.charAt(end);</span><br><span class="line">            <span class="comment">//如果map中含有这个字符</span></span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(element))&#123;</span><br><span class="line">                <span class="comment">//则 头指针需要移动 使 start - end 之间为无重复的字符串</span></span><br><span class="line">                <span class="comment">//同时必须往右移动，往左必然会多重复元素，因此 start 必须大于等于当前 start</span></span><br><span class="line">                <span class="comment">//因此 start 需要取 重复元素坐标的下一个位置的下标 </span></span><br><span class="line">                start = Math.max(map.get(element)+<span class="number">1</span> , start);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(element , end);</span><br><span class="line">            <span class="comment">//获取子串长度 </span></span><br><span class="line">            ans = Math.max(end - start + <span class="number">1</span> , ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//用于记录 每个字符出现的下标位置的下一个位置 </span></span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">m</span><span class="params">(<span class="number">128</span>, <span class="number">0</span>)</span></span>; <span class="comment">//ASCII码范围：0-127</span></span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> end = <span class="number">0</span>; end &lt; s.<span class="built_in">size</span>(); end++) &#123;</span><br><span class="line">            <span class="comment">//如果这个字符以及出现过</span></span><br><span class="line">            <span class="keyword">if</span>(m[s[end]]!=<span class="number">0</span>)  </span><br><span class="line">            <span class="comment">//则移动头指针到 使字符串中无重复字符的位置</span></span><br><span class="line">            <span class="comment">//要么是重复字符的下一位 即 m[s[end]]</span></span><br><span class="line">            <span class="comment">//如果在当前位置之前 start 则不动 </span></span><br><span class="line">            start = <span class="built_in">max</span>(start, m[s[end]]);</span><br><span class="line">			<span class="comment">//将出现的字符加入集合</span></span><br><span class="line">            m[s[end]] = end + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//计算长度</span></span><br><span class="line">            ans = <span class="built_in">max</span>(ans, end - start + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>每日一题</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程(二):服务器开发以及线程池</title>
    <url>/2021/07/20/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前置-多线程"><a href="#前置-多线程" class="headerlink" title="前置-多线程"></a>前置-多线程</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//多线程的实现方式 方式一： 实现 runnable  方式二: 继承Thread类  方式三: 线程池</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式一：实现 runnable 使用匿名内部类</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程名称:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二继承 thread类</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h1><p>服务端只需要创建 <code>ServerSocket</code> 对象即可，再调用<code>accept</code>开启接收客户端的请求，构造器中只需要传入服务所在的端口号即可 ,如果想要读取客户端传递的数，读取完成之后需要加上 <code>shutdownInput</code>.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerSocket01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建服务端</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8989</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器已经启动...&quot;</span>);</span><br><span class="line">        <span class="comment">//开启接收客户端请求</span></span><br><span class="line">        Socket accept = serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取输入流</span></span><br><span class="line">        InputStream inputStream = accept.getInputStream();</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">byte</span> [] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//读取到byte数组</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            len = inputStream.read(bytes);</span><br><span class="line">            <span class="keyword">if</span>(len == -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            stringBuilder.append(<span class="keyword">new</span> String(bytes , <span class="number">0</span> ,len));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(stringBuilder.toString());</span><br><span class="line">        <span class="comment">//表示读入结束 </span></span><br><span class="line">        accept.shutdownInput();</span><br><span class="line"></span><br><span class="line">        OutputStream outputStream = accept.getOutputStream();</span><br><span class="line">        outputStream.write(<span class="string">&quot;Hello Client&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">//表示输出结束</span></span><br><span class="line">        accept.shutdownOutput();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h1><p>客户端需要创建 <code>socket</code> 对象 ，传入 <code>ip</code>地址与端口号. 传递数据需要通过 <code>OutPutStream</code>对象，同样，传输完成后需要<code>shutdownOutPut</code> 进行关闭.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Socket01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		<span class="comment">// 建立连接</span></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;localhost&quot;</span>, <span class="number">8989</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向服务端传递数据</span></span><br><span class="line">        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">        outputStream.write(<span class="string">&quot;Hello Server&quot;</span>.getBytes());</span><br><span class="line">        <span class="comment">//表示输出结束</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取输入留</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">byte</span> [] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//读入byte数组</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            len = inputStream.read(bytes);</span><br><span class="line">            <span class="keyword">if</span>(len == -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">            stringBuilder.append(<span class="keyword">new</span> String(bytes , <span class="number">0</span> ,len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(stringBuilder.toString());</span><br><span class="line">        <span class="comment">//表示输入结束</span></span><br><span class="line">        socket.shutdownInput();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="使用数据过滤器"><a href="#使用数据过滤器" class="headerlink" title="使用数据过滤器"></a>使用数据过滤器</h1><p>这里只举一个小例子，用法都是大同小异的，都是创建<code>DataIn(Out)PutStream</code> 进行转化.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   Socket socket = serverSocket.accept();</span><br><span class="line"><span class="comment">//获取输入六</span></span><br><span class="line">   InputStream inputStream = socket.getInputStream();</span><br><span class="line"><span class="comment">//使用过滤器进行转换</span></span><br><span class="line">   DataInputStream dataInputStream = <span class="keyword">new</span> DataInputStream(inputStream);</span><br><span class="line"><span class="comment">//直接读取</span></span><br><span class="line">   System.out.println(dataInputStream.readUTF());</span><br><span class="line">   socket.shutdownInput();</span><br><span class="line"></span><br><span class="line">   OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">   DataOutputStream dataOutputStream = <span class="keyword">new</span> DataOutputStream(outputStream);</span><br><span class="line">   dataOutputStream.writeUTF(<span class="string">&quot;我是服务端，返回相应的数据....&quot;</span>);</span><br><span class="line">   socket.shutdownOutput();</span><br><span class="line">   System.out.println(<span class="string">&quot;线程名称为:&quot;</span> + Thread.currentThread().getName());</span><br></pre></td></tr></table></figure>

<h1 id="引入线程池"><a href="#引入线程池" class="headerlink" title="引入线程池"></a>引入线程池</h1><p>在原先的程序中，显然是不支持并发处理的，是一个同步的代码，无法促成同时处理多个请求，如果想要实现，则需要利用多线程进行相关的处理.代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerSocket02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8989</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器以及启动.....&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Socket socket = serverSocket.accept();</span><br><span class="line">                        InputStream inputStream = socket.getInputStream();</span><br><span class="line">                        DataInputStream dataInputStream = <span class="keyword">new</span> DataInputStream(inputStream);</span><br><span class="line">                        System.out.println(dataInputStream.readUTF());</span><br><span class="line">                        socket.shutdownInput();</span><br><span class="line"></span><br><span class="line">                        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">                        DataOutputStream dataOutputStream = <span class="keyword">new</span> DataOutputStream(outputStream);</span><br><span class="line">                        dataOutputStream.writeUTF(<span class="string">&quot;我是服务端，返回相应的数据....&quot;</span>);</span><br><span class="line">                        socket.shutdownOutput();</span><br><span class="line">                        System.out.println(<span class="string">&quot;线程名称为:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我在客户端同时发起了 10000 个请求的时候，电脑差点就崩了，内存使用直逼 100% ，浏览器和QQ直接自动退出… 太恐怖了</p>
<p>以上程序存在的问题： 无法线程复用，即第一个线程处理完结束后，就不会再用了，再来请求时则又会创建一个新的请求</p>
<p>如此以来：就需要线程池进行优化线程的使用，提高每个线程的使用率</p>
<img src="/2021/07/20/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/1.png" class>



<p>使用<code>ThreadPoolExecutor</code>创建线程池，同样的可以使用其封装类来更为方便的创建线程池 <code>Executors.newCachedThreadPool()</code> 或者</p>
<p><code>Executors.newFixedThreadPool(10)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayBlockingQueue&lt;Runnable&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        ThreadFactory threadFactory = Executors.defaultThreadFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ThreadPoolExecutor</span></span><br><span class="line">        <span class="comment">//参数1： 核心线程数</span></span><br><span class="line">        <span class="comment">//参数2： 线程池最大数量</span></span><br><span class="line">        <span class="comment">//参数3： 每个线程完成之后的空闲时间</span></span><br><span class="line">        <span class="comment">//参数4： 时间单位</span></span><br><span class="line">        <span class="comment">//参数5： 线程等待队列</span></span><br><span class="line">        <span class="comment">//参数6： 线程工厂 --&gt; 创建新线程</span></span><br><span class="line">        <span class="comment">//参数7： 拒绝处理器</span></span><br><span class="line">        <span class="comment">//      策略一：ThreadPoolExecutor.AbortPolicy() 抛出异常</span></span><br><span class="line">        <span class="comment">//      策略二：ThreadPoolExecutor.CallerRunsPolicy() 在execute 方法的调用线程中运行被拒绝的任务；如果执行程序已关闭，则会丢弃该任务</span></span><br><span class="line">        <span class="comment">//      策略三：ThreadPoolExecutor.DiscardOldestPolicy() 放弃最旧的未处理请求(即处于等待队列中的)，然后重试 execute；如果执行程序已关闭，则会丢弃该任务。</span></span><br><span class="line">        <span class="comment">//      策略四：ThreadPoolExecutor.DiscardPolicy() 默认情况下它将放弃被拒绝的任务。</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//线程池执行逻辑:</span></span><br><span class="line">        <span class="comment">// 1. 当请求进入时,</span></span><br><span class="line">        <span class="comment">//      1.1 请求数量 &lt;= 核心线程数 ---&gt; 恰好分配每个线程</span></span><br><span class="line">        <span class="comment">//      1.2 请求数量 &gt; 核心线程数 and 请求数量 &lt;= 线程池中最大线程数量  ---&gt; 等待(进入线程等待队列)核心线程执行完后执行剩余的请求</span></span><br><span class="line">        <span class="comment">//      1.3 请求数量 &gt; 线程池中最大线程数量  ---&gt; 拒绝处理</span></span><br><span class="line">        ThreadPoolExecutor threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                <span class="number">3</span>, <span class="comment">//核心线程数</span></span><br><span class="line">                <span class="number">5</span>, <span class="comment">//线程池最大数量 = 核心线程数 + 临时线程  ===&gt; 临时线程为 2</span></span><br><span class="line">                <span class="number">10</span>, <span class="comment">//每个线程完成之后的空闲时间</span></span><br><span class="line">                TimeUnit.SECONDS, <span class="comment">//时间单位</span></span><br><span class="line">                blockingQueue, <span class="comment">//线程等待队列</span></span><br><span class="line">                threadFactory, <span class="comment">//线程工厂 --&gt; 创建新线程</span></span><br><span class="line">                <span class="keyword">new</span> ThreadPoolExecutor.DiscardPolicy()); <span class="comment">//拒绝处理器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//最大处理线程的数量 = 核心线程数 + 等待队列容量 + 临时线程数 = 线程池中最大线程数量 + 等待队列容量</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">8</span> ; i++)</span><br><span class="line">        threadPoolExecutor.execute(<span class="keyword">new</span> MyRunnable());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//无限线程数量  最大线程数量为 2147483648</span></span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="comment">//固定线程数量</span></span><br><span class="line">        ExecutorService executorService1 = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行中...线程名：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>最大处理线程的数量 = 核心线程数 + 等待队列容量 + 临时线程数 = 线程池中最大线程数量 + 等待队列容量</strong></li>
</ul>
<p><strong>线程池执行逻辑:</strong></p>
<ol>
<li><p>当请求进入时,</p>
<p>   1.1 请求数量  **&lt;=**  核心线程数 –&gt; 恰好分配每个线程</p>
<p>   1.2 请求数量  <strong>&gt;</strong>  核心线程数 and 请求数  **&lt;=**  线程池中最大线程数  –&gt; 等待(进入线程等待队列)核心线程执行完执行剩余的请求</p>
<p>   1.3 请求数量  <strong>&gt;</strong>  线程池中最大线程数  –&gt; 拒绝处理</p>
</li>
</ol>
<p><strong>参数7： 拒绝处理器</strong></p>
<ul>
<li><p>策略一：ThreadPoolExecutor.AbortPolicy()</p>
<ul>
<li>抛出异常</li>
</ul>
</li>
<li><p>策略二：ThreadPoolExecutor.CallerRunsPolicy() </p>
<ul>
<li>在execute 方法的调用线程中运行被拒绝的任务；如果执行程序已关闭，则会丢弃该任务</li>
</ul>
</li>
<li><p>策略三：ThreadPoolExecutor.DiscardOldestPolicy()</p>
<ul>
<li>放弃最旧的未处理请求(即处于等待队列中的)，然后重试 execute；如果执行程序已关闭，则会丢弃该任务</li>
</ul>
</li>
<li><p>策略四：ThreadPoolExecutor.DiscardPolicy()</p>
<ul>
<li>默认情况下它将放弃被拒绝的任务</li>
</ul>
<p>​        </p>
</li>
</ul>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>线程池</tag>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>近期杂谈</title>
    <url>/2021/04/18/%E8%BF%91%E6%9C%9F%E6%9D%82%E8%B0%88/</url>
    <content><![CDATA[<h1 id="🕶开学了？"><a href="#🕶开学了？" class="headerlink" title="🕶开学了？"></a>🕶开学了？</h1><p>&emsp;&emsp;其实在4月初的时候我依旧保持着放假的状态，上课不是很认真，在寝室也是学技术效率比较慢，整个人也就是处于悠哉悠哉的那种状态，感觉目标有点不明确，不知道到底自己想干嘛，期间最引发我思考的莫过于那一份关于考研和就业选择的问卷，在我上大学没多久的时候，觉得我肯定是会考研的，目的是为了提升自己的学历，顺便也可以锻炼自己，然而到了现在我却感觉不是很确定了，内心可能更向往技术开发的方向，实在不想加入考研大军，就算有保研这条路子，也不是很想做研究的那种方向.自知能力有限，觉得自己还是不合适的.不过呢，关于这个以后或许会有新的思考，以后再说吧hhhh.</p>
<p>&emsp;&emsp;开学至4月初期，对自己的表现怎么说呢，比较懒散，很浮躁，也很对不起我家小朋友，老是惹她不开心，自己犯的错误比较多，唉.道阻且长，同志仍然需要努力啊.</p>
<h1 id="🎃参加了数学竞赛？"><a href="#🎃参加了数学竞赛？" class="headerlink" title="🎃参加了数学竞赛？"></a>🎃参加了数学竞赛？</h1><p>&emsp;&emsp;怎么说呢，源于从小对于数学的兴趣吧，数学的巧妙逻辑实在是让我沉迷，高数中，各大数学家巧妙的定理证明也着实很吸引我，大一上还是有好好学高等数学的.下学期其实也有好好学，只是中途有点划水哈….这也算是我大一下生活中一件趣事，与其说是参加比赛，不如说是去感受的.</p>
<h1 id="🥼-提前步入社畜生活？"><a href="#🥼-提前步入社畜生活？" class="headerlink" title="🥼 提前步入社畜生活？"></a>🥼 提前步入社畜生活？</h1><p>&emsp;&emsp;hhhh，其实有点标题党的味道了，哪里是社畜，还是个学徒哈.说来也十分偶然，我近期也只是想找个做项目的团队，一起做项目，共同学习进步，然后翻阅QQ群，发现了网安协会的项目部，再一番咨询后，投了简历，然后参加了笔试以及面试，然后成功进入了这个部门，去的时候很惊奇这个部门居然有办公室，我还会有工位，后来第一天去的时候才了解到部门旗下有一所公司，我相当于进入了一个公司，成为了里面的职员，哦对了，我选择了开发岗中的后端开发，恰好也是他们部门现在缺人的岗位，怎么说呢也挺有压力的.据说等以后学成接手的时候，有绩效了，我就会有工资了hhh，还挺激动的. 话又说回来，在这个团队中，自己也挺想快点学习可以参加到项目中，自己最近也变得开始好好搞学习，不是很懒散了，有点大一上学期的感觉了hhh，也多亏了我家小朋友，给予我理解和帮助，十分体贴我，温柔又可爱，有了我家小朋友，感觉能把我从紧张的环境中解脱出来，让我轻松不少，真好啊.</p>
<p>&emsp;&emsp;对于现阶段目标，就是学习经典的 <code>SSM</code> 技术框架，说多也不多，说少也不少，慢慢来咯，后期才能运用自如，而且团队中缺少，<code>Java</code> 后端开发的老师傅，现在自己只能一步一个脚印，脚踏实地的进行学习.未来的路还是挺长的，我对现在自己的状态很满意，希望自己能多保持保持，也希望多陪陪我家小朋友hhh，也希望我家小朋友能理解我哦.</p>
<h1 id="✨结束END"><a href="#✨结束END" class="headerlink" title="✨结束END"></a>✨结束END</h1><p>放上一句自己特别喜欢的一句诗：“醉后不知天在水，满船清梦压星河.”   莫名喜欢这句诗的意境，让我对未来生活有着无限畅想hhhh</p>
]]></content>
      <categories>
        <category>生活杂谈</category>
      </categories>
      <tags>
        <tag>生活杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title>MybatisPlus(二):常用功能解析</title>
    <url>/2021/06/06/MybatisPlus%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>时隔多日，最近在熟悉SpringBoot后端项目代码，并进行了一些调试和配置，在和学长进行代码对接，忙活了好一整子，再加上期末考试，这篇博客闲置了很久，总还是差俩个点没有时间写.</p>
</blockquote>
<h1 id="🥙多种主键类型"><a href="#🥙多种主键类型" class="headerlink" title="🥙多种主键类型"></a>🥙多种主键类型</h1><p>在实体类中，在主键的属性上添加如下注解，其中type有如下选择：</p>
<p>接下来会挑选几个比较常用的进行详细解释</p>
<p><strong><code>@TableId(value=&quot; &quot;,type=Id.type.xxx)</code></strong></p>
<table>
<thead>
<tr>
<th align="center">值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">AUTO</td>
<td align="center">数据库ID自增</td>
</tr>
<tr>
<td align="center">NONE</td>
<td align="center">无状态,该类型为未设置主键类型(注解里等于跟随全局,全局里约等于 INPUT)</td>
</tr>
<tr>
<td align="center">INPUT</td>
<td align="center">insert前自行set主键值</td>
</tr>
<tr>
<td align="center">ASSIGN_ID</td>
<td align="center">分配ID(主键类型为Number(Long和Integer)或String)(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextId</code>(默认实现类为<code>DefaultIdentifierGenerator</code>雪花算法)</td>
</tr>
<tr>
<td align="center">ASSIGN_UUID</td>
<td align="center">分配UUID,主键类型为String(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextUUID</code>(默认default方法)</td>
</tr>
<tr>
<td align="center">ID_WORKER</td>
<td align="center">分布式全局唯一ID 长整型类型(please use <code>ASSIGN_ID</code>)</td>
</tr>
<tr>
<td align="center">UUID</td>
<td align="center">32位UUID字符串(please use <code>ASSIGN_UUID</code>)</td>
</tr>
<tr>
<td align="center">ID_WORKER_STR</td>
<td align="center">分布式全局唯一ID 字符串类型(please use <code>ASSIGN_ID</code>)</td>
</tr>
</tbody></table>
<ul>
<li><strong><code>Auto</code></strong> : 主键自动递增 +1 ，插入数据的时候无需手动设定主键值，如若设定安装设定的主键值进行插入.</li>
<li><strong><code>INPUT</code></strong> ：插入数据时自己手动设定</li>
<li><strong><code>ASSIGN_ID</code></strong> : 使用雪花算法生成一个 64  bit 的 <code>long</code> 型主键值，核心思想是：64 个 bit 中，其中 1 个 bit 是不用的，然后用其中的 41 bit 作为毫秒数，用 10 bit 作为工作机器 id，12 bit 作为序列号</li>
<li><strong><code>ASSIGN_UUID</code></strong> : 重新自动生成排除中划线的UUID作为主键,类型为String</li>
</ul>
<h1 id="🥚自动填充"><a href="#🥚自动填充" class="headerlink" title="🥚自动填充"></a>🥚自动填充</h1><p>​        在实际业务中，通常需要存储数据的创建时间以及更新时间，如果需要进行手动的插入和更新的话十分繁琐，并且这个操作本身不具有唯一性，实际上只是重复着一个操作，于是<code>MybatisPlus</code>提供了自动填充机制.</p>
<p>实体类：其中 <strong><code>@TableField</code></strong> 中<code>value</code>用于标记属性与数据库中对应的字段，由于配置中默认开启了驼峰命名因此<code>value</code>值可以不写.</p>
<ul>
<li>实体类需要自动填充的字段加上  <strong><code>@TableField</code></strong> 注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(value = &quot;books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Books</span> <span class="keyword">extends</span> <span class="title">Model</span>&lt;<span class="title">Books</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@TableId(value = &quot;book_id&quot; , type = IdType.AUTO)</span></span><br><span class="line">  <span class="keyword">private</span> Integer bookId;</span><br><span class="line">  <span class="keyword">private</span> String bookName;</span><br><span class="line">  <span class="keyword">private</span> Integer bookCounts;</span><br><span class="line">  <span class="keyword">private</span> String detail;</span><br><span class="line">  <span class="meta">@Version</span></span><br><span class="line">  <span class="keyword">private</span> Integer version;</span><br><span class="line">  <span class="keyword">private</span> Integer deleteFlag;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//表示插入时填充</span></span><br><span class="line">  <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">  <span class="keyword">private</span> Date createTime;</span><br><span class="line">  <span class="comment">//表示插入和更新时填充</span></span><br><span class="line">  <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">  <span class="keyword">private</span> Date updateTime;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编写处理器类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisAutoFill</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>,<span class="keyword">new</span> Date(),metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span> , <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>注意：如果数据库<code>URL</code> 时区设置的不是东八区的时区，那么更新的时间会与当前系统时间差几个小时，需要保证东八区的时区，只需要将 <code>ServerTimezone=Asia/shangHai</code></strong></p>
<h1 id="🍖乐观锁"><a href="#🍖乐观锁" class="headerlink" title="🍖乐观锁"></a>🍖乐观锁</h1><p>​        在并发量大的时候，可能会存在多个用户同时对一条数据进行了操作，从而导致数据混乱错误，因此需要保证一个用户操作完成之后，另一个用户才能继续操作，这就需要给数据上锁.</p>
<blockquote>
<p><strong>什么是锁？</strong></p>
</blockquote>
<p>​        顾名思义就是保证某一时刻的更新者是唯一的，更新数据所需要的钥匙只有一把，任何时刻只能有一个人拥有钥匙.</p>
<ul>
<li><p><strong>悲观锁</strong> ：每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁———&gt;版本号或时间戳控制，适用于多读少写的场景</p>
</li>
<li><p><strong>乐观锁</strong>：每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据———&gt;DB的行锁、表锁等，适用于数据一致性比较高的场景</p>
</li>
</ul>
<p><code>MybatisPlus</code>中提供了乐观锁机制，需要在数据库表中添加 <code>version</code> 字段 ,  类型为 <code>int</code> 长度 5-6即可，实体类中 <code>version</code> 属性值,数据类型为<code>Integer</code></p>
<ul>
<li>加上**<code>@Version</code>** 注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure>

<ul>
<li>编写配置类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        <span class="comment">//乐观锁配置</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">        <span class="comment">//分页插件配置</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>查询使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateBook</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//乐观锁只有在更新查到的数据的时候才会起作用，单纯的更新是不会起作用的</span></span><br><span class="line">        Books books = booksMapper.selectById(<span class="number">11</span>);</span><br><span class="line">        books.setBookCounts(<span class="number">777</span>);</span><br><span class="line">        books.setDetail(<span class="string">&quot;更新测试06&quot;</span>);</span><br><span class="line">        books.updateById();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">控制台输出的SQL语句:</span><br><span class="line">UPDATE books SET book_name=?, book_counts=?, detail=?, version=?, create_time=?, update_time=? WHERE book_id=? AND version=? AND delete_flag=<span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>在数据库中，<code>version</code>字段默认值设置为1，过后每次查询后更新一次之后，<code>version</code>值在查询出的值之上自增 1 .</p>
<h1 id="🥟分页查询"><a href="#🥟分页查询" class="headerlink" title="🥟分页查询"></a>🥟分页查询</h1><p><code>MybatisPlus</code> 中内置了分页插件，只需要进行简单的配置即可完成分页操作</p>
<ul>
<li>编写配置文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        <span class="comment">//乐观锁配置</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">        <span class="comment">//分页插件配置</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>查询使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">selectBoos</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//分页对象             (第几页，一页中显示几个)   </span></span><br><span class="line">        Page&lt;Books&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//查询返回 page对象</span></span><br><span class="line">        Page&lt;Books&gt; page1 = booksMapper.selectPage(page, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(page1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="🧇-逻辑删除"><a href="#🧇-逻辑删除" class="headerlink" title="🧇 逻辑删除"></a>🧇 逻辑删除</h1><p>​        在实际业务中，存在查询历史记录的情况，以卡券为例，过期或者已经使用的卡券在数据库中直接进行删除，则永远无法查询到已经删除的卡券，<code>MybatisPlus</code> 提供了逻辑删除的配置，只需要在数据库中添加逻辑删除标志字段即可，默认值为 0 ，比如<code>delete_flag</code> ，<code>int </code> 类型，值为 1 的时候 表示删除，值为 0 的时候表示未删除.</p>
<ul>
<li>配置文件编写</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绑定逻辑删除判断的属性</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-delete-field</span>= <span class="string">deleteFlag</span></span><br><span class="line"><span class="comment">#设置值为1的时候为删除</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-delete-value</span>= <span class="string">1</span></span><br><span class="line"><span class="comment">#值为0的时候表示未删除</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-not-delete-value</span>= <span class="string">0</span></span><br></pre></td></tr></table></figure>



<p>配置完成之后，进行测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteBook</span><span class="params">()</span></span>&#123;</span><br><span class="line">    booksMapper.deleteById(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>删除操作变成了对 <code>delete_flag</code> 的更新操作</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">JDBC Connection [HikariProxyConnection@816918962 wrapping com.mysql.cj.jdbc.ConnectionImpl@2924f1d8] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: UPDATE books SET delete_flag=1 WHERE book_id=? AND delete_flag=0</span><br><span class="line">==&gt; Parameters: 10(Integer)</span><br><span class="line">&lt;==    Updates: 1</span><br></pre></td></tr></table></figure>



<p>当然了，此时进行全表查询的时候，也会显示不出来这些已经进行逻辑删除的数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> book_id,book_name,book_counts,detail,version,delete_flag,create_time,update_time </span><br><span class="line"><span class="keyword">FROM</span> books </span><br><span class="line"><span class="keyword">WHERE</span> delete_flag<span class="operator">=</span><span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>全表查询的时候，会在末尾默认评价逻辑删除判断条件</p>
<h1 id="🎭-条件构造器"><a href="#🎭-条件构造器" class="headerlink" title="🎭 条件构造器"></a>🎭 条件构造器</h1><blockquote>
<p>该部分搬运自 Mybatis-plus官方文档，这一部分内容，其实有利也有弊，使用时只需要翻阅一下官方文档即可，对于复杂的语句建议还是xml文件搞起，便于后期debug</p>
</blockquote>
<p><strong>注意：</strong> <code>Wrapper</code>构造器存在俩个实现类：<code>QueryWrapper </code> 以及 <code>UpdateWrapper</code> ，实际运用中，创建这俩个实现类对象即可进行下面这般操作了</p>
<h2 id="allEq（全等于）"><a href="#allEq（全等于）" class="headerlink" title="allEq（全等于）"></a><font size="4" color="orange"><strong><code>allEq</code></strong></font>（全等于）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">allEq(Map&lt;R, V&gt; params)</span><br><span class="line">allEq(Map&lt;R, V&gt; params, <span class="keyword">boolean</span> null2IsNull)</span><br><span class="line">allEq(<span class="keyword">boolean</span> condition, Map&lt;R, V&gt; params, <span class="keyword">boolean</span> null2IsNull)</span><br></pre></td></tr></table></figure>

<p><code>params</code> : <code>key</code>为数据库字段名,<code>value</code>为字段值<br><code>null2IsNull</code> : 为<code>true</code>则在<code>map</code>的<code>value</code>为<code>null</code>时调用 <a href="https://mp.baomidou.com/guide/wrapper.html#isnull">isNull</a> 方法,为<code>false</code>时则忽略<code>value</code>为<code>null</code>的</p>
<h2 id="eq（等于）"><a href="#eq（等于）" class="headerlink" title="eq（等于）"></a><font size="4" color="orange"><strong><code>eq</code></strong></font>（等于）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">eq(R column, Object val)</span><br><span class="line">eq(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure>

<ul>
<li>例: <code>eq(&quot;name&quot;, &quot;老王&quot;)</code>—&gt;<code>name = &#39;老王&#39;</code></li>
</ul>
<h2 id="ne（不等于）"><a href="#ne（不等于）" class="headerlink" title="ne（不等于）"></a><font size="4" color="orange"><strong><code>ne</code></strong></font>（不等于）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ne(R column, Object val)</span><br><span class="line">ne(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure>

<ul>
<li>不等于 &lt;&gt;</li>
<li>例: <code>ne(&quot;name&quot;, &quot;老王&quot;)</code>—&gt;<code>name &lt;&gt; &#39;老王&#39;</code></li>
</ul>
<h2 id="gt（大于）"><a href="#gt（大于）" class="headerlink" title="gt（大于）"></a><font size="4" color="orange"><strong><code>gt</code></strong></font>（大于）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">gt(R column, Object val)</span><br><span class="line">gt(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure>

<ul>
<li>大于 &gt;</li>
<li>例: <code>gt(&quot;age&quot;, 18)</code>—&gt;<code>age &gt; 18</code></li>
</ul>
<h2 id="ge（大于等于）"><a href="#ge（大于等于）" class="headerlink" title="ge（大于等于）"></a><font size="4" color="orange"><strong><code>ge</code></strong></font>（大于等于）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ge(R column, Object val)</span><br><span class="line">ge(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure>

<ul>
<li>大于等于 &gt;=</li>
<li>例: <code>ge(&quot;age&quot;, 18)</code>—&gt;<code>age &gt;= 18</code></li>
</ul>
<h2 id="lt（小于）"><a href="#lt（小于）" class="headerlink" title="lt（小于）"></a><font size="4" color="orange"><strong><code>lt</code></strong></font>（小于）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lt(R column, Object val)</span><br><span class="line">lt(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure>

<ul>
<li>小于 &lt;</li>
<li>例: <code>lt(&quot;age&quot;, 18)</code>—&gt;<code>age &lt; 18</code></li>
</ul>
<h2 id="le（小于等于）"><a href="#le（小于等于）" class="headerlink" title="le（小于等于）"></a><font size="4" color="orange"><strong><code>le</code></strong></font>（小于等于）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">le(R column, Object val)</span><br><span class="line">le(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure>

<ul>
<li>小于等于 &lt;=</li>
<li>例: <code>le(&quot;age&quot;, 18)</code>—&gt;<code>age &lt;= 18</code></li>
</ul>
<h2 id="between（区间）"><a href="#between（区间）" class="headerlink" title="between（区间）"></a><font size="4" color="orange"><strong><code>between</code></strong></font>（区间）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">between(R column, Object val1, Object val2)</span><br><span class="line">between(<span class="keyword">boolean</span> condition, R column, Object val1, Object val2)</span><br></pre></td></tr></table></figure>

<ul>
<li>BETWEEN 值1 AND 值2</li>
<li>例: <code>between(&quot;age&quot;, 18, 30)</code>—&gt;<code>age between 18 and 30</code></li>
</ul>
<h2 id="notbetween（不在某区间）"><a href="#notbetween（不在某区间）" class="headerlink" title="notbetween（不在某区间）"></a><font size="4" color="orange"><strong><code>notbetween</code></strong></font>（不在某区间）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">notBetween(R column, Object val1, Object val2)</span><br><span class="line">notBetween(<span class="keyword">boolean</span> condition, R column, Object val1, Object val2)</span><br></pre></td></tr></table></figure>

<ul>
<li>NOT BETWEEN 值1 AND 值2</li>
<li>例: <code>notBetween(&quot;age&quot;, 18, 30)</code>—&gt;<code>age not between 18 and 30</code></li>
</ul>
<h2 id="like（像）"><a href="#like（像）" class="headerlink" title="like（像）"></a><font size="4" color="orange"><strong><code>like</code></strong></font>（像）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">like(R column, Object val)</span><br><span class="line">like(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure>

<ul>
<li>LIKE ‘%值%’</li>
<li>例: <code>like(&quot;name&quot;, &quot;王&quot;)</code>—&gt;<code>name like &#39;%王%&#39;</code></li>
</ul>
<h2 id="notlike（不像）"><a href="#notlike（不像）" class="headerlink" title="notlike（不像）"></a><font size="4" color="orange"><strong><code>notlike</code></strong></font>（不像）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">notLike(R column, Object val)</span><br><span class="line">notLike(<span class="keyword">boolean</span> condition, R column, Object val)</span><br></pre></td></tr></table></figure>

<ul>
<li>NOT LIKE ‘%值%’</li>
<li>例: <code>notLike(&quot;name&quot;, &quot;王&quot;)</code>—&gt;<code>name not like &#39;%王%&#39;</code></li>
</ul>
<h2 id="in（其中之一）"><a href="#in（其中之一）" class="headerlink" title="in（其中之一）"></a><font size="4" color="orange"><strong><code>in</code></strong></font>（其中之一）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">in(R column, Collection&lt;?&gt; value)</span><br><span class="line">in(<span class="keyword">boolean</span> condition, R column, Collection&lt;?&gt; value)</span><br></pre></td></tr></table></figure>

<ul>
<li>字段 IN (value.get(0), value.get(1), …)</li>
<li>例: <code>in(&quot;age&quot;,&#123;1,2,3&#125;)</code>—&gt;<code>age in (1,2,3)</code></li>
</ul>
<h2 id="notin（非其中之一）"><a href="#notin（非其中之一）" class="headerlink" title="notin（非其中之一）"></a><font size="4" color="orange"><strong><code>notin</code></strong></font>（非其中之一）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">notIn(R column, Collection&lt;?&gt; value)</span><br><span class="line">notIn(<span class="keyword">boolean</span> condition, R column, Collection&lt;?&gt; value)</span><br></pre></td></tr></table></figure>

<ul>
<li>字段 NOT IN (value.get(0), value.get(1), …)</li>
<li>例: <code>notIn(&quot;age&quot;,&#123;1,2,3&#125;)</code>—&gt;<code>age not in (1,2,3)</code></li>
</ul>
<h2 id="inSql（集合中之一）"><a href="#inSql（集合中之一）" class="headerlink" title="inSql（集合中之一）"></a><font size="4" color="orange"><strong><code>inSql</code></strong></font>（集合中之一）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">inSql(R column, String inValue)</span><br><span class="line">inSql(<span class="keyword">boolean</span> condition, R column, String inValue)</span><br></pre></td></tr></table></figure>

<ul>
<li>字段 IN ( sql语句 )</li>
<li>例: <code>inSql(&quot;age&quot;, &quot;1,2,3,4,5,6&quot;)</code>—&gt;<code>age in (1,2,3,4,5,6)</code></li>
<li>例: <code>inSql(&quot;id&quot;, &quot;select id from table where id &lt; 3&quot;)</code>—&gt;<code>id in (select id from table where id &lt; 3)</code></li>
</ul>
<h2 id="notinSql（非集合中之一）"><a href="#notinSql（非集合中之一）" class="headerlink" title="notinSql（非集合中之一）"></a><font size="4" color="orange"><strong><code>notinSql</code></strong></font>（非集合中之一）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">notInSql(R column, String inValue)</span><br><span class="line">notInSql(<span class="keyword">boolean</span> condition, R column, String inValue)</span><br></pre></td></tr></table></figure>

<ul>
<li>字段 NOT IN ( sql语句 )</li>
<li>例: <code>notInSql(&quot;age&quot;, &quot;1,2,3,4,5,6&quot;)</code>—&gt;<code>age not in (1,2,3,4,5,6)</code></li>
<li>例: <code>notInSql(&quot;id&quot;, &quot;select id from table where id &lt; 3&quot;)</code>—&gt;<code>id not in (select id from table where id &lt; 3)</code></li>
</ul>
<h1 id="🍛代码生成器"><a href="#🍛代码生成器" class="headerlink" title="🍛代码生成器"></a>🍛代码生成器</h1><p>​        在创建项目之初，构建工程结构是非常相似的操作，即 配置数据库并连接数据库—–&gt;创建数据库表实体类 —&gt; 编写<code>dao</code>层对数据库进行操作—-&gt;编写<code>service</code>层调用<code>dao</code>层 —&gt; 编写<code>controller</code>层</p>
<p>​        如果含有多个表，这样的操作是十分繁琐的，于是<code>MybatisPlus</code>提供了代码生成器，帮助开发人员快速生成每一张表的结构，极大提高了开发效率.</p>
<ul>
<li><strong>引入相关依赖</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li><strong>编写代码生成器设置类</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line">        <span class="comment">//全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;Soucat&quot;</span>);</span><br><span class="line">        <span class="comment">//获取当前模块项目位置</span></span><br><span class="line">        String property = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        <span class="comment">//设置输出目录</span></span><br><span class="line">        gc.setOutputDir(property+<span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        gc.setFileOverride(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//去掉Service的I前缀</span></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>);</span><br><span class="line">        <span class="comment">//设置时间类型</span></span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">        <span class="comment">//设置主键</span></span><br><span class="line">        gc.setIdType(IdType.AUTO);</span><br><span class="line">        <span class="comment">//Swagger</span></span><br><span class="line">        gc.setSwagger2(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//将全局配置加入代码生成器</span></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line">        </span><br><span class="line">		<span class="comment">//配置数据源</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        <span class="comment">//url</span></span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/ssmbuild?serverTimezone=Asia/Shanghai&quot;</span>);</span><br><span class="line">        <span class="comment">//drivername</span></span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//密码</span></span><br><span class="line">        dsc.setPassword(<span class="string">&quot;qwe123456&quot;</span>);</span><br><span class="line">        <span class="comment">//用户名</span></span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="comment">//数据库类型</span></span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        </span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//包配置</span></span><br><span class="line">        PackageConfig pk = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        <span class="comment">//包父类</span></span><br><span class="line">        pk.setParent(<span class="string">&quot;com.soucat&quot;</span>);</span><br><span class="line">        <span class="comment">//设置实体类包包名</span></span><br><span class="line">        pk.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        <span class="comment">//设置dao层包名</span></span><br><span class="line">        pk.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        <span class="comment">//设置控制器包名</span></span><br><span class="line">        pk.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        <span class="comment">//设置服务层包名</span></span><br><span class="line">        pk.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        <span class="comment">//将包配置加入代码生成器</span></span><br><span class="line">        mpg.setPackageInfo(pk);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//策略配置</span></span><br><span class="line">        StrategyConfig sc = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        <span class="comment">//数据库表名</span></span><br><span class="line">        sc.setInclude(<span class="string">&quot;books&quot;</span>);</span><br><span class="line">        <span class="comment">//开启实体类Lombok</span></span><br><span class="line">        sc.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//开启属性名驼峰命名转换</span></span><br><span class="line">        sc.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">//开启字段名驼峰命名转换</span></span><br><span class="line">        sc.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        sc.setLogicDeleteFieldName(<span class="string">&quot;deleted_flag&quot;</span>);</span><br><span class="line">		<span class="comment">//设置字段自动填入</span></span><br><span class="line">        TableFill createTime = <span class="keyword">new</span> TableFill(<span class="string">&quot;create_time&quot;</span>, FieldFill.INSERT);</span><br><span class="line">        TableFill updateTime = <span class="keyword">new</span> TableFill(<span class="string">&quot;update_time&quot;</span>, FieldFill.INSERT_UPDATE);</span><br><span class="line">        <span class="comment">//设置集合</span></span><br><span class="line">        ArrayList&lt;TableFill&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(createTime);</span><br><span class="line">        list.add(updateTime);</span><br><span class="line">        <span class="comment">//加入字段集合</span></span><br><span class="line">        sc.setTableFillList(list);</span><br><span class="line">        <span class="comment">//设置乐观锁字段名</span></span><br><span class="line">        sc.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">        <span class="comment">//开始RestController注解</span></span><br><span class="line">        sc.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//驼峰转成连字符</span></span><br><span class="line">        sc.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//将策略配置加入到代码生成器</span></span><br><span class="line">        mpg.setStrategy(sc);</span><br><span class="line">		<span class="comment">//启动代码生成器</span></span><br><span class="line">        mpg.execute();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>MybatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis（二）</title>
    <url>/2021/04/21/Mybatis%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="🎈配置属性"><a href="#🎈配置属性" class="headerlink" title="🎈配置属性"></a>🎈配置属性</h1><ul>
<li><strong>核心配置文件</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">configuration（配置）</span><br><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br><span class="line"><span class="comment">&lt;!-- 注意元素节点的顺序！顺序不对会报错 --&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>environments</strong></p>
</blockquote>
<p>&emsp;&emsp;其中可以配置多套 <code>Mybatis</code> 运行环境，将 <code>SQL</code> 映射到不同的数据库上，可以设置 <code>default</code> 属性进行指定配置，对应的各套不同的配置根据 <code>id</code> 属性进行区别.</p>
<ul>
<li>子节点</li>
</ul>
<p><code>datasource</code>：使用标准的 <code>JDBC</code> 数据源接口来配置 <code>JDBC</code> 连接数据库 ，其 <code>type</code> 属性有三种值：<code>UNPOOLED|POOLED|JNDI</code></p>
<p>​        <code>POOLED</code>： 数据库连接池，<code>JDBC</code>连接是非常耗时且占用资源的，所以运用数据库连接池对每次连接进行缓存处理，但是同时限制了同时进行连接的数量以及缓存的大小.</p>
<blockquote>
<p>mappers</p>
</blockquote>
<p>&emsp;&emsp;用于注册<code>SQL</code> 映射文件，让<code>Mybatis</code> 知道去哪里找到对应的 <code>SQL</code> 映射文件.因此需要引入 <code>SQL</code> 映射文件，引入文件的方式分为三种，分别为 ：</p>
<ul>
<li>资源文件引入</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用完全限定类名</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">使用映射器接口实现类的完全限定类名</span></span><br><span class="line"><span class="comment">需要配置文件名称和接口名称一致，并且位于同一目录下</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用文件引入</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">将包内的映射器接口实现全部注册为映射器</span></span><br><span class="line"><span class="comment">但是需要配置文件名称和接口名称一致，并且位于同一目录下</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis.builder&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>Mapper映射文件</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;Dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>namespace</code> ：命名空间，用于绑定数据库操作接口，在不使用别名的情况下：namespace : 包名 + 类名</li>
</ul>
<p>在 <code>mapper </code> 标签中 ， 可以定义 <code>SQL</code> 标签 ，常用的有 <code>&lt;update&gt; &lt;select&gt; &lt;delete&gt; &lt;insert&gt;</code>四种，但是你同样也可以在一个标签中写四种不同的<code>SQL </code> 语句,不会报错，这些标签中的 <code>id</code> 属性必须与接口中的方法名相对应从而进行绑定映射，还有其它属性上一篇文章已经介绍，这里就不再赘述，后续还会继续介绍其它属性. </p>
<p><strong>正是因为Mapper映射文件，彻底将<code>SQL</code>  语句独立出来，相对于原始的 <code>Java</code> 代码和 <code>SQL</code> 代码夹杂，可维护性有巨大的提升,同时让我们专注于编写 <code>SQL</code> 语句提高效率.</strong></p>
<blockquote>
<p>对JDBC进行优化处理</p>
</blockquote>
<p>&emsp;&emsp;在原生的使用<code>JDBC</code>的代码中，我们常用<code>JDBC.properties</code> 文件写入我们需要的 <code>dirver 、 url 、username 、password</code> ,实现代码和数据相分离，增加可读性，以及复用性，也方便修改.</p>
<p>&emsp;&emsp;同样的在<code>Mybatis</code>中也同样可以遵循这种思路，我们再<code>resources</code> 中创建 <code>JDBC.properties</code> ，通过如下标签进行引用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;JDBC.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>值得一提的是，<code>config</code> 文件中对标签的顺序有着严格的要求，可以先随便放，看错误提示，按照顺序进行安放.</strong></p>
<ul>
<li><code>$&#123;属性名&#125;</code> ：引用符，引入过后，属性名写入<code>properties</code>中相应的属性名即可.</li>
</ul>
<p>配置完后如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入properties文件--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>typeAliases优化</p>
</blockquote>
<p>在 <code>namespace</code> 中写入的类名，在真实项目可能很长，于是可以考虑用别名进行替代.具体语法如下：</p>
<p>当这样配置时，<code>User</code>可以用在任何使用<code>Dao.User</code>的地方.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;Dao.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span>	</span><br></pre></td></tr></table></figure>

<p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;Dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Java Bean 是什么？<ul>
<li><code>Java Bean</code> 是 <code>Java</code> 对象的一套规范 ，属性私有化，对外提供 <code>Get/Set</code> 方法等等. </li>
</ul>
</li>
</ul>
<p>每一个在包 <code>Dao</code> 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。</p>
<p>若有注解，则别名为其注解值。见下面的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>其它配置设置</p>
</blockquote>
<p>常用设置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志功能 标准日志实现--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--是否开启缓存--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--是否开启懒加载--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--是否开启驼峰命名映射--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="🥽rusultMap-结果集映射"><a href="#🥽rusultMap-结果集映射" class="headerlink" title="🥽rusultMap(结果集映射)"></a>🥽rusultMap(结果集映射)</h1><blockquote>
<p>如果实体类中的属性名和数据库中的字段名不一致如何处理 ? 为什么会存在这个问题？</p>
</blockquote>
<p>本质上，在编写<code>SQL</code> 语句的时候查询字段如果直接用 <code>*</code>  那么就相当于查询实体类中所有的属性，而此时有属性名和字段名不匹配，那么自然会查询失败.那么知道了原因，解决办法很明显，手动编写想要查询的字段，并且以数据库中的字段为标准，可以用别名更改为属性名.  <strong>但是</strong> ，这种办法虽然简单，但并不优雅.</p>
<p><strong>接下来将介绍一种优雅的解法</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--id名需要要唯一性，type属性要使用完全限定类名或者别名,type为哪个取决于你需要查询的实体类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- id为主键 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- column是数据库表的列名 , property是对应实体类的属性名 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--resultMap结果集映射--&gt;</span>                  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">  select id , name , pwd from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>如果实体类属性中有自定义引用数据类型或者集合，需要用到其它标签.</p>
<ul>
<li>自定义引用数据类型</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StuTea&quot;</span> <span class="attr">type</span>=<span class="string">&quot;pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--property为 resultMap中type指定的实体类中的引用数据类型变量名--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--javaType 为对应的实体类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>集合</li>
</ul>
<p>实体类如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Score</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer stId;</span><br><span class="line">    <span class="keyword">private</span> Integer stMath;</span><br><span class="line">    <span class="keyword">private</span> School school;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">School</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer classNo;</span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Score&gt; scoreList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;baseResultMap01&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itheima.domain.School&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;class_no&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;classNo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;class_name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">property</span>=<span class="string">&quot;className&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		property 关联属性, 为实体对象中的集合</span></span><br><span class="line"><span class="comment">		javaType 关联属性的类型, 集合的类型, 一般是ArrayList</span></span><br><span class="line"><span class="comment">		association 关联属性			</span></span><br><span class="line"><span class="comment">		ofType 需要映射的pojo实体对象</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;list&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">ofType</span>=<span class="string">&quot;com.itheima.domain.Score&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;st_id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;st_math&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stMath&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="🎡Log4j日志实现"><a href="#🎡Log4j日志实现" class="headerlink" title="🎡Log4j日志实现"></a>🎡Log4j日志实现</h1><p><strong>简介：</strong></p>
<ul>
<li>Log4j是Apache的一个开源项目</li>
<li>通过使用Log4j，我们可以控制日志信息输送的目的地：控制台，文本，GUI组件….</li>
<li>我们也可以控制每一条日志的输出格式；</li>
<li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</li>
</ul>
<p><strong>使用步骤：</strong></p>
<p>1、导入log4j的包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、配置文件编写</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><br><span class="line">log4j.rootLogger=DEBUG,console,file</span><br><span class="line"></span><br><span class="line">#控制台输出的相关设置</span><br><span class="line">log4j.appender.console = org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.console.Target = System.out</span><br><span class="line">log4j.appender.console.Threshold=DEBUG</span><br><span class="line">log4j.appender.console.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.console.layout.ConversionPattern=[%c]-%m%n</span><br><span class="line"></span><br><span class="line">#文件输出的相关设置</span><br><span class="line">log4j.appender.file = org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.file.File=./log/kuang.log</span><br><span class="line">log4j.appender.file.MaxFileSize=10mb</span><br><span class="line">log4j.appender.file.Threshold=DEBUG</span><br><span class="line">log4j.appender.file.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.file.layout.ConversionPattern=[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span><br><span class="line"></span><br><span class="line">#日志输出级别</span><br><span class="line">log4j.logger.org.mybatis=DEBUG</span><br><span class="line">log4j.logger.java.sql=DEBUG</span><br><span class="line">log4j.logger.java.sql.Statement=DEBUG</span><br><span class="line">log4j.logger.java.sql.ResultSet=DEBUG</span><br><span class="line">log4j.logger.java.sql.PreparedStatement=DEBUG</span><br></pre></td></tr></table></figure>

<p>3、setting设置日志实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、在程序中使用Log4j进行输出！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意导包：org.apache.log4j.Logger</span></span><br><span class="line"><span class="keyword">static</span> Logger logger = Logger.getLogger(MyTest.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   logger.info(<span class="string">&quot;info：进入selectUser方法&quot;</span>);</span><br><span class="line">   logger.debug(<span class="string">&quot;debug：进入selectUser方法&quot;</span>);</span><br><span class="line">   logger.error(<span class="string">&quot;error: 进入selectUser方法&quot;</span>);</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line">   UserMapper mapper = session.getMapper(UserMapper.class);</span><br><span class="line">   List&lt;User&gt; users = mapper.selectUser();</span><br><span class="line">   <span class="keyword">for</span> (User user: users)&#123;</span><br><span class="line">       System.out.println(user);</span><br><span class="line">  &#125;</span><br><span class="line">   session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、测试，看控制台输出！</p>
<ul>
<li>使用Log4j 输出日志</li>
<li>可以看到还生成了一个日志的文件 【需要修改file的日志级别】</li>
</ul>
<h1 id="🧨Limit-分页处理"><a href="#🧨Limit-分页处理" class="headerlink" title="🧨Limit 分页处理"></a>🧨Limit 分页处理</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">原本的查询语句写法：</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users limit startindex , number</span><br><span class="line"></span><br><span class="line">startindex 表示起始位置的前一个 例如 ： startindex <span class="operator">=</span> <span class="number">5</span> ，number <span class="operator">=</span> <span class="number">2</span>那么将输出第六个 和 第七个 数据 </span><br><span class="line">如果只有一 startindex 表示 [<span class="number">1</span>,startindex] 的所有数据</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>知道了原本的 <code>SQL</code> 语句写法后，思路就很清晰了 ，可以使用 Map 来存储 相应的起始坐标和数量 ，既然进行分页，那么不妨进行一下简单的推导，可以知道：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">startindex = (currentpage - <span class="number">1</span>) * pagesize</span><br><span class="line">                 当前第几页     每一页数据有多少个</span><br><span class="line">    </span><br><span class="line">那么只需要在Map中存储 startindex 和 pagesize 即可实现</span><br></pre></td></tr></table></figure>

<p>还有一种使用<code>Java</code> 代码进行分页处理（但是有一说一比较繁琐）接下来贴出代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserByRowBounds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> currentPage = <span class="number">2</span>;  <span class="comment">//第几页</span></span><br><span class="line">   <span class="keyword">int</span> pageSize = <span class="number">2</span>;  <span class="comment">//每页显示几个</span></span><br><span class="line">   RowBounds rowBounds = <span class="keyword">new</span> RowBounds((currentPage-<span class="number">1</span>)*pageSize,pageSize);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//通过session.**方法进行传递rowBounds，[此种方式现在已经不推荐使用了]</span></span><br><span class="line">   List&lt;User&gt; users = session.selectList(<span class="string">&quot;com.kuang.mapper.UserMapper.getUserByRowBounds&quot;</span>, <span class="keyword">null</span>, rowBounds);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (User user: users)&#123;</span><br><span class="line">       System.out.println(user);</span><br><span class="line">  &#125;</span><br><span class="line">   session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="🎨使用注解进行开发"><a href="#🎨使用注解进行开发" class="headerlink" title="🎨使用注解进行开发"></a>🎨使用注解进行开发</h1><p>在Mybatis 3 中新增了注解的配置，更进一步的提高了开发效率虽然没有提升很多，但是真的很香.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">常见的四个SQL的注解:</span><br><span class="line">	<span class="meta">@select(&quot;&quot;)</span></span><br><span class="line">	<span class="meta">@update(&quot;&quot;)</span></span><br><span class="line">	<span class="meta">@delete(&quot;&quot;)</span></span><br><span class="line">	<span class="meta">@insert(&quot;&quot;)</span></span><br></pre></td></tr></table></figure>

<p>当然简单的 <code>SQL</code> 语句可以使用注解，至于复杂的<code>SQL</code>语句依旧使用 <code>Mapper.xml</code>映射文件.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from bjpowernode.users&quot;)</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>只需要增加如下注解，可以删掉映射文件中对应的<code>SQL</code>标签，其余部分不变即可，如果没有映射文件，那么就在<code>config</code>文件中的映射文件注册的引入方式改为完全限定类名引入.其余的语句也是类似的，在此就不继续赘述了.</p>
<h1 id="🏀一对多以及多对一查询"><a href="#🏀一对多以及多对一查询" class="headerlink" title="🏀一对多以及多对一查询"></a>🏀一对多以及多对一查询</h1><p>先给出表数据：</p>
<p>表名：Student</p>
<img src="/2021/04/21/Mybatis%EF%BC%88%E4%BA%8C%EF%BC%89/1.png" class title="student">



<p>表名：Teacher</p>
<img src="/2021/04/21/Mybatis%EF%BC%88%E4%BA%8C%EF%BC%89/2.png" class title="teacher">



<p>编写实体类：</p>
<p>该注解为 <code>lombock注解</code> 给出 <code>maven</code> 坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>多对一</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span> <span class="comment">//GET,SET,ToString，有参，无参构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="comment">//多个学生可以是同一个老师，即多对一</span></span><br><span class="line">   <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   需求：获取所有学生及对应老师的信息</span></span><br><span class="line"><span class="comment">   思路：</span></span><br><span class="line"><span class="comment">       1. 获取所有学生的信息</span></span><br><span class="line"><span class="comment">       2. 根据获取的学生信息的老师ID-&gt;获取该老师的信息</span></span><br><span class="line"><span class="comment">       3. 思考问题，这样学生的结果集中应该包含老师，该如何处理呢，数据库中我们一般使用关联查询？</span></span><br><span class="line"><span class="comment">           1. 做一个结果集映射：StudentTeacher</span></span><br><span class="line"><span class="comment">           2. StudentTeacher结果集的类型为 Student</span></span><br><span class="line"><span class="comment">           3. 学生中老师的属性为teacher，对应数据库中为tid。</span></span><br><span class="line"><span class="comment">              多个 [1,...）学生关联一个老师=&gt; 一对一，一对多</span></span><br><span class="line"><span class="comment">           4. 查看官网找到：association – 一个复杂类型的关联；使用它来处理关联查询</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"></span><br><span class="line">显然可以使用连表查询 和 子查询 首要推荐连表查询.</span><br><span class="line">子查询:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--association关联属性 property属性名 javaType属性类型 column在多的一方的表中的列名--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span>  <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   这里传递过来的id，只有一个属性的时候，下面可以写任何值</span></span><br><span class="line"><span class="comment">   association中column多参数配置：</span></span><br><span class="line"><span class="comment">       column=&quot;&#123;key=value,key=value&#125;&quot;</span></span><br><span class="line"><span class="comment">       其实就是键值对的形式，key是传给下个sql的取值名称，value是片段一中sql查询的字段名。</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">      select * from teacher where id = #&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">连表查询:</span><br><span class="line">	<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">按查询结果嵌套处理</span></span><br><span class="line"><span class="comment">思路：</span></span><br><span class="line"><span class="comment">   1. 直接查询出结果，进行结果集的映射</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudents2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher2&quot;</span> &gt;</span></span><br><span class="line">      select s.id sid, s.name sname , t.name tname</span><br><span class="line">      from student s,teacher t</span><br><span class="line">      where s.tid = t.id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--关联对象property 关联对象在Student实体类中的属性--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    </p>
<ul>
<li><strong>一对多</strong></li>
</ul>
<p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="comment">//一个老师多个学生</span></span><br><span class="line">   <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  思路:</span></span><br><span class="line"><span class="comment">      1. 从学生表和老师表中查出学生id，学生姓名，老师姓名</span></span><br><span class="line"><span class="comment">      2. 对查询出来的操作做结果集映射</span></span><br><span class="line"><span class="comment">          1. 集合的话，使用collection！</span></span><br><span class="line"><span class="comment">              JavaType和ofType都是用来指定对象类型的</span></span><br><span class="line"><span class="comment">              JavaType是用来指定pojo中属性的类型</span></span><br><span class="line"><span class="comment">              ofType指定的是映射到list集合属性中pojo的类型。</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;TeacherStudent&quot;</span>&gt;</span></span><br><span class="line">     select s.id sid, s.name sname , t.name tname, t.id tid</span><br><span class="line">     from student s,teacher t</span><br><span class="line">     where s.tid = t.id and t.id=#&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;TeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span>  <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>如果SQL语句写的好，就用连表查询就行，resultMap 需要不需要取决于 属性名和字段名是否对应</strong></p>
<h1 id="🎁动态SQL"><a href="#🎁动态SQL" class="headerlink" title="🎁动态SQL"></a>🎁动态SQL</h1><p>什么是动态SQL：<strong>动态SQL指的是根据不同的查询条件 , 生成不同的Sql语句.</strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">官网描述：</span><br><span class="line">MyBatis 的强大特性之一便是它的动态 <span class="keyword">SQL</span>。如果你有使用 JDBC 或其它类似框架的经验，你就能体会到根据不同条件拼接 <span class="keyword">SQL</span> 语句的痛苦。例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 <span class="keyword">SQL</span> 这一特性可以彻底摆脱这种痛苦。</span><br><span class="line">虽然在以前使用动态 <span class="keyword">SQL</span> 并非一件易事，但正是 MyBatis 提供了可以被用在任意 <span class="keyword">SQL</span> 映射语句中的强大的动态 <span class="keyword">SQL</span> 语言得以改进这种情形。</span><br><span class="line">动态 <span class="keyword">SQL</span> 元素和 JSTL 或基于类似 <span class="type">XML</span> 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis <span class="number">3</span> 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。</span><br><span class="line"></span><br><span class="line">  <span class="comment">-------------------------------</span></span><br><span class="line">  - <span class="keyword">if</span></span><br><span class="line">  - choose (<span class="keyword">when</span>, otherwise)</span><br><span class="line">  - trim (<span class="keyword">where</span>, <span class="keyword">set</span>)</span><br><span class="line">  - <span class="keyword">foreach</span></span><br><span class="line">  <span class="comment">-------------------------------</span></span><br></pre></td></tr></table></figure>

<p>我们之前写的 SQL 语句都比较简单，如果有比较复杂的业务，我们需要写复杂的 SQL 语句，往往需要拼接，而拼接 SQL ，稍微不注意，由于引号，空格等缺失可能都会导致错误。</p>
<p>那么怎么去解决这个问题呢？这就要使用 mybatis 动态SQL，通过 if, choose, when, otherwise, trim, where, set, foreach等标签，可组合成非常灵活的SQL语句，从而在提高 SQL 语句的准确性的同时，也大大提高了开发人员的效率。</p>
<hr>
<ul>
<li><strong>提供样表：</strong></li>
</ul>
<img src="/2021/04/21/Mybatis%EF%BC%88%E4%BA%8C%EF%BC%89/3.png" class title="blog">

<p><img src="/2021/04/21/Mybatis%EF%BC%88%E4%BA%8C%EF%BC%89/GitHub_Blog\myblog\source_drafts\Mybatis入门（二）\3.png" alt="image-20210421222515645"></p>
<ul>
<li><strong>编写实体类</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Date</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String id;</span><br><span class="line">   <span class="keyword">private</span> String title;</span><br><span class="line">   <span class="keyword">private</span> String author;</span><br><span class="line">   <span class="keyword">private</span> Date createTime;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> views;</span><br><span class="line">   <span class="comment">//set，get....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><strong>编写SQL语句</strong></li>
</ul>
<blockquote>
<p>if 语句</p>
</blockquote>
<p><strong>需求：根据作者名字和博客名字来查询博客！如果作者名字为空，那么只根据博客名字查询，反之，则根据作者名来查询</strong></p>
<p>1、编写接口类</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需求1</span></span><br><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">queryBlogIf</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>

<p>2、编写SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--需求1：</span></span><br><span class="line"><span class="comment">根据作者名字和博客名字来查询博客！</span></span><br><span class="line"><span class="comment">如果作者名字为空，那么只根据博客名字查询，反之，则根据作者名来查询</span></span><br><span class="line"><span class="comment">select * from blog where title = #&#123;title&#125; and author = #&#123;author&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">  select * from blog where</span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">      title = #&#123;title&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">      and author = #&#123;author&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		这样写我们可以看到，如果 author 等于 null，那么查询语句为 select * from user where title=#&#123;title&#125;,但是如果title为空呢？那么查询语句为 select * from user where and author=#&#123;author&#125;，这是错误的 SQL 语句，如何解决呢？请看下面的 where 语句！</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>Where</p>
</blockquote>
<p>修改上面的SQL语句；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">  select * from blog</span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">          title = #&#123;title&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">          and author = #&#123;author&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>这个“where”标签会知道如果它包含的标签中有返回值的话，它就插入一个‘where’。此外，如果标签返回的内容是以AND 或OR 开头的，则它会剔除掉。</strong></p>
<blockquote>
<p>Set</p>
</blockquote>
<p>同理，上面的对于查询 SQL 语句包含 where 关键字，如果在进行更新操作的时候，含有 set 关键词，我们怎么处理呢？</p>
<p>1、编写接口方法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateBlog</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>

<p>2、sql配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意set是用的逗号隔开--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">  update blog</span><br><span class="line">     <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;,</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">            author = #&#123;author&#125;</span><br><span class="line">         <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">  where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>choose语句</p>
</blockquote>
<p>有时候，我们不想用到所有的查询条件，只想选择其中的一个，查询条件有一个满足即可，使用 choose 标签可以解决此类问题，类似于 Java 的 switch 语句</p>
<p>1、编写接口方法</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">queryBlogChoose</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>

<p>2、sql配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogChoose&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">  select * from blog</span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">                title = #&#123;title&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">              and author = #&#123;author&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">              and views = #&#123;views&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>SQL片段</p>
</blockquote>
<p>有时候可能某个 sql 语句我们用的特别多，为了增加代码的重用性，简化代码，我们需要将这些代码抽取出来，然后使用时直接调用。</p>
<p><strong>提取SQL片段：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">      title = #&#123;title&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">      and author = #&#123;author&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>引用SQL片段：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIf&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">  select * from blog</span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 引用 sql 片段，如果refid 指定的不在本文件中，那么需要在前面加上 namespace --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 在这里还可以引用其他的 sql 片段 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>①、最好基于 单表来定义 sql 片段，提高片段的可重用性</p>
<p>②、在 sql 片段中不要包括 where</p>
<blockquote>
<p>Foreach</p>
</blockquote>
<p>将数据库中前三个数据的id修改为1,2,3；</p>
<p>需求：我们需要查询 blog 表中 id 分别为1,2,3的博客信息</p>
<p>1、编写接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">queryBlogForeach</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>

<p>2、编写SQL语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogForeach&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;blog&quot;</span>&gt;</span></span><br><span class="line">  select * from blog</span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       collection:指定输入对象中的集合属性</span></span><br><span class="line"><span class="comment">       item:每次遍历生成的对象</span></span><br><span class="line"><span class="comment">       open:开始遍历时的拼接字符串</span></span><br><span class="line"><span class="comment">       close:结束时拼接的字符串</span></span><br><span class="line"><span class="comment">       separator:遍历对象之间需要拼接的字符串</span></span><br><span class="line"><span class="comment">       select * from blog where 1=1 and (id=1 or id=2 or id=3)</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span>  <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span>&gt;</span></span><br><span class="line">          id=#&#123;id&#125;</span><br><span class="line">       <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="🎫Mybatis的缓存机制"><a href="#🎫Mybatis的缓存机制" class="headerlink" title="🎫Mybatis的缓存机制"></a>🎫Mybatis的缓存机制</h1><p>1、什么是缓存 [ Cache ]？</p>
<ul>
<li>存在内存中的临时数据。</li>
<li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li>
</ul>
<p>2、为什么使用缓存？</p>
<ul>
<li>减少和数据库的交互次数，减少系统开销，提高系统效率。</li>
</ul>
<p>3、什么样的数据能使用缓存？</p>
<ul>
<li>经常查询并且不经常改变的数据。</li>
</ul>
<blockquote>
<p>Mybatis缓存</p>
</blockquote>
<ul>
<li><p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</p>
</li>
<li><p>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong></p>
</li>
<li><ul>
<li>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</li>
<li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li>
<li>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</li>
</ul>
</li>
</ul>
<blockquote>
<p>一级缓存</p>
</blockquote>
<p>一级缓存也叫本地缓存：</p>
<ul>
<li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li>
<li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；</li>
</ul>
<blockquote>
<p>一级缓存失效的四种情况</p>
</blockquote>
<p>1.一级缓存是SqlSession级别的缓存，是一直开启的，我们关闭不了它；</p>
<p>2.一级缓存失效情况：没有使用到当前的一级缓存，效果就是，还需要再向数据库中发起一次查询请求！</p>
<p>3.对数据进行增删改的时候会自动清除缓存</p>
<p>4.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//手动清理缓存</span></span><br><span class="line">sqlsession.clearcache();</span><br></pre></td></tr></table></figure>







<blockquote>
<p>二级缓存</p>
</blockquote>
<ul>
<li><p>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</p>
</li>
<li><p>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</p>
</li>
<li><p>工作机制</p>
</li>
<li><ul>
<li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li>
<li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li>
<li>新的会话查询信息，就可以从二级缓存中获取内容；</li>
<li>不同的mapper查出的数据会放在自己对应的缓存（map）中；</li>
</ul>
</li>
</ul>
<blockquote>
<p>使用步骤</p>
</blockquote>
<p>1、开启全局缓存 【mybatis-config.xml】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、去每个mapper.xml中配置使用二级缓存，这个配置非常简单；【xxxMapper.xml】</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">官方示例=====&gt;查看官方文档</span><br><span class="line">&lt;cache</span><br><span class="line"> eviction=&quot;FIFO&quot;</span><br><span class="line"> flushInterval=&quot;60000&quot;</span><br><span class="line"> size=&quot;512&quot;</span><br><span class="line"> readOnly=&quot;true&quot;/&gt;</span><br><span class="line">这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，因此对它们进行修改可能会在不同线程中的调用者产生冲突。</span><br></pre></td></tr></table></figure>



<ul>
<li>只要开启了二级缓存，我们在同一个Mapper中的查询，可以在二级缓存中拿到数据</li>
<li>查出的数据都会被默认先放在一级缓存中</li>
<li>只有会话提交或者关闭以后，一级缓存中的数据才会转到二级缓存中</li>
</ul>
<img src="/2021/04/21/Mybatis%EF%BC%88%E4%BA%8C%EF%BC%89/4.png" class title="circle">



<p><strong>注意：部分内容搬自狂神说公众号文档，缓存部分其实本身并不想讲，用到的并不多，但还是了解一下</strong></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring5(二)</title>
    <url>/2021/05/01/Spring5%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="✌自动装配"><a href="#✌自动装配" class="headerlink" title="✌自动装配"></a>✌自动装配</h1><p>&emsp;&emsp;对于实体类，我们在配置文件中通过 <code>bean</code> 标签进行属性装配，对于引用数据类型来说，这样的方式较为繁琐，Spring提供了一种更为简单的装配方式——<strong>自动装配</strong>.</p>
<p>​        自动装配分为两种，下面将一一介绍：</p>
<ul>
<li>在配置文件中增添属性</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">autowire属性会在配置文件中会按照给定的方式匹配到相应的对象从而进行装配：</span><br><span class="line">	byName实际上就是通过属性名的小写形式进行匹配</span><br><span class="line">	byType实际上就是通过属性的类型进行匹配,配置文件中类型必须唯一</span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;jh.pojo.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span> /&gt;</span></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;jh.pojo.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>利用注解</li>
</ul>
<p>使用之前需要进行相关配置：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">在配置文件beans标签中添加如下内容：</span><br><span class="line">xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line"></span><br><span class="line">直接添加到xlns:schemaLocation中</span><br><span class="line">http:<span class="regexp">//</span>www.springframework.org<span class="regexp">/schema/</span>context</span><br><span class="line">http:<span class="regexp">//</span>www.springframework.org<span class="regexp">/schema/</span>context/spring-context.xsd</span><br><span class="line"></span><br><span class="line">再添加如下标签：</span><br><span class="line">    &lt;context:annotation-config/&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1. @Autowired : 单独使用会先按ByType去找,找不到则按Byname去查找(默认取当前属性名)</span><br><span class="line">2. @Resource : 按照先Byname去查找后再按ByType查找</span><br><span class="line">3. @Qualifier : 在使用@Autowire，加上@Qualifier(“test”)可以指定ByName注入哪个对象</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;六六&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;66&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//    当required 为 false 可以理解为不需要 即该属性的值可以为空 也就是配置文件中可以没有这个bean对象</span></span><br><span class="line"><span class="comment">//    Autowired的可以帮助自动匹配自定义类 ，java自带的类和普通的数据类型不能使用</span></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="comment">//    Qualifier可以帮助Autowired 按照id进行选择</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;address1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Resource如有指定的name属性，先按该属性进行byName方式查找装配；</span></span><br><span class="line"><span class="comment">//    其次再进行默认的byName方式进行装配；</span></span><br><span class="line"><span class="comment">//    如果以上都不成功，则按byType的方式自动装配</span></span><br><span class="line">    <span class="meta">@Resource(name = &quot;cat1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：@Autowire(require = false)可以理解为不需要 即该属性的值可以为空 也就是配置文件中可以没有这个bean对象</strong></p>
<h1 id="😎使用注解开发"><a href="#😎使用注解开发" class="headerlink" title="😎使用注解开发"></a>😎使用注解开发</h1><p>在学习了Mybatis后，愈发了解注解的便利性，当然了也进行相应的配置：</p>
<p>只要在上述配置中添加一个标签</p>
<p><code>&lt;context:component-scan base-package=&quot;包名&quot;/&gt;</code></p>
<p><strong>给出一些常用的注解</strong>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1. @Autowired : 单独使用会先按ByType去找,找不到则按Byname去查找(默认取当前属性名)</span><br><span class="line">2. @Resource : 按照先Byname去查找后再按ByType查找</span><br><span class="line">3. @Qualifier : 在使用@Autowire，加上@Qualifier(“test”)可以指定Byname注入哪个对象；</span><br><span class="line">4. @Component : 等价于在配置文件中写的bean标签</span><br><span class="line">5. @value : 可以给属性赋值</span><br><span class="line">6. @Repository : 功能与@Component一致，常用于给Dao层注册</span><br><span class="line">7. @Service : 功能与@Component一致，常用于给service层注册</span><br><span class="line">8. @Controller : 功能与@Component一致，常用于给control层注册</span><br><span class="line">9. @Scope : 可以定义作用域，单例或者其它类型 </span><br></pre></td></tr></table></figure>

<p>接下来一一进行介绍：</p>
<blockquote>
<p>@Component</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;user&quot;)</span></span><br><span class="line"><span class="comment">//等价于在配置文件中的 &lt;bean id = &quot;user&quot; class=&quot;当前类&quot;/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;张三&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;18&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实 <code>@Repository、@Service 、@Controller</code> 的效果与 <code>@Component</code> 的效果一样，只是用的地方不一样而已.</p>
<blockquote>
<p>@Scope</p>
</blockquote>
<p>分为单例模式和原型模式：</p>
<ul>
<li>单例模式：无论获取多少个对象都指向同一个对象</li>
<li>原型模式：无论获取多少个对象都指向不同的对象</li>
</ul>
<p><strong>这样以来，可以将User中的<code>Cat、Dog</code> 同样的使用，完全免去了在配置文件中创建对象的工作</strong></p>
<h1 id="🎭代理模式"><a href="#🎭代理模式" class="headerlink" title="🎭代理模式"></a>🎭代理模式</h1><p>代理模式分为俩种：静态代理和动态代理.</p>
<blockquote>
<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2></blockquote>
<p><strong>静态代理角色分析</strong></p>
<ul>
<li><p>抽象角色 : 一般使用接口或者抽象类来实现</p>
</li>
<li><p>真实角色 : 被代理的角色</p>
</li>
<li><p>代理角色 : 代理真实角色 ; 代理真实角色后 , 一般会做一些附属的操作 .</p>
</li>
<li><p>客户  :  使用代理角色来进行一些操作 .</p>
</li>
</ul>
<p><strong>代码实现</strong></p>
<p>Rent . java 即抽象角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象角色：租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Host . java 即真实角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//真实角色: 房东，房东要出租房子</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;房屋出租&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Proxy . java 即代理角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代理角色：中介</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Host host;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.host = host;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//租房</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>&#123;</span><br><span class="line">       seeHouse();</span><br><span class="line">       host.rent();</span><br><span class="line">       fare();</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//看房</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;带房客看房&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//收中介费</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fare</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;收中介费&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Client . java 即客户</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户类，一般客户都会去找代理！</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//房东要租房</span></span><br><span class="line">       Host host = <span class="keyword">new</span> Host();</span><br><span class="line">       <span class="comment">//中介帮助房东</span></span><br><span class="line">       Proxy proxy = <span class="keyword">new</span> Proxy(host);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//你去找中介！</span></span><br><span class="line">       proxy.rent();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析：在这个过程中，你直接接触的就是中介，就如同现实生活中的样子，你看不到房东，但是你依旧租到了房东的房子通过代理，这就是所谓的代理模式.</p>
<p><strong>静态代理的好处:</strong></p>
<ul>
<li>可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情 .</li>
<li>公共的业务由代理来完成 . 实现了业务的分工 ,</li>
<li>公共业务发生扩展时变得更加集中和方便 .</li>
</ul>
<p>缺点 :</p>
<ul>
<li>类多了 , 多了代理类 , 工作量变大了 . 开发效率降低 .</li>
</ul>
<p>我们想要静态代理的好处，又不想要静态代理的缺点，所以 , 就有了动态代理 !</p>
<blockquote>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2></blockquote>
<ul>
<li><p>动态代理的角色和静态代理的一样 .</p>
</li>
<li><p>动态代理的代理类是动态生成的 . 静态代理的代理类是我们提前写好的</p>
</li>
<li><p>动态代理分为两类 : 一类是基于接口动态代理 , 一类是基于类的动态代理</p>
</li>
<li><ul>
<li>基于接口的动态代理—-JDK动态代理</li>
<li>基于类的动态代理–cglib</li>
<li>现在用的比较多的是 <code>javasist</code> 来生成动态代理 . 百度一下<code>javasist</code></li>
<li>我们这里使用JDK的原生代码来实现，其余的道理都是一样的！、</li>
</ul>
</li>
</ul>
<p><strong>JDK的动态代理需要了解两个类</strong></p>
<p>核心 : <code>InvocationHandler</code>   和   <code>Proxy</code>  ， 打开JDK帮助文档看看</p>
<p>【<code>InvocationHandler</code>：调用处理程序】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Object <span class="title">invoke</span><span class="params">(Object proxy, 方法 method, Object[] args)</span>；</span></span><br><span class="line"><span class="function"><span class="comment">//参数</span></span></span><br><span class="line"><span class="function"><span class="comment">//proxy - 调用该方法的代理实例</span></span></span><br><span class="line"><span class="function"><span class="comment">//method -所述方法对应于调用代理实例上的接口方法的实例。方法对象的声明类将是该方法声明的接口，它可以是代理类继承该方法的代理接口的超级接口。</span></span></span><br><span class="line"><span class="function"><span class="comment">//args -包含的方法调用传递代理实例的参数值的对象的阵列，或null如果接口方法没有参数。原始类型的参数包含在适当的原始包装器类的实例中，例如java.lang.Integer或java.lang.Boolean 。</span></span></span><br></pre></td></tr></table></figure>

<p>【Proxy  : 代理】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成代理类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),</span><br><span class="line">                                 rent.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>代码实现</strong> </p>
<p>抽象角色和真实角色和之前的一样！</p>
<p>Rent . java 即抽象角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象角色：租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Host . java 即真实角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//真实角色: 房东，房东要出租房子</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;房屋出租&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ProxyInvocationHandler. java </code>即代理角色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Rent rent;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRent</span><span class="params">(Rent rent)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.rent = rent;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//生成代理类，重点是第二个参数，获取要代理的抽象角色！之前都是一个角色，现在可以代理一类角色</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),</span><br><span class="line">               rent.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// proxy : 代理类 method : 代理类的调用处理程序的方法对象.</span></span><br><span class="line">   <span class="comment">// 处理代理实例上的方法调用并返回结果</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> throwsThrowable </span>&#123;</span><br><span class="line">       seeHouse();</span><br><span class="line">       <span class="comment">//核心：本质利用反射实现！</span></span><br><span class="line">       Object result = method.invoke(rent, args);</span><br><span class="line">       fare();</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//看房</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;带房客看房&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//收中介费</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fare</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;收中介费&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Client . java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//租客</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//真实角色</span></span><br><span class="line">       Host host = <span class="keyword">new</span> Host();</span><br><span class="line">       <span class="comment">//代理实例的调用处理程序</span></span><br><span class="line">       ProxyInvocationHandler pih = <span class="keyword">new</span> ProxyInvocationHandler();</span><br><span class="line">       pih.setRent(host); <span class="comment">//将真实角色放置进去！</span></span><br><span class="line">       Rent proxy = (Rent)pih.getProxy(); <span class="comment">//动态生成对应的代理类！</span></span><br><span class="line">       proxy.rent();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>核心：<strong>一个动态代理 , 一般代理某一类业务 , 一个动态代理可以代理多个类，代理的是接口！、</strong></p>
<blockquote>
<h3 id="动态代理的好处"><a href="#动态代理的好处" class="headerlink" title="动态代理的好处"></a>动态代理的好处</h3></blockquote>
<p>静态代理有的它都有，静态代理没有的，它也有！</p>
<ul>
<li>可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情 .</li>
<li>公共的业务由代理来完成 . 实现了业务的分工 ,</li>
<li>公共业务发生扩展时变得更加集中和方便 .</li>
<li>一个动态代理 , 一般代理某一类业务</li>
<li>一个动态代理可以代理多个类，代理的是接口！</li>
</ul>
<h1 id="🎇Spring-AOP"><a href="#🎇Spring-AOP" class="headerlink" title="🎇Spring AOP"></a>🎇Spring AOP</h1><p>&emsp;&emsp;意为面向切面编程，为什么需要面向切向？在业务逻辑已经完善的情况下，去修改源代码是十分危险的事情，于是我需要在完整的业务逻辑中，插入一个切面，从切入点切入，但不影响原有的业务逻辑（并不会接触原有项目的源代码），只是对其进行功能增强以及完善.提高了代码复用性以及效率.</p>
<p><strong>接下来介绍相关的概念：</strong></p>
<ul>
<li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要关注的部分，就是横切关注点。如日志 , 安全 , 缓存 , 事务等等 ….</li>
<li>切面（ASPECT）：横切关注点 被模块化 的特殊对象。即，它是一个类。</li>
<li>通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。</li>
<li>目标（Target）：被通知对象。</li>
<li>代理（Proxy）：向目标对象应用通知之后创建的对象。</li>
<li>切入点（PointCut）：切面通知 执行的 “地点”的定义。</li>
<li>连接点（JointPoint）：与切入点匹配的执行点。</li>
</ul>
<p>使用之前依旧需要进行相关配置:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 相关依赖：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置文件中添加：--&gt;</span></span><br><span class="line">xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line"></span><br><span class="line">http://www.springframework.org/schema/aop</span><br><span class="line">http://www.springframework.org/schema/aop/spring-aop.xsd</span><br></pre></td></tr></table></figure>





<p><strong>需求：在所有方法前后添加方法前日志以及方法后日志？</strong></p>
<blockquote>
<h2 id="第一种实现方式"><a href="#第一种实现方式" class="headerlink" title="第一种实现方式"></a>第一种实现方式</h2></blockquote>
<p><strong>用<code>Spring</code>框架中提供的类进行切入</strong>：</p>
<ul>
<li>接口类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>接口实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceIml</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===Select===&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===Update===&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===Insert===&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;===Delete===&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法前日志类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">log</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] objects, Object o)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(o.getClass().getName()+<span class="string">&quot;的&quot;</span>+method.getName()+<span class="string">&quot;方法被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法后日志</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Afterlog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object o, Method method, Object[] objects, Object o1)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法后日志执行~~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userservice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;jh.pojo.UserServiceIml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;after&quot;</span> <span class="attr">class</span>=<span class="string">&quot;jh.pojo.Afterlog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;before&quot;</span> <span class="attr">class</span>=<span class="string">&quot;jh.pojo.log&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    方式一: 用spring框架中提供的类进行切入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span> &gt;</span></span><br><span class="line"><span class="comment">&lt;!--        定义切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* jh.pojo.UserServiceIml.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对于以上<code>expression=&quot;execution(* jh.pojo.UserServiceIml.*(..))&quot;</code>的解读：</p>
<p>​    <code>execution()</code> : 执行的意思,</p>
<p>​    第一个 <code>*</code> : 对应返回值类型， * 表示所有类型</p>
<p>​    包名：需要实现类的全限定类名</p>
<p>​    类名后的<code>.*</code> ：表示类下的所有方法</p>
<p>​    最后的<code>(..)</code> : 表示所有的形式参数</p>
<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        UserDao userservice = context.getBean(<span class="string">&quot;userservice&quot;</span>, UserDao.class);</span><br><span class="line">        userservice.select();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<h2 id="第二种实现方式"><a href="#第二种实现方式" class="headerlink" title="第二种实现方式"></a>第二种实现方式</h2></blockquote>
<p><strong>自定义前后方法实现</strong></p>
<ul>
<li>自定义类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;diy&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">diy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法前执行~~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法后执行~~~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    方式二:自定义前后方法进行实现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* jh.pojo.UserServiceIml.*(..))&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>





<blockquote>
<h2 id="第三种实现方式"><a href="#第三种实现方式" class="headerlink" title="第三种实现方式"></a>第三种实现方式</h2></blockquote>
<p><strong>利用注解增强类</strong></p>
<ul>
<li>注解类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component(&quot;pointcut&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Annotationpointcut</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* jh.pojo.UserServiceIml.*(..) )&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行之前&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* jh.pojo.UserServiceIml.*(..) )&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法执行之后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示环绕 ， 在最前面一个 和 最后面一个</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* jh.pojo.UserServiceIml.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前~~&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;签名&quot;</span>+jp.getSignature());</span><br><span class="line">        Object proce = jp.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后&quot;</span>);</span><br><span class="line">        System.out.println(proce);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>配置文件</li>
</ul>
<p><strong>记得记得开启组件扫描器</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    第三种: 实现自定义注解增强实现类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>个人比较喜欢第一种，搭配注解使用，非常香~，第二种也非常好</strong></p>
<h1 id="🎉Spring-Mybatis整合"><a href="#🎉Spring-Mybatis整合" class="headerlink" title="🎉Spring-Mybatis整合"></a>🎉Spring-Mybatis整合</h1><p>先提供相关依赖以及配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--让mavaen处理xml文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li><p>编写<code>Dao</code></p>
<ul>
<li>接口类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>接口实现类(整合后必须要写这个类不能只用映射文件)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSession sqlSession;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSession</span><span class="params">(SqlSession sqlSession)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSession.getMapper(UserMapper.class).getUserList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>编写映射文件要与接口同名</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;jh.Dao.UserMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userchange&quot;</span> <span class="attr">type</span>=<span class="string">&quot;jh.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userchange&quot;</span>&gt;</span></span><br><span class="line">        select * from users</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>编写实体类User</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>编写Spring配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    sqlSessionFactory对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:jh/Dao/*.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    通过sqlSessionFactory创建sqlSession--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/bjpowernode?serverTimezone=UTC&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;qwe123456&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;jh.Dao.UserMapperImpl&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        UserMapper userMapper =(UserMapper) context.getBean(<span class="string">&quot;userMapper&quot;</span>);</span><br><span class="line">        List&lt;User&gt; list = userMapper.getUserList();</span><br><span class="line">        <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="🎊声明示事物"><a href="#🎊声明示事物" class="headerlink" title="🎊声明示事物"></a>🎊声明示事物</h1><ul>
<li>配置文件中编写</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line"></span><br><span class="line">http://www.springframework.org/schema/tx</span><br><span class="line">http://www.springframework.org/schema/tx/spring-tx.xsd</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    配置声明示事物--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    结合aop实现事物--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* jh.Dao.* .*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Spring5</tag>
      </tags>
  </entry>
  <entry>
    <title>项目构建工具之Maven</title>
    <url>/2021/04/17/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E4%B9%8BMaven/</url>
    <content><![CDATA[<h1 id="🎇maven是什么干什么的？"><a href="#🎇maven是什么干什么的？" class="headerlink" title="🎇maven是什么干什么的？"></a>🎇maven是什么干什么的？</h1><blockquote>
<p>maven的作用是：1、在文件中添加相应的配置，maven就会自动的下载相应的jar包；2、下载依赖，只要配置的jar包所依赖的其他jar包都会被它自动下载下来； 3、可以直接通过它打包war或者jar项目。 4.帮助我们进行代码测试，并且会生成测试报告 5.帮助我们一次性编译所有源文件 生成 <code>.class</code> 文件 ，存放于target 目录中.</p>
</blockquote>
<p>&emsp;&emsp;用通俗的例子来讲：<code>maven</code> 好比一个百货商场， 在以前没有百货商场的时候 ， 如果你需要买一些工具需要去到相应的店铺去寻找，买食物需要去到菜市场 ，十分繁琐，现在有了百货商场，你可以去里面很简单的就买到你所需要的所有东西，不用去到处寻找.</p>
<p>&emsp;&emsp;在项目中，此时我需要的东西对应的就是一些 jar 包  ，我们只需要要在配置文件中添加我们需要的jar包相应的信息 ，<code>maven</code> 便会帮我们下载好，不仅如此如果下载的jar包依赖了其它jar包，也会同时帮助我们下载.同时，还可以帮我们对项目进行打包，打包成jar文件或者war文件.</p>
<p>&emsp;&emsp;maven的出现确实提高了程序员的开发效率，不再为各处寻找相应版本的jar包而发愁~~</p>
<h1 id="🎊maven的安装目录解析"><a href="#🎊maven的安装目录解析" class="headerlink" title="🎊maven的安装目录解析"></a>🎊maven的安装目录解析</h1><p>从 Apache Maven 官网下载 Maven 的安装包并解压之后，进入安装目录，我们会看到如下内容：</p>
<p>bin<br>boot<br>conf<br>lib<br>LICENSE.txt<br>NOTICE.txt<br>README.txt<br>接下来，分别解读以上目录的内容及功能：</p>
<p><strong>第 1 个：bin</strong></p>
<p>　　该目录包含了mvn运行的脚本，分别为mvn、mvn.bat、mvnDebug、mvnDebug.bat和m2.conf，这些脚本用来配置 Java 命令，准备 CLASSPATH 和相关的 Java 系统属性，然后执行 Java 命令。其中，mvn是基于 UNIX 平台的shell脚本，mvn.bat是基于 Windows 平台的bat脚本；同理，mvnDebug是基于 UNIX 平台的shell脚本，mvnDebug.bat是基于 Windows 平台的bat脚本。在命令行输入任何一条mvn命令时，实际上就是调用这些脚本。而mvn和mvnDebug的区别就在于后者比前者多了一条MAVEN_DEBUG_OPTS配置，其作用就是在运行 Maven 时开启debug，以便调试 Maven 本身。此外，m2.conf是classworlds的配置文件。</p>
<p><strong>第 2 个：boot</strong></p>
<p>　　该目录只包含一个文件，以maven 3.0为例，该文件为plexus-classworlds-2.2.3.jar。plexus-classworlds是一个类加载器框架，相对于默认的 Java 类加载器，它提供了更丰富的语法以方便配置，Maven 使用该框架加载自己的类库。</p>
<p><strong>第 3 个：conf</strong></p>
<p>　　该目录包含了要给非常重要的文件settings.xml。直接修改该文件，就能再机器上全局地定制 Maven 的行为。一般情况下，我们更偏向于复制该文件至<del>/.m2/目录下（</del>表示用户目录），然后修改该文件，在用户范围定制 Maven 的行为。</p>
<p><strong>第 4 个：lib</strong></p>
<p>　　该目录包含了所有 Maven 运行时需要的 Java 类库，Maven 本身是分模块开发的，因此用户能看到诸如maven-core-3.0.jar和maven-model-3.0.jar之类的文件。此外，这里还包含一些 Maven 用到的第三方依赖，如common-cli-1.2.jar和google-collection-1.0.jar等。对于 Maven 2 来说，该目录只包含一个如maven-2.2.1-uber.jar的文件，原本各为独立的 JAR 文件的 Maven 模块和第三方类库都被拆解后重新合并到了这个 JAR 文件中。可以说，lib目录就是真正的 Maven。还有一点值得一提的是，用户可以在这个目录中找到 Maven 内置的超级 POM。</p>
<p><strong>第 5 个：LICENSE.txt</strong></p>
<p>　　该文件记录了 Maven 使用的软件许可证 Apache License Version 2.0。</p>
<p><strong>第 6 个：NOTICE.txt</strong></p>
<p>　　该文件记录了 Maven 包含的第三方软件。</p>
<p><strong>第 7 个：README.txt</strong></p>
<h1 id="🏀maven相关核心概念"><a href="#🏀maven相关核心概念" class="headerlink" title="🏀maven相关核心概念"></a>🏀maven相关核心概念</h1><ul>
<li><p><strong><code>Pom.xml</code></strong> :  也称为项目对象模型，用于记录需要的 <code>jar</code> 包的坐标 以及<code>maven</code>配置属性等.</p>
</li>
<li><p><strong>约定的目录结构</strong> ：<code>maven</code> 项目构建出来具有特定的文件目录结构.</p>
</li>
<li><p><strong>坐标 (也称gav)</strong> ：分别由 <code>groupId 、artifactId 、version</code> 相当于一个网址具有唯一性，用于唯一标识一个 <code>jar/war </code> 包.</p>
</li>
<li><p><strong>依赖管理</strong> ：用于管理各个 <code>jar</code> 包之间的依赖 ，<code>maven</code> 可以自动帮助管理，并且具有解决依赖矛盾的措施.</p>
</li>
<li><p><strong>生命周期</strong> ：即整个 <code>maven</code> 项目的构建过程 （项目的清理、初始化、编译、测试、打包、集成测试、验证、部署和站点生成等）.</p>
</li>
<li><p><strong>插件/目标</strong> ：插件用于补充提供原本没有的功能，目标即 <code>target</code> 用于存储编译好的 <code>class</code> 文件以及打包过后的包 .</p>
</li>
<li><p><strong>依赖范围（scope）</strong>：对于某一个 <code>jar</code> 包只需在测试阶段使用，在真正部署的时候其实不需要，此时的依赖范围仅限于测试.</p>
</li>
<li><p><strong>本地仓库</strong> ：相当于自家的冰箱，用于存储项目中需要的 <code>jar</code> 包，可以存储从 <code>maven</code> 远程仓库下载得到的 <code>jar</code> 包.</p>
</li>
<li><p><strong>远程仓库</strong> ：<code>maven</code> 的远程仓库（相当于一个超市）包含各种类型 <code>jar</code> 包，除此之外还有阿里云镜像，以及开源中国镜像或者私服.</p>
</li>
</ul>
<h2 id="Pom-xml-文件详解"><a href="#Pom-xml-文件详解" class="headerlink" title="Pom.xml 文件详解"></a>Pom.xml 文件详解</h2><p><strong>① . 坐标</strong> </p>
<blockquote>
<p>分别由 <code>groupId 、artifactId 、version</code> 相当于一个网址具有唯一性，用于唯一标识一个 <code>jar/war </code> 包.</p>
</blockquote>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--dependencies标签外的坐标--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>一般为域名倒写具有唯一性<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>实际项目名称-模块名称<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>版本号-RELEASE（发行）/SNAPSHOT（开发中）<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>打包项目类型<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--dependencies内的坐标--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span> <span class="comment">&lt;!--依赖范围--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>② . properties属性</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--类似于java中的导包，用.表示子目录/属性</span></span><br><span class="line"><span class="comment">	简而言之就是表明以下属性是可以在文件中一一对应的，</span></span><br><span class="line"><span class="comment">	也可以自定义属性 在pom的其它位置可以通$&#123;属性名&#125;进行引用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>③ . plugins</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--用于记录插件信息以及版本号--&gt;</span></span><br><span class="line">	   <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="约定的目录结构"><a href="#约定的目录结构" class="headerlink" title="约定的目录结构"></a>约定的目录结构</h2><p>以下就是一个<code>maven</code> 项目初始化后所拥有的目录结构</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">├─src                       #用于存放源文件</span><br><span class="line">│  ├─main                   #用于存放编写的java文件以及配置属性</span><br><span class="line">│  │  ├─java                #java源文件</span><br><span class="line">│  │  └─resources           #配置属性</span><br><span class="line">│  └─test	                #存放测试代码和配置属性</span><br><span class="line">│      ├─java	            #测试代码</span><br><span class="line">│      └─resources          #配置属性</span><br><span class="line">└─target                    #compile编译生成的class文件以及配置文件</span><br><span class="line">|    ├─classes</span><br><span class="line">|    └─maven-status</span><br><span class="line">|        └─maven-compiler-plugin</span><br><span class="line">|            └─compile</span><br><span class="line">|                └─<span class="keyword">default</span>-compile</span><br><span class="line">|—pom.xml</span><br></pre></td></tr></table></figure>



<h2 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h2><p>依赖范围常见的分为四种：<code>test 、 compile 、provided 、runtime</code> 接下来一一进行介绍.</p>
<ul>
<li><p><strong><code>test</code></strong> ： 顾名思义就是在测试阶段所需要的依赖，而在打包部署阶段并不会对编译以及运行产生影响，因此打包时会忽略这一类包.</p>
</li>
<li><p><strong><code>compile</code></strong> : 该范围就是默认依赖范围，此依赖范围对 于编译、测试、运行三种classpath都有效 .</p>
</li>
<li><p><strong><code>provide</code></strong> :  使用该依赖范围的 <code>maven</code> 依赖，只对编译和测试有效，对运行无效，典型的例子就是servlet-api .</p>
</li>
<li><p><strong><code>runtime</code></strong> : 使用该依赖范围的maven依赖，只对测试和运行有效，对编译的无效，典型例子就是JDBC的驱动实现</p>
</li>
</ul>
<h1 id="🎡配置本地仓库"><a href="#🎡配置本地仓库" class="headerlink" title="🎡配置本地仓库"></a>🎡配置本地仓库</h1><p> 在安装目录中的  <code>conf</code> 文件夹中的 <code>settings.xml</code> 中可以配置本地仓库的路径，可用于存储从远程仓库下载来的 <code>jar</code> 包.</p>
<img src="/2021/04/17/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E4%B9%8BMaven/1.png" class title="repository">

<p>只需新建一个 <code>localRepository</code> 标签，并且配置上本地仓库的路径，保存即可.</p>
<h1 id="🎏配置远程阿里云镜像"><a href="#🎏配置远程阿里云镜像" class="headerlink" title="🎏配置远程阿里云镜像"></a>🎏配置远程阿里云镜像</h1><p>同样的在 <code>conf</code> 文件夹中的 <code>settings.xml</code> 文件中，添加红色框中内容就可以了.</p>
<img src="/2021/04/17/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E4%B9%8BMaven/2.png" class title="mirrors">

<p><strong>具体代码如下：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="🥟maven-常用命令"><a href="#🥟maven-常用命令" class="headerlink" title="🥟maven 常用命令"></a>🥟maven 常用命令</h1><p>以下将列举 <code>maven</code> 的常用命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn -version                 查看maven的版本及配置信息</span><br><span class="line"></span><br><span class="line">mvn compile                编译项目代码</span><br><span class="line"></span><br><span class="line">mvn package               打包项目</span><br><span class="line"></span><br><span class="line">mvn package -Dmaven.test.skip&#x3D;true   打包项目时跳过单元测试</span><br><span class="line"></span><br><span class="line">mvn test                      运行单元测试</span><br><span class="line"></span><br><span class="line">mvn clean                    清除编译产生的target文件夹内容，可以配合相应命令一起使用</span><br><span class="line"></span><br><span class="line">mvn install                   打包后将其安装在本地仓库</span><br><span class="line"></span><br><span class="line">mvn deploy                  打包后将其安装到pom文件中配置的远程仓库</span><br><span class="line"></span><br><span class="line">mvn site                       生成站点目录</span><br><span class="line"></span><br><span class="line">mvn dependency:list      显示所有已经解析的所有依赖</span><br><span class="line"></span><br><span class="line">mvn dependency:tree     以树的结构展示项目中的依赖</span><br><span class="line"></span><br><span class="line">mvn dependency:analyze  对项目中的依赖进行分析，依赖未使用，使用单未引入</span><br><span class="line"></span><br><span class="line">mvn tomcat:run              启动tomcat</span><br></pre></td></tr></table></figure>





<h1 id="🍣在IDEA中配置maven"><a href="#🍣在IDEA中配置maven" class="headerlink" title="🍣在IDEA中配置maven"></a>🍣在IDEA中配置maven</h1><p>在 <code>IDEA</code>中设置 <code>maven</code> ：<br>    使用自己安装的maven， 需要覆盖 <code>IDEA</code>中的默认的设置.让 <code>IDEA</code>指定 <code>maven</code>安装位置等信息</p>
<pre><code>配置的入口 ①：配置当前工程的设置， file--settings ---Build, Excution,Deployment--Build Tools--Maven 
                       Maven Home directory: maven的安装目录
                        User Settings File :  就是maven安装目录conf/setting.xml配置文件
                        Local Repository :    本机仓库的目录位置

                   --Build Tools--Maven--Runner  
                      VM Options : -DarchetypeCatalog=internal
                      JRE: 你项目的jdk


                archetypeCatalog=internal , maven项目创建时，会联网下载模版文件，
                      比较大， 使用-DarchetypeCatalog=internal，不用下载， 创建maven项目速度快。

            ②：配置以后新建工程的设置， New projects settings 跟上面一样进行配置即可
</code></pre>
<p>创建项目的时候选择的模板：</p>
<ul>
<li><strong>maven-archetype-quickstart : 普通的java项目</strong></li>
<li><strong>maven-archetype-webapp : web工程</strong></li>
</ul>
<p>侧边栏可以直接通过点击实现 <code>maven</code> 命令的执行：</p>
<img src="/2021/04/17/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E4%B9%8BMaven/3.png" class title="aside">

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>每日一题(五):动态规划(转载)</title>
    <url>/2021/07/23/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>前言：本文转载了labuladong大佬的一篇文章，非常通俗易懂的讲解了动态规划的思想与代码实现，于是转载到了本博客</p>
<p>原文章地址：<a href="https://leetcode-cn.com/problems/fibonacci-number/solution/dong-tai-gui-hua-tao-lu-xiang-jie-by-labuladong/">原文地址</a> (ps:我是在leetcode上刷题看题解看到的)</p>
</blockquote>
<hr>
<h1 id="动态规划概述"><a href="#动态规划概述" class="headerlink" title="动态规划概述"></a>动态规划概述</h1><p>这篇文章是我们号半年前一篇 200 多赞赏的成名之作「动态规划详解」的进阶版。由于账号迁移的原因，旧文无法被搜索到，所以我润色了本文，并添加了更多干货内容，希望本文成为解决动态规划的一部「指导方针」。</p>
<p>动态规划问题（Dynamic Programming）应该是很多读者头疼的，不过这类问题也是最具有技巧性，最有意思的。本书使用了整整一个章节专门来写这个算法，动态规划的重要性也可见一斑。</p>
<p>刷题刷多了就会发现，算法技巧就那几个套路，我们后续的动态规划系列章节，都在使用本文的解题框架思维，如果你心里有数，就会轻松很多。所以本文放在第一章，来扒一扒动态规划的裤子，形成一套解决这类问题的思维框架，希望能够成为解决动态规划问题的一部指导方针。本文就来讲解该算法的基本套路框架，下面上干货。</p>
<p>首先，动态规划问题的一般形式就是求最值。动态规划其实是运筹学的一种最优化方法，只不过在计算机问题上应用比较多，比如说让你求最长递增子序列呀，最小编辑距离呀等等。</p>
<p>既然是要求最值，核心问题是什么呢？求解动态规划的核心问题是穷举。因为要求最值，肯定要把所有可行的答案穷举出来，然后在其中找最值呗。</p>
<p>动态规划这么简单，就是穷举就完事了？我看到的动态规划问题都很难啊！</p>
<p>首先，动态规划的穷举有点特别，因为这类问题存在「重叠子问题」，如果暴力穷举的话效率会极其低下，所以需要「备忘录」或者「DP table」来优化穷举过程，避免不必要的计算。</p>
<p>而且，动态规划问题一定会具备「最优子结构」，才能通过子问题的最值得到原问题的最值。</p>
<p>另外，虽然动态规划的核心思想就是穷举求最值，但是问题可以千变万化，穷举所有可行解其实并不是一件容易的事，只有列出<strong>正确的「状态转移方程」</strong>才能正确地穷举。</p>
<p>以上提到的重叠子问题、最优子结构、状态转移方程就是动态规划三要素。具体什么意思等会会举例详解，但是在实际的算法问题中，写出状态转移方程是最困难的，这也就是为什么很多朋友觉得动态规划问题困难的原因，我来提供我研究出来的一个思维框架，辅助你思考状态转移方程：</p>
<p>明确 base case -&gt; 明确「状态」-&gt; 明确「选择」 -&gt; 定义 dp 数组/函数的含义。</p>
<p>按上面的套路走，最后的结果就可以套这个框架：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"># 初始化 base <span class="keyword">case</span></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][...] = base</span><br><span class="line"># 进行状态转移</span><br><span class="line"><span class="keyword">for</span> 状态<span class="number">1</span> in 状态<span class="number">1</span>的所有取值：</span><br><span class="line">    <span class="keyword">for</span> 状态<span class="number">2</span> in 状态<span class="number">2</span>的所有取值：</span><br><span class="line">        <span class="keyword">for</span> ...</span><br><span class="line">            dp[状态<span class="number">1</span>][状态<span class="number">2</span>][...] = 求最值(选择<span class="number">1</span>，选择<span class="number">2.</span>..)</span><br></pre></td></tr></table></figure>


<p>下面通过斐波那契数列问题和凑零钱问题来详解动态规划的基本原理。前者主要是让你明白什么是重叠子问题（斐波那契数列没有求最值，所以严格来说不是动态规划问题），后者主要举集中于如何列出状态转移方程。</p>
<h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h1><p>请读者不要嫌弃这个例子简单，只有简单的例子才能让你把精力充分集中在算法背后的通用思想和技巧上，而不会被那些隐晦的细节问题搞的莫名其妙。想要困难的例子，历史文章里有的是。</p>
<h2 id="暴力递归"><a href="#暴力递归" class="headerlink" title="暴力递归"></a>暴力递归</h2><p>斐波那契数列的数学形式就是递归的，写成代码就是这样：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (N == <span class="number">1</span> || N == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fib</span>(N - <span class="number">1</span>) + <span class="built_in">fib</span>(N - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个不用多说了，学校老师讲递归的时候似乎都是拿这个举例。我们也知道这样写代码虽然简洁易懂，但是十分低效，低效在哪里？假设 n = 20，请画出递归树：</p>
<img src="/2021/07/23/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%BA%94%EF%BC%89/3.png" class>

<p>PS：但凡遇到需要递归的问题，最好都画出递归树，这对你分析算法的复杂度，寻找算法低效的原因都有巨大帮助。</p>
<p>这个递归树怎么理解？就是说想要计算原问题 f(20)，我就得先计算出子问题 f(19) 和 f(18)，然后要计算 f(19)，我就要先算出子问题 f(18) 和 f(17)，以此类推。最后遇到 f(1) 或者 f(2) 的时候，结果已知，就能直接返回结果，递归树不再向下生长了。</p>
<p>递归算法的时间复杂度怎么计算？就是用子问题个数乘以解决一个子问题需要的时间。</p>
<p>首先计算子问题个数，即递归树中节点的总数。显然二叉树节点总数为指数级别，所以子问题个数为 O(2^n)。</p>
<p>然后计算解决一个子问题的时间，在本算法中，没有循环，只有 f(n - 1) + f(n - 2) 一个加法操作，时间为 O(1)。</p>
<p>所以，这个算法的时间复杂度为二者相乘，即 O(2^n)，指数级别，爆炸。</p>
<p>观察递归树，很明显发现了算法低效的原因：存在大量重复计算，比如 f(18) 被计算了两次，而且你可以看到，以 f(18) 为根的这个递归树体量巨大，多算一遍，会耗费巨大的时间。更何况，还不止 f(18) 这一个节点被重复计算，所以这个算法及其低效。</p>
<p>这就是动态规划问题的第一个性质：重叠子问题。下面，我们想办法解决这个问题。</p>
<h2 id="带备忘录的递归解法"><a href="#带备忘录的递归解法" class="headerlink" title="带备忘录的递归解法"></a>带备忘录的递归解法</h2><p>明确了问题，其实就已经把问题解决了一半。即然耗时的原因是重复计算，那么我们可以造一个「备忘录」，每次算出某个子问题的答案后别急着返回，先记到「备忘录」里再返回；每次遇到一个子问题先去「备忘录」里查一查，如果发现之前已经解决过这个问题了，直接把答案拿出来用，不要再耗时去计算了。</p>
<p>一般使用一个数组充当这个「备忘录」，当然你也可以使用哈希表（字典），思想都是一样的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (N &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 备忘录全初始化为 0</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">memo</span><span class="params">(N + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="comment">// 进行带备忘录的递归</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">helper</span>(memo, N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">helper</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; memo, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// base case </span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 已经计算过</span></span><br><span class="line">    <span class="keyword">if</span> (memo[n] != <span class="number">0</span>) <span class="keyword">return</span> memo[n];</span><br><span class="line">    memo[n] = <span class="built_in">helper</span>(memo, n - <span class="number">1</span>) + <span class="built_in">helper</span>(memo, n - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> memo[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，画出递归树，你就知道「备忘录」到底做了什么。</p>
<img src="/2021/07/23/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%BA%94%EF%BC%89/2.png" class>

<p>实际上，带「备忘录」的递归算法，把一棵存在巨量冗余的递归树通过「剪枝」，改造成了一幅不存在冗余的递归图，极大减少了子问题（即递归图中节点）的个数。</p>
<img src="/2021/07/23/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%BA%94%EF%BC%89/1.png" class>

<p><strong>递归算法的时间复杂度怎么计算？就是用子问题个数乘以解决一个子问题需要的时间。</strong></p>
<p>子问题个数，即图中节点的总数，由于本算法不存在冗余计算，子问题就是 f(1), f(2), f(3) … f(20)，数量和输入规模 n = 20 成正比，所以子问题个数为 O(n)。</p>
<p>解决一个子问题的时间，同上，没有什么循环，时间为 O(1)。</p>
<p>所以，本算法的时间复杂度是 O(n)。比起暴力算法，是降维打击。</p>
<p>至此，带备忘录的递归解法的效率已经和迭代的动态规划解法一样了。实际上，这种解法和迭代的动态规划已经差不多了，只不过这种方法叫做「自顶向下」，动态规划叫做「自底向上」。</p>
<p>啥叫「自顶向下」？注意我们刚才画的递归树（或者说图），是从上向下延伸，都是从一个规模较大的原问题比如说 f(20)，向下逐渐分解规模，直到 f(1) 和 f(2) 这两个 base case，然后逐层返回答案，这就叫「自顶向下」。</p>
<p>啥叫「自底向上」？反过来，我们直接从最底下，最简单，问题规模最小的 f(1) 和 f(2) 开始往上推，直到推到我们想要的答案 f(20)，这就是动态规划的思路，这也是为什么动态规划一般都脱离了递归，而是由循环迭代完成计算。</p>
<h2 id="dp-数组的迭代解法"><a href="#dp-数组的迭代解法" class="headerlink" title="dp 数组的迭代解法"></a>dp 数组的迭代解法</h2><p>有了上一步「备忘录」的启发，我们可以把这个「备忘录」独立出来成为一张表，就叫做 DP table 吧，在这张表上完成「自底向上」的推算岂不美哉！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(N + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    dp[<span class="number">1</span>] = dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= N; i++)</span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">return</span> dp[N];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/07/23/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%BA%94%EF%BC%89/4.png" class>


<p>画个图就很好理解了，而且你发现这个 DP table 特别像之前那个「剪枝」后的结果，只是反过来算而已。实际上，带备忘录的递归解法中的「备忘录」，最终完成后就是这个 DP table，所以说这两种解法其实是差不多的，大部分情况下，效率也基本相同。</p>
<p>这里，引出「状态转移方程」这个名词，实际上就是描述问题结构的数学形式：</p>
<img src="/2021/07/23/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%BA%94%EF%BC%89/5.png" class>

<p>为啥叫「状态转移方程」？其实就是为了听起来高端。你把 f(n) 想做一个状态<code> n</code>，这个状态 n 是由状态<code> n - 1</code> 和状态<code>n - 2</code>相加转移而来，这就叫状态转移，仅此而已。</p>
<p>你会发现，上面的几种解法中的所有操作，例如<code> return f(n - 1) + f(n - 2)，dp[i] = dp[i - 1] + dp[i - 2]</code>，以及对备忘录或 DP table 的初始化操作，都是围绕这个方程式的不同表现形式。可见列出「状态转移方程」的重要性，它是解决问题的核心。而且很容易发现，其实状态转移方程直接代表着暴力解法。</p>
<p>千万不要看不起暴力解，动态规划问题最困难的就是写出这个暴力解，即状态转移方程。只要写出暴力解，优化方法无非是用备忘录或者 DP table，再无奥妙可言。</p>
<p>这个例子的最后，讲一个细节优化。细心的读者会发现，根据斐波那契数列的状态转移方程，当前状态只和之前的两个状态有关，其实并不需要那么长的一个 DP table 来存储所有的状态，只要想办法存储之前的两个状态就行了。所以，可以进一步优化，把空间复杂度降为 <code>O(1)</code>：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span> || n == <span class="number">1</span>) </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> prev = <span class="number">1</span>, curr = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = prev + curr;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个技巧就是所谓的「状态压缩」，如果我们发现每次状态转移只需要 DP table 中的一部分，那么可以尝试用状态压缩来缩小 DP table 的大小，只记录必要的数据，上述例子就相当于把DP table 的大小从 n 缩小到 2。后续的动态规划章节中我们还会看到这样的例子，一般来说是把一个二维的 DP table 压缩成一维，即把空间复杂度从<code>O(n^2)</code>压缩到 <code>O(n)</code>。</p>
<p>有人会问，动态规划的另一个重要特性「最优子结构」，怎么没有涉及？下面会涉及。斐波那契数列的例子严格来说不算动态规划，因为没有涉及求最值，以上旨在说明重叠子问题的消除方法，演示得到最优解法逐步求精的过程。下面，看第二个例子，凑零钱问题。</p>
<h1 id="凑零钱问题"><a href="#凑零钱问题" class="headerlink" title="凑零钱问题"></a>凑零钱问题</h1><p>先看下题目：给你 k 种面值的硬币，面值分别为 c1, c2 … ck，每种硬币的数量无限，再给一个总金额 amount，问你最少需要几枚硬币凑出这个金额，如果不可能凑出，算法返回 -1 。算法的函数签名如下：</p>
<p>// coins 中是可选硬币面值，amount 是目标金额<br><code>int coinChange(int[] coins, int amount);</code><br>比如说 k = 3，面值分别为 1，2，5，总金额 amount = 11。那么最少需要 3 枚硬币凑出，即 11 = 5 + 5 + 1。</p>
<p>你认为计算机应该如何解决这个问题？显然，就是把所有肯能的凑硬币方法都穷举出来，然后找找看最少需要多少枚硬币。</p>
<h2 id="暴力递归-1"><a href="#暴力递归-1" class="headerlink" title="暴力递归"></a>暴力递归</h2><p>首先，这个问题是动态规划问题，因为它具有「最优子结构」的。要符合「最优子结构」，子问题间必须互相独立。啥叫相互独立？你肯定不想看数学证明，我用一个直观的例子来讲解。</p>
<p>比如说，假设你考试，每门科目的成绩都是互相独立的。你的原问题是考出最高的总成绩，那么你的子问题就是要把语文考到最高，数学考到最高…… 为了每门课考到最高，你要把每门课相应的选择题分数拿到最高，填空题分数拿到最高…… 当然，最终就是你每门课都是满分，这就是最高的总成绩。</p>
<p>得到了正确的结果：最高的总成绩就是总分。因为这个过程符合最优子结构，“每门科目考到最高”这些子问题是互相独立，互不干扰的。</p>
<p>但是，如果加一个条件：你的语文成绩和数学成绩会互相制约，数学分数高，语文分数就会降低，反之亦然。这样的话，显然你能考到的最高总成绩就达不到总分了，按刚才那个思路就会得到错误的结果。因为子问题并不独立，语文数学成绩无法同时最优，所以最优子结构被破坏。</p>
<p>回到凑零钱问题，为什么说它符合最优子结构呢？比如你想求 amount = 11 时的最少硬币数（原问题），如果你知道凑出 amount = 10 的最少硬币数（子问题），你只需要把子问题的答案加一（再选一枚面值为 1 的硬币）就是原问题的答案。因为硬币的数量是没有限制的，所以子问题之间没有相互制，是互相独立的。</p>
<p>PS：关于最优子结构的问题，后文动态规划答疑篇 还会再举例探讨。</p>
<p>那么，既然知道了这是个动态规划问题，就要思考如何列出正确的状态转移方程？</p>
<p>1、确定 base case，这个很简单，显然目标金额 amount 为 0 时算法返回 0，因为不需要任何硬币就已经凑出目标金额了。</p>
<p>2、确定「状态」，也就是原问题和子问题中会变化的变量。由于硬币数量无限，硬币的面额也是题目给定的，只有目标金额会不断地向 base case 靠近，所以唯一的「状态」就是目标金额 amount。</p>
<p>3、确定「选择」，也就是导致「状态」产生变化的行为。目标金额为什么变化呢，因为你在选择硬币，你每选择一枚硬币，就相当于减少了目标金额。所以说所有硬币的面值，就是你的「选择」。</p>
<p>4、明确 dp 函数/数组的定义。我们这里讲的是自顶向下的解法，所以会有一个递归的 dp 函数，一般来说函数的参数就是状态转移中会变化的量，也就是上面说到的「状态」；函数的返回值就是题目要求我们计算的量。就本题来说，状态只有一个，即「目标金额」，题目要求我们计算凑出目标金额所需的最少硬币数量。所以我们可以这样定义 dp 函数：</p>
<p>dp(n) 的定义：输入一个目标金额 n，返回凑出目标金额 n 的最少硬币数量。</p>
<p>搞清楚上面这几个关键点，解法的伪码就可以写出来了：</p>
<p><strong>伪代码框架：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">def <span class="title">coinChange</span><span class="params">(coins: List[<span class="keyword">int</span>], amount: <span class="keyword">int</span>)</span>:</span></span><br><span class="line"><span class="function">    # 定义：要凑出金额 n，至少要 dp(n) 个硬币</span></span><br><span class="line"><span class="function">    def dp(n):</span></span><br><span class="line"><span class="function">        # 做选择，选择需要硬币最少的那个结果</span></span><br><span class="line"><span class="function">        for coin in coins:</span></span><br><span class="line"><span class="function">            res =</span> <span class="built_in">min</span>(res, <span class="number">1</span> + <span class="built_in">dp</span>(n - coin))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    # 题目要求的最终结果是 <span class="built_in">dp</span>(amount)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dp</span>(amount)</span><br></pre></td></tr></table></figure>
<p>根据伪码，我们加上 base case 即可得到最终的答案。显然目标金额为 0 时，所需硬币数量为 0；当目标金额小于 0 时，无解，返回 -1：</p>
<p>def coinChange(coins: List[int], amount: int):</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">def <span class="title">dp</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="function">    # base case</span></span><br><span class="line"><span class="function">    if n =</span>= <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    # 求最小值，所以初始化为正无穷</span><br><span class="line">    res = float(&#x27;INF&#x27;)</span><br><span class="line">    <span class="keyword">for</span> coin in coins:</span><br><span class="line">        subproblem = <span class="built_in">dp</span>(n - coin)</span><br><span class="line">        # 子问题无解，跳过</span><br><span class="line">        <span class="keyword">if</span> subproblem == <span class="number">-1</span>: <span class="keyword">continue</span></span><br><span class="line">        res = <span class="built_in">min</span>(res, <span class="number">1</span> + subproblem)</span><br><span class="line"></span><br><span class="line">    return res if res != float(&#x27;INF&#x27;) else -1</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">dp</span>(amount)</span><br></pre></td></tr></table></figure>
<p>至此，状态转移方程其实已经完成了，以上算法已经是暴力解法了，以上代码的数学形式就是状态转移方程：</p>
<img src="/2021/07/23/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%BA%94%EF%BC%89/8.png" class>

<p>至此，这个问题其实就解决了，只不过需要消除一下重叠子问题，比如 amount = 11, coins = {1,2,5} 时画出递归树看看：</p>
<img src="/2021/07/23/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%BA%94%EF%BC%89/6.png" class>

<p>递归算法的时间复杂度分析：子问题总数 x 每个子问题的时间。</p>
<p>子问题总数为递归树节点个数，这个比较难看出来，是 O(n^k)，总之是指数级别的。每个子问题中含有一个 for 循环，复杂度为 O(k)。所以总时间复杂度为 O(k * n^k)，指数级别。</p>
<h2 id="带备忘录的递归"><a href="#带备忘录的递归" class="headerlink" title="带备忘录的递归"></a>带备忘录的递归</h2><p>类似之前斐波那契数列的例子，只需要稍加修改，就可以通过备忘录消除子问题：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">def <span class="title">coinChange</span><span class="params">(coins: List[<span class="keyword">int</span>], amount: <span class="keyword">int</span>)</span>:</span></span><br><span class="line"><span class="function">    # 备忘录</span></span><br><span class="line"><span class="function">    memo =</span> <span class="built_in">dict</span>()</span><br><span class="line">    <span class="function">def <span class="title">dp</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="function">        # 查备忘录，避免重复计算</span></span><br><span class="line"><span class="function">        if n in memo: return memo[n]</span></span><br><span class="line"><span class="function">        # base case</span></span><br><span class="line"><span class="function">        if n =</span>= <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> n &lt; <span class="number">0</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        res = float(&#x27;INF&#x27;)</span><br><span class="line">        <span class="keyword">for</span> coin in coins:</span><br><span class="line">            subproblem = <span class="built_in">dp</span>(n - coin)</span><br><span class="line">            <span class="keyword">if</span> subproblem == <span class="number">-1</span>: <span class="keyword">continue</span></span><br><span class="line">            res = <span class="built_in">min</span>(res, <span class="number">1</span> + subproblem)</span><br></pre></td></tr></table></figure>

<p>​        </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">    # 记入备忘录</span><br><span class="line">    memo[n] = res if res != float(&#x27;INF&#x27;) else -1</span><br><span class="line">    <span class="keyword">return</span> memo[n]</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">dp</span>(amount)</span><br></pre></td></tr></table></figure>
<p>不画图了，很显然「备忘录」大大减小了子问题数目，完全消除了子问题的冗余，所以子问题总数不会超过金额数 n，即子问题数目为 O(n)。处理一个子问题的时间不变，仍是 O(k)，所以总的时间复杂度是 O(kn)。</p>
<h2 id="dp-数组的迭代解法-1"><a href="#dp-数组的迭代解法-1" class="headerlink" title="dp 数组的迭代解法"></a>dp 数组的迭代解法</h2><p>当然，我们也可以自底向上使用 dp table 来消除重叠子问题，关于「状态」「选择」和 base case 与之前没有区别，dp 数组的定义和刚才 dp 函数类似，也是把「状态」，也就是目标金额作为变量。不过 dp 函数体现在函数参数，而 dp 数组体现在数组索引：</p>
<p>dp 数组的定义：当目标金额为 i 时，至少需要 dp[i] 枚硬币凑出。</p>
<p>根据我们文章开头给出的动态规划代码框架可以写出如下解法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 数组大小为 amount + 1，初始值也为 amount + 1</span></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(amount + <span class="number">1</span>, amount + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 外层 for 循环在遍历所有状态的所有取值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dp.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="comment">// 内层 for 循环在求所有选择的最小值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> coin : coins) &#123;</span><br><span class="line">            <span class="comment">// 子问题无解，跳过</span></span><br><span class="line">            <span class="keyword">if</span> (i - coin &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            dp[i] = <span class="built_in">min</span>(dp[i], <span class="number">1</span> + dp[i - coin]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (dp[amount] == amount + <span class="number">1</span>) ? <span class="number">-1</span> : dp[amount];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/07/23/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%88%E4%BA%94%EF%BC%89/7.png" class>


<p>PS：为啥 dp 数组初始化为 amount + 1 呢，因为凑成 amount 金额的硬币数最多只可能等于 amount（全用 1 元面值的硬币），所以初始化为 amount + 1 就相当于初始化为正无穷，便于后续取最小值。</p>
<h1 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h1><p>第一个斐波那契数列的问题，解释了如何通过「备忘录」或者「dp table」的方法来优化递归树，并且明确了这两种方法本质上是一样的，只是自顶向下和自底向上的不同而已。</p>
<p>第二个凑零钱的问题，展示了如何流程化确定「状态转移方程」，只要通过状态转移方程写出暴力递归解，剩下的也就是优化递归树，消除重叠子问题而已。</p>
<p>如果你不太了解动态规划，还能看到这里，真得给你鼓掌，相信你已经掌握了这个算法的设计技巧。</p>
<p><strong>计算机解决问题其实没有任何奇技淫巧，它唯一的解决办法就是穷举</strong>，穷举所有可能性。算法设计无非就是先思考“如何穷举”，然后再追求“如何聪明地穷举”。</p>
<p>列出动态转移方程，就是在解决“如何穷举”的问题。之所以说它难，一是因为很多穷举需要递归实现，二是因为有的问题本身的解空间复杂，不那么容易穷举完整。</p>
<p>备忘录、DP table 就是在追求“如何聪明地穷举”。用空间换时间的思路，是降低时间复杂度的不二法门，除此之外，试问，还能玩出啥花活？</p>
<p>之后我们会有一章专门讲解动态规划问题，如果有任何问题都可以随时回来重读本文，希望读者在阅读每个题目和解法时，多往「状态」和「选择」上靠，才能对这套框架产生自己的理解，运用自如。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>每日一题</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程(一):服务器通信概念</title>
    <url>/2021/07/20/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="🧵何为网络编程？"><a href="#🧵何为网络编程？" class="headerlink" title="🧵何为网络编程？"></a>🧵何为网络编程？</h1><p>网络编程通俗讲，<strong>即通过编码的方式让两台计算机之间进行通信（即进行数据传递和交换）</strong></p>
<h1 id="💢网络编程中的核心问题"><a href="#💢网络编程中的核心问题" class="headerlink" title="💢网络编程中的核心问题"></a>💢网络编程中的核心问题</h1><p>现有如下场景： 打开浏览器<strong>访问</strong>百度，输入<strong>百度的网址</strong>，按下回车<strong>发出请求</strong>，此时就向<strong>百度的服务器</strong>发出了请求，服务器<strong>接收到请求</strong>之后<strong>响应</strong>给客户度(浏览器)结果即前端页面，此时我们所访问的百度页面就被渲染出来了.</p>
<hr>
<p>场景中：</p>
<ul>
<li>通过浏览器访问服务器 —-&gt; B/S架构(BS的出现解决了CS的冗杂繁琐，更加高校)</li>
<li>输入百度网址 —-&gt; 通过网址确定了百度的服务器 —- &gt; 定向发出请求</li>
<li>服务器接收到请求后 —-&gt; 根据请求所携带的参数/网址进行响应，返回给客户度响应的数据，通过浏览器去展示 </li>
</ul>
<h2 id="服务器寻址"><a href="#服务器寻址" class="headerlink" title="服务器寻址"></a>服务器寻址</h2><p>在网络中存在众多的服务器，那我们如何确定去访问我们所需要的那一台服务器去请求服务呢？显然，我们需要通过<strong>网址</strong>，网址的基本组成包括些什么呢？ <strong>网址 = <code>协议://((ip地址:端口号)/域名)/(资源路径)?(参数 key = value)</code></strong> ， 想要确定服务器，显然需要服务器的<code>ip</code> 地址，或者其<code>ip</code>地址所映射的域名，即**通过<code>DNS</code>解析域名从而获得<code>ip+端口号</code>**，又由于同一台服务器上不同的端口号运行着不同的服务，于是我们也需要确定端口号，如果使用了域名，绑定域名时应该同时绑定端口号。此时我们只需要知道我们需要访问的资源路径即可，如果需要传递参数，通过 <strong>key = value</strong> 或者 更为安全的另一种方式 来进行传递.</p>
<h2 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h2><h3 id="网络协议的定义"><a href="#网络协议的定义" class="headerlink" title="网络协议的定义"></a>网络协议的定义</h3><pre><code> ● 网络协议是一种特殊的软件，是计算机网络实现其功能的基本机制

 ● 网络协议的本质是规则，即各种硬件和软件必须遵循的共同规则

 ● 网络协议并不是一套单独的软件，他融合于其他所有软件系统中，协议在网络中无所

    不在
</code></pre>
<h3 id="常用的网络协议"><a href="#常用的网络协议" class="headerlink" title="常用的网络协议"></a>常用的网络协议</h3><pre><code>   TCP  UDP     HTTP   HTTPS    FTP  DNS  Telnet    TCP/IP    SSL/TLS   websocket
</code></pre>
<h4 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">TCP协议，（transmission control protocol），传输控制协议。</span><br><span class="line">定义：TCP协议是一种面向连接的、可靠的、传输速度慢、基于字节流的传输层通信协议。</span><br><span class="line"></span><br><span class="line"><span class="code">          在简化的计算机网络OSI模型中完成第四层传输层所指定的功能。 </span></span><br></pre></td></tr></table></figure>


<p>提供可靠的端到端的通信，可以保证接收方收到的数据与发送方发送的数据完全一致，能够保证数据不丢失、无差错，同时还有流量控制和拥塞控制的功能，所以TCP协议比较复杂，能够为要求可靠性的应用层协议提供服务，如文件传输、邮件收发、网页浏览、远程登录等等</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">作用：主要用于在主机间建立一个虚拟连接，以实现高可靠性的数据包交换</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">IP协议的作用：可以进行IP数据包的分割和组装</span><br><span class="line"></span><br><span class="line">IP协议的缺点：但是通过IP协议并不能清楚的了解到数据包是否顺利的发送给目标计算机</span><br><span class="line"></span><br><span class="line">TCP的特点：</span><br></pre></td></tr></table></figure>

<p>（1）面向连接的</p>
<p>（2）提供可靠的数据传输服务</p>
<p>（3）提供流量控制。TCP能够控制进程发送数据的速率，保证另一端不被大量的数据“淹没”而出现溢出。</p>
<p>（4）提供拥塞控制。当网络出现拥塞的时候，TCP能够减小向网络注入数据的速率和数量，缓解拥塞。</p>
<p>（5）提供全双工通信。TCP提供双向的数据传输服务。TCP允许通信双方的应用进程在任何时候发送数据。TCP连接的两端都设有发送缓存和接收缓存，用来临时存放双向通信的数据。</p>
<p>（6）TCP是面向字节流的。TCP中的“流”是指流入到进程或从进程流出的字节</p>
<h4 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h4><p>用户数据包协议（User Datagram Protocol）</p>
<p>UDP协议不能保证数据不丢失、无差错，也不能保证接收方收到数据的顺序和发送方发送数据的顺序一样。UDP协议比较简单，但效率比较高，能为对可靠性要求不高，对实时性要求比较高的应用提供服务，如传输音频和视频。</p>
<p>定义：UDP协议是OSI(Open System Interconnection，开放式系统互联)模型中的一种</p>
<p>无连接的、简单不可靠的、传输速度快、面向事务的传输层通信协议。</p>
<p>UDP协议的特点：</p>
<p>（1）无连接的。</p>
<p>（2）UDP是一种尽力而为的服务方式，不提供可靠的数据传输服务（比如数据的丢失、重复和无序）。</p>
<p>（3）UDP是高效的传输协议。</p>
<p>（4）UDP没有拥塞控制和流量控制。</p>
<p>TCP和UDP协议的区别</p>
<p>A、TCP面向连接（打电话要先拨号建立连接）；</p>
<pre><code>  UDP是无连接的（发送数据之前不需要建立连接）。
</code></pre>
<p>B、TCP提供可靠的服务（通过TCP连接传送的数据，无差错、不丢失、不重复、按序到达）；</p>
<pre><code>  UDP尽最大努力交付，不保证可靠交付。
</code></pre>
<p>C、TCP基于字节流（实际上是TCP把数据看成一连串无结构的字节流）。</p>
<pre><code>  UDP是基于报文的，UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低

 （对实时应用很有用，IP电话，实时视频电话）。
</code></pre>
<p>D、TCP保证数据正确性；</p>
<pre><code>  UDP可能丢包。
</code></pre>
<p>E、TCP保证数据顺序；</p>
<pre><code>  UDP不保证。
</code></pre>
<p>F、每一条TCP连接只能是点到点的；</p>
<pre><code> UDP支持一对一、一对多、多对一、多对多的交互通信
</code></pre>
<p>G、TCP的逻辑通信信道是全双工的可靠信道</p>
<pre><code>  UDP则是不可靠信道
</code></pre>
<p>H、TCP的首部开销20字节</p>
<pre><code>   UDP的首部开销8字节
</code></pre>
<p>I、TCP要求系统资源较多，UDP较少</p>
<h4 id="TCP-IP协议"><a href="#TCP-IP协议" class="headerlink" title="TCP/IP协议"></a>TCP/IP协议</h4><pre><code> 实质： TCP/IP其实就是TCP和IP等协议的组合，即传输控制协议/互联网协议。

应用场景：主要用于在安装了不同硬件和不同操作系统的计算机之间，实现可靠的网络通

                 信。TCP协议可以保证数据包传输的可靠性；IP协议可以保证数据包被传输到

                目标计算机上。
</code></pre>
<h4 id="FTP协议"><a href="#FTP协议" class="headerlink" title="FTP协议"></a>FTP协议</h4><pre><code> 文件传输协议（File Transfer Protocol）。

 用途：主要用于在两台计算机之间实现文件的上传与下载，其中一台计算机作为FTP的客

            户端，另一台作为FTP的服务端。通过FTP协议可以上传、下载几乎所有的文件类

            型，比如txt  exe  doc  pdf   mp3  zip rar等
</code></pre>
<h4 id="Telnet协议"><a href="#Telnet协议" class="headerlink" title="Telnet协议"></a>Telnet协议</h4><pre><code>  定义：远程登录协议，是Internet上普遍采用的仿真网络协议，同时Telnet也是从远程

            位置登录常用的程序。

  作用：通过Telnet程序登录远程Telnet计算机。一般采用授权的用户名和密码登录。登录

            之后就如同使用本地计算机一样，使用远程计算机的的硬盘、运行应用程序等。
</code></pre>
<h4 id="DNS协议"><a href="#DNS协议" class="headerlink" title="DNS协议"></a>DNS协议</h4><p>DNS（Domain Name System，域名系统），因特网上作为域名和IP地址相互映射的一个分布式数据库，能够使用户更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。通过主机名，最终得到该主机名对应的IP地址的过程叫做域名解析（或主机名解析）。</p>
<p>作用：</p>
<p>● 该协议主要负责将域名转换成网络可以识别的IP地址（<a href="http://www.cce.com.cn转换成221.122.32.15),域名和ip地址是一一对应的./">www.cce.com.cn转换成221.122.32.15），域名和IP地址是一一对应的。</a></p>
<p>● 因为访问网站的时候，最终都是转换成IP地址进行访问的</p>
<p>● 直接设置DNS服务器。可以提高网络的访问速度，保证访问的正确性</p>
<p>DNS的两种查询方式：递归查询和迭代查询</p>
<p>a)递归解析<br>当局部DNS服务器自己不能回答客户机的DNS查询时，它就需要向其他DNS服务器进行查询。此时有两种方式，如图所示的是递归方式。局部DNS服务器自己负责向其他DNS服务器进行查询，一般是先向该域名的根域服务器查询，再由根域名服务器一级级向下查询。最后得到的查询结果返回给局部DNS服务器，再由局部DNS服务器返回给客户端。</p>
<p>b)迭代解析</p>
<p>当局部DNS服务器自己不能回答客户机的DNS查询时，也可以通过迭代查询的方式进行解析，如图所示。局部DNS服务器不是自己向其他DNS服务器进行查询，而是把能解析该域名的其他DNS服务器的IP地址返回给客户端DNS程序，客户端DNS程序再继续向这些DNS服务器进行查询，直到得到查询结果为止。也就是说，迭代解析只是帮你找到相关的服务器而已，而不会帮你去查。比如说：baidu.com的服务器ip地址在192.168.4.5这里，你自己去查吧，本人比较忙，只能帮你到这里了。</p>
<h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h4><pre><code> 超文本传输协议（ Hyper Text Transfer Protocol ）

定义：● 是用于从万维网（www）服务器传输超文本到本地浏览器的传送协议

          ● 是 基于TCP/IP通信协议来传递数据（HTML、图片、查询结果等）的协议

          ● 是一个属于应用层的、面向对象的协议

          ● 由于其简捷、快速的适用于分布式超媒体信息系统

工作原理：HTTP协议工作在客户端-服务端架构上。

                浏览器作为HTTP客户端通过URL向HTTP服务端（即WEB服务器）发送请求，

                WEB服务器根据接收到的请求后，向客户端发送响应信息。

HTTP请求/响应的步骤：

           A、客户端连接到web服务器：一个HTTP客户端通常是浏览器，与web服务器的

                HTTP端口（默认为80）建立一个TCP套接字连接

           B、发送HTTP请求：通过TCP套接字，客户端向web服务器发送一个文本的请求

                报文，一个请求报文由请求行、请求头部、空行和请求数据组成

           C、服务器接收请求并返回HTTP响应：WEB服务器解析请求，定位请求资源。服

                 务器将资源副本写到TCP套接字，由客户端读取。一个响应由状态行、响应头

                 部、空行、响应数据组成

           D、释放TCP连接：若connection模式为close，则服务器主动关闭TCP连接，客户

                 端被动关闭连接，释放TCP连接；若connection模式为keepalive，则该连接

                 会保持一段时间，在该时间内可以接着接收请求

            E、客户端（浏览器）解析HTML内容：客户端首先解析状态行，查看表明请求是

                 否成功的状态代码  ；然后解析每一个响应头，向应头告知以下为若干字节的

                  HTML文档和文档的字符集。客户端读取响应数据HTML，根据HTML的语法

                  对其进行格式化，并在浏览器窗口中显示

 特点：● 无连接：其含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收

               到客户的应答后，断开连接，可以节省传输时间

           ● 无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。

                           缺少状态意味着如果后续处理需要前面的信息，则必须重传。这可能导致

                           每次连接传送的数据量增大。但是在服务器不需要先前信息时，他的应答

                           就较快

            ● 简单快速：客户向服务器发送请求时，只需传送请求方法和路径。

                               请求方法常用POST  GET  HEAD，每种方法规定了客户与服务器联系的

                               类型不同。

                               HTTP协议简单，似的HTTP服务器的程序规模小，因而通信速度快

             ● 灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type

                          标记

             ● 支持B/S   C/S模式

HTTP请求方法：HTTP1.0定义三种方法，即POST   GET   HEAD

                          HTTP1.1新增5种方法，OPTIONS   PUT  DELETE  TRACE  CONNECT

             ● GET：请求指定页面信息，并返回实体主体

             ● POST：向指定资源提交数据进行处理请求（例如提交表单、上传文件）

             ● HEAD：类似GET请求，只不过返回的响应中没有具体的内容，用于获取报头

             ● PUT：从客户端向服务器传送的数据取代指定的文档的内容

             ●  DELETE：请求服务器删除指定的页面

             ●  CONNECT：HTTP/1.1协议中预留给能够将连接改为管道式的代理服务器

             ●  OPTIONS：允许客户端查看服务器的性能

             ● TRACE：回显服务器收到的请求，主要用于测试或诊断

POST和GET的区别：

             ● GET提交的数据会显示在地址栏中（即数据放在URL之后，以?分割URL和传输的

                数据，参数之间以&amp;相连）；

               POST提交的数据放在HTTP包的body中，因此地址栏不会显示提交的数据

             ● GET提交的数据大小有限制（因为浏览器对URL的长度有限制）；

                POST提交的数据没有限制

             ● GET方式提交数据会带来安全问题，比如登录页面，通过GET方式提交数据时，

                用户名和密码会出现在地址栏上，如果页面可以被缓存或者其他人可以访问这台

                机器，就可以从历史记录获得该用户的用户名和密码。

                 POST不存在安全问题

            ● GET方式需要使用Request.QueryString来取得变量的值

                POST通过Request.Form来取得变量的值
</code></pre>
<p>8、SSL/TLS协议</p>
<pre><code> ● SSL（Secure Sockets Layer），安全套接层。上世纪90年代由网景公司设计。原先互

     联网使用的HTTP协议是明文的，存在很多缺点（传输内容会被偷窥（嗅探）和篡改）。

     SSL就是为了解决这些问题

  ● 到了1999年，SSL因为广泛应用，已经成为互联网上的事实标准。IETF就在那一年把

      SSL标准化，标准化名称改为TLS（Transport  Layer  Security），传输层安全协议

   ● SSL和TLS是同一个东西的不同阶段
</code></pre>
<h4 id="HTTPS协议"><a href="#HTTPS协议" class="headerlink" title="HTTPS协议"></a>HTTPS协议</h4><pre><code> 定义：HTTPS协议是HTTP协议和SSL/TLS协议的组合
</code></pre>
<p>   为什么要设计HTTPS成这样：</p>
<pre><code>      ● 兼容性：基于TCP传输；单独使用新的协议将HTTP，把HTTP协议包裹起来

      ● 可扩展性

      ● 保密性（防泄密）

      ●  完整性（防篡改）

      ● 真实性（防假冒）

      ● 性能
</code></pre>
<p>   加密和解密的定义：</p>
<pre><code>     “加密”的过程，就是把“明文”变成“密文”的过程。“解密”的过程就是将“密文”

      变成“明文”的过程。在这两个过程中，都需哟啊“密钥”。
</code></pre>
<p>   对称加密：“加密”和“解密”使用“相同密钥”</p>
<p>   非对称加密：加密”和“解密”使用“不同密钥”</p>
<p>   对称加密和非对称加密的优缺点：</p>
<pre><code>     ● ”非对称加密“的功能比”对称加密“的功能要多

     ● ”非对称加密“涉及复杂的数学问题，所以其性能相对”对称加密“要差
</code></pre>
<h4 id="websocket协议"><a href="#websocket协议" class="headerlink" title="websocket协议"></a>websocket协议</h4><p>1）WebSocket 是Web应用程序的传输协议，是一个Html5协议，它提供了双向的，按序到达的数据流</p>
<p>2）WebSocket的连接是持久的，他通过在客户端和服务器之间保持双工连接，服务器的更新可以被及时推送给客户端，而不需要客户端以一定时间间隔去轮询 </p>
<p>3）WebSocket 连接允许客户端和服务器之间进行全双工通信，以便任一方都可以通过建立的连接将数据推送到另一端。</p>
<p>4）WebSocket 只需要建立一次连接，就可以一直保持连接状态，这相比于轮询方式的不停建立连接显然效率要大大提高</p>
<h4 id="RPC协议"><a href="#RPC协议" class="headerlink" title="RPC协议"></a>RPC协议</h4><p>定义：RPC( Remote Procedure Call)远程过程调用 )协议</p>
<p>与HTTP协议的区别:</p>
<p>远程过程调用直观说法就是A通过网络调用B的过程方法</p>
<p>首先了解OSI网络七层模型</p>
<p>第一层：应用层。定义了用于在网络中进行通信和传输数据的接口；<br>第二层：表示层。定义不同的系统中数据的传输格式，编码和解码规范等；<br>第三层：会话层。管理用户的会话，控制用户间逻辑连接的建立和中断；<br>第四层：传输层。管理着网络中的端到端的数据传输；<br>第五层：网络层。定义网络设备间如何传输数据；<br>第六层：链路层。将上面的网络层的数据包封装成数据帧，便于物理层传输；<br>第七层：物理层。这一层主要就是传输这些二进制数据<br>五层协议结构里面是没有表示层和会话层的。应该说它们和应用层合并。</p>
<p>1）最本质的区别，就是RPC主要是基于TCP/IP协议的，而HTTP主要是基于HTTP协议的，HTTP协议是在传输层协议TCP之上的应用层，效率上，RPC当然是要更胜一筹</p>
<p>2）一般来说，RPC服务主要是针对大型企业的，而HTTP服务主要是针对小企业的，因为RPC效率更高，而HTTP服务开发迭代会更快</p>
<p>RPC服务</p>
<p>从三个角度来介绍RPC服务：RPC架构，同步异步调用、流行的RPC框架</p>
<p>1）RPC架构</p>
<p>包含了四个核心的组件，分别是Client ,Server,Client Stub以及Server Stub，这个Stub大家可以理解为存根。分别说说这几个组件：</p>
<p>客户端（Client），服务的调用方。<br>服务端（Server），真正的服务提供者。<br>客户端存根，存放服务端的地址消息，再将客户端的请求参数打包成网络消息，然后通过网络远程发送给服务方。<br>服务端存根，接收客户端发送过来的消息，将消息解包，并调用本地的方法<br>2）流行的RPC框架</p>
<p>（1）gRPC是Google最近公布的开源软件，基于最新的HTTP2.0协议，并支持常见的众多编程语言</p>
<p>（2）Thrift是Facebook的一个开源项目，主要是一个跨语言的服务开发框架</p>
<p>（3）Dubbo是阿里集团开源的一个极为出名的RPC框架，在很多互联网公司和企业应用中广泛使用</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>网络编程</tag>
      </tags>
  </entry>
</search>
